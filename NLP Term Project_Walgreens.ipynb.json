{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current Working Directory  /Users/javierlasa\n",
      "Current Working Directory  /Users/javierlasa/Downloads\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(\"Current Working Directory \" , os.getcwd())\n",
    "os.chdir(\"/Users/javierlasa/Downloads\")\n",
    "print(\"Current Working Directory \" , os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: python-decouple in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (3.3)\n",
      "Requirement already satisfied: webhoseio in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (0.5)\n",
      "Requirement already satisfied: requests>=2.0.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from webhoseio) (2.24.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (2020.6.20)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (1.25.9)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (3.0.4)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (2.10)\n"
     ]
    }
   ],
   "source": [
    "#Configure API\n",
    "!pip install python-decouple\n",
    "!pip install webhoseio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "import webhoseio\n",
    "from decouple import config\n",
    "\n",
    "webhoseio.config(token=\"\")\n",
    "\n",
    "query_params = {\n",
    "\n",
    "\"q\": \"language:english organization:Walgreens language:english is_first:true\",\n",
    "\n",
    "\"ts\": \"1605236719963\",\n",
    "\n",
    "\"sort\": \"crawled\"\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get the first batch of 100 news posts, add them to newsfeeds - a Python array of JSONs\n",
    "output = webhoseio.query(\"filterWebContent\", query_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds = []\n",
    "for post in output['posts']:\n",
    "    newsfeeds.append(post)\n",
    "len(newsfeeds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'persons': [],\n",
       " 'organizations': [{'name': 'nazi', 'sentiment': 'none'},\n",
       "  {'name': 'walgreens', 'sentiment': 'none'}],\n",
       " 'locations': [{'name': 'stutthof', 'sentiment': 'none'}]}"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds[0]['entities']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the remaining API call limiit and how many more posts are left (e.g. 1 ca\n",
    "output['requestsLeft']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4114"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print(output['totalResults']) # to see total available posts\n",
    "num_more_posts = output['moreResultsAvailable']\n",
    "num_more_posts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4217\n"
     ]
    }
   ],
   "source": [
    "#Get the next batches and add them to newsfeeds\n",
    "count = 0\n",
    "while count < num_more_posts:    \n",
    "    output = webhoseio.get_next()\n",
    "    for post in output['posts']:\n",
    "        newsfeeds.append(post)\n",
    "    count += 100\n",
    "print(len(newsfeeds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "thread\n",
      "uuid\n",
      "url\n",
      "ord_in_thread\n",
      "parent_url\n",
      "author\n",
      "published\n",
      "title\n",
      "text\n",
      "highlightText\n",
      "highlightTitle\n",
      "highlightThreadTitle\n",
      "language\n",
      "external_links\n",
      "external_images\n",
      "entities\n",
      "rating\n",
      "crawled\n",
      "updated\n"
     ]
    }
   ],
   "source": [
    "# Write the JSONs to a data file as one line per post JSON object\n",
    "import json\n",
    "\n",
    "with open(\"webhose_walgreens.json\", \"w\") as data_file:\n",
    "    for feed in newsfeeds:\n",
    "        line = json.dumps(feed)\n",
    "        data_file.write(line)\n",
    "        data_file.write(\"\\n\")\n",
    "        \n",
    "import pandas as pd\n",
    "df = pd.read_json ('webhose_walgreens.json', lines = True)\n",
    "df.to_csv (r'walgreens_articles.csv', index = None)\n",
    "\n",
    "df1 = pd.read_csv('walgreens_articles.csv')\n",
    "\n",
    "for col in df1.columns: \n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4217\n"
     ]
    }
   ],
   "source": [
    "#Read the JSON file back into Python array of JSON objects and confirm the count\n",
    "json_data=open(\"webhose_walgreens.json\").readlines()\n",
    "newsfeeds_read = []\n",
    "for line in json_data:\n",
    "    newsfeeds_read.append(json.loads(line))\n",
    "print(len(newsfeeds_read))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'thread': {'uuid': '0ea0d98647842d8973bbb73a29f580b3b402018e',\n",
       "  'url': 'https://job-openings.monster.com/on-demand-delivery-driver-car-minivan-suv-cargo-van-russellville-al-us-cbdriver-com/222062027?WT.mc_n=RSS2005_jsr',\n",
       "  'site_full': 'job-openings.monster.com',\n",
       "  'site': 'monster.com',\n",
       "  'site_section': 'http://rss.jobsearch.monster.com/rssquery.ashx?WT.mc_n=RSS2005_jsr&#038;q=Human+Resources&#038;cy=US&#038;baseurl=jobsearch.monster.com',\n",
       "  'site_categories': ['job_search', 'jobs'],\n",
       "  'section_title': 'Monster Job Search Results',\n",
       "  'title': 'On Demand Delivery Driver - Car - Minivan - SUV - Cargo Van',\n",
       "  'title_full': 'On Demand Delivery Driver - Car - Minivan - SUV - Cargo Van',\n",
       "  'published': '2020-11-14T21:00:00.000+02:00',\n",
       "  'replies_count': 0,\n",
       "  'participants_count': 0,\n",
       "  'site_type': 'blogs',\n",
       "  'country': 'US',\n",
       "  'spam_score': 0.0,\n",
       "  'main_image': '',\n",
       "  'performance_score': 0,\n",
       "  'domain_rank': 2139,\n",
       "  'reach': {'per_million': 301.0,\n",
       "   'page_views': {'per_million': 16.1, 'per_user': 2.17},\n",
       "   'updated': '2020-10-15T14:45:00.000+03:00'},\n",
       "  'social': {'facebook': {'likes': 0, 'comments': 0, 'shares': 0},\n",
       "   'gplus': {'shares': 0},\n",
       "   'pinterest': {'shares': 0},\n",
       "   'linkedin': {'shares': 0},\n",
       "   'stumbledupon': {'shares': 0},\n",
       "   'vk': {'shares': 0}}},\n",
       " 'uuid': '514906c4b871f6f0654353274058335e96c987ee',\n",
       " 'url': 'https://job-openings.monster.com/On-Demand-Delivery-Driver-Car-Minivan-SUV-Cargo-Van-Russellville-AL-US-CBDriver.com/222062027',\n",
       " 'ord_in_thread': 0,\n",
       " 'parent_url': None,\n",
       " 'author': '',\n",
       " 'published': '2020-11-14T21:00:00.000+02:00',\n",
       " 'title': 'On Demand Delivery Driver - Car - Minivan - SUV - Cargo Van',\n",
       " 'text': 'On Demand Delivery Driver - Car - Minivan - SUV - Cargo Van COMPANY: Complete Delivery Solution\\nComplete Delivery Solution is a delivery company based in Raleigh NC that operates nationwide.The largest portion of our deliveries are medications from local pharmacies (Like CVS or Walgreens) to Long Term Care Facilities or Nursing Homes.We operate on demand and can make the deliver within a couple of hours of an order being placed.We’re currently looking for drivers that are available for on demand deliveries.Our drivers are effectively working for themselves. As such they are in control and able to:Set their own schedule and hoursWith total flexibility, you’re able to adjust them as your availability changesThere’s no obligation to work any number of hoursWe operate 24 Hours, 7 Days a Week, 365 Days a YearCompetitive PayWe provide a competitive rate based on mileage from your home, to the pickup and to the drop off locationWe also have After Hours pricing, meaning you can make more during Nights and WeekendsCan Accept or Reject any orders that come upSince our deliveries are on demand, we understand if you’re not available when something comes upThere’s no obligation to accept number of ordersClose out your account at any timeFind a new job, going on vacation, decide it’s not for youJust let us know and we can easily close out your account temporarily or permanently with no issues or penaltiesRequirements Include:Must be over 21 years of ageHave access to a reliable vehicleBe able to provide proof of insurance for you and the vehicleBe able to pass a background check•overnight availability is recommended Please respond online today for more information.\\u200b Location: Russellville, AL',\n",
       " 'highlightText': '',\n",
       " 'highlightTitle': '',\n",
       " 'highlightThreadTitle': '',\n",
       " 'language': 'english',\n",
       " 'external_links': [],\n",
       " 'external_images': [],\n",
       " 'entities': {'persons': [],\n",
       "  'organizations': [{'name': 'cvs', 'sentiment': 'none'},\n",
       "   {'name': 'raleigh nc', 'sentiment': 'none'},\n",
       "   {'name': 'walgreens', 'sentiment': 'none'}],\n",
       "  'locations': []},\n",
       " 'rating': None,\n",
       " 'crawled': '2020-11-15T03:37:27.003+02:00',\n",
       " 'updated': '2020-11-15T03:37:27.003+02:00'}"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds_read[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Never Forget\n",
      "https://viclarson.blogspot.com/2020/11/never-forget.html\n",
      "2020-11-14T20:49:00.000+02:00\n"
     ]
    }
   ],
   "source": [
    "for feed in newsfeeds_read:\n",
    "    print(feed['title'])\n",
    "    print(feed['url'])\n",
    "    print(feed['published'])\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4217\n"
     ]
    }
   ],
   "source": [
    "#open dedup json data and validate number of elements in list\n",
    "json_data=open(\"webhose_walgreens.json\").readlines()\n",
    "newsfeeds_read = []\n",
    "for line in json_data:\n",
    "    newsfeeds_read.append(json.loads(line))\n",
    "print(len(newsfeeds_read))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: print_schema in ./opt/anaconda3/lib/python3.8/site-packages (1.1.1)\n",
      "Requirement already satisfied: requests in ./opt/anaconda3/lib/python3.8/site-packages (from print_schema) (2.24.0)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in ./opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (3.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (2020.6.20)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in ./opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (1.25.9)\n",
      "Requirement already satisfied: idna<3,>=2.5 in ./opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (2.10)\n",
      "|-  list \t - list [4179] <class 'dict'>\n",
      "   |- thread\t - <class 'dict'>\n",
      "      |- uuid\t - <class 'str'>\n",
      "      |- url\t - <class 'str'>\n",
      "      |- site_full\t - <class 'str'>\n",
      "      |- site\t - <class 'str'>\n",
      "      |- site_section\t - <class 'str'>\n",
      "      |- site_categories\t - list [2] <class 'str'>\n",
      "      |- section_title\t - <class 'str'>\n",
      "      |- title\t - <class 'str'>\n",
      "      |- title_full\t - <class 'str'>\n",
      "      |- published\t - <class 'str'>\n",
      "      |- replies_count\t - <class 'int'>\n",
      "      |- participants_count\t - <class 'int'>\n",
      "      |- site_type\t - <class 'str'>\n",
      "      |- country\t - <class 'str'>\n",
      "      |- spam_score\t - <class 'float'>\n",
      "      |- main_image\t - <class 'str'>\n",
      "      |- performance_score\t - <class 'int'>\n",
      "Not supported\n",
      "Not supported\n",
      "      |- social\t - <class 'dict'>\n",
      "         |- facebook\t - <class 'dict'>\n",
      "            |- likes\t - <class 'int'>\n",
      "            |- comments\t - <class 'int'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- gplus\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- pinterest\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- linkedin\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- stumbledupon\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- vk\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "   |- uuid\t - <class 'str'>\n",
      "   |- url\t - <class 'str'>\n",
      "   |- ord_in_thread\t - <class 'int'>\n",
      "Not supported\n",
      "   |- author\t - <class 'str'>\n",
      "   |- published\t - <class 'str'>\n",
      "   |- title\t - <class 'str'>\n",
      "   |- text\t - <class 'str'>\n",
      "   |- highlightText\t - <class 'str'>\n",
      "   |- highlightTitle\t - <class 'str'>\n",
      "   |- highlightThreadTitle\t - <class 'str'>\n",
      "   |- language\t - <class 'str'>\n",
      "   |- external_links\t - list [2] <class 'str'>\n",
      "   |- external_images\t - list [0] <empty list>\n",
      "   |- entities\t - <class 'dict'>\n",
      "      |- persons\t - list [0] <empty list>\n",
      "      |- organizations\t - list [2] <class 'dict'>\n",
      "         |- name\t - <class 'str'>\n",
      "         |- sentiment\t - <class 'str'>\n",
      "      |- locations\t - list [0] <empty list>\n",
      "Not supported\n",
      "   |- crawled\t - <class 'str'>\n",
      "   |- updated\t - <class 'str'>\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "!pip install print_schema\n",
    "from print_schema import print_schema\n",
    "my_dict = newsfeeds_read\n",
    "print_schema(my_dict, indent=3, dense=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Amazon opens online pharmacy, shaking up another industry Now sold on Amazon: insulin and inhalers By JOSEPH PISANI and TOM MURPHY AP Writers November 17, 2020, 11:05 PM • 5 min read Share to Facebook Share to Twitter Email this article\n",
      "3:13 NOTIFIED: Nov. 27, 2020 Catch up on the developing stories making headlines. The Associated Press NEW YORK -- Now at Amazon.com: insulin and inhalers.\n",
      "The retail colossus opened an online pharmacy Tuesday that allows customers to order medication or prescription refills, and have them delivered to their front door in a couple of days.\n",
      "The potential impact of Amazon's arrival in the pharmaceutical space rippled through that sector immediately. The stocks of CVS Health Corp., Walgreens and Rite Aid all tumbled Tuesday.\n",
      "The big chains rely on their pharmacies for a steady flow of shoppers who may also grab a snack or shampoo or groceries on the way out. All have upped online services and touted their abilities to deliver prescriptions and other goods as the COVID-19 pandemic has pushed more consumers to stay home. But Amazon.com has mastered these things, and its online store is infinitely larger, with millions of loyal shoppers already buying books, TVs and just about anything else.\n",
      "“The news represents a disruption to the system and competitive threat that will likely shift scripts away from the retail channel,\" analysts at Citi Research said in a note.\n",
      "Amazon has a history of disruption. Launched in 1995 as an online book store, it pushed other booksellers to sell online. But those that couldn't keep up went out of business, like the Borders bookstore chain, which disappeared in 2011.\n",
      "Its purchase of Whole Foods three years ago sent supermarket stocks spiraling, but many have been able to hold their own against Amazon, offering home delivery and curbside pickup of groceries.\n",
      "Amazon has also become a threat to shipping companies, delivering more than half of its own packages itself. Vans stamped with the Amazon logo have become as common a sight as the UPS truck.\n",
      "The company said its online pharmacy will offer commonly prescribed medications in the U.S., including creams, pills, as well as medications that need to stay refrigerated, like insulin. Shoppers have to set up a profile on Amazon's website and have their doctors send prescriptions there. It won't ship medications that have a high risk of being abused, like some opioids.\n",
      "Most insurance is accepted, Amazon said. But Prime members who don't have insurance can also buy generic or brand name drugs from Amazon for a discount. They can also get discounts at 50,000 physical pharmacies around the country at Costco, CVS, Walgreens, Walmart and other stores.\n",
      "Health economist Craig Garthwaite sees several reasons Amazon may become an attractive option for patients looking to fill prescriptions.\n",
      "The retailer is a known entity that many people already use. It may be able to make price shopping for prescriptions more pleasant, and it might be competitive on the pricing of generic drugs, said Garthwaite, who teaches at Northwestern University’s Kellogg School of Management.\n",
      "Amazon's prescription business could be appealing to the uninsured or people who have plans that make them pay a high deductible first before their coverage starts, added John Boylan, an analyst who covers Walgreens for Edward Jones.\n",
      "He said Amazon’s move will mostly affect smaller drugstores that don’t have either the retail giant's purchasing power or deals that major drugstore chains have with insurers to funnel patients to their stores for prescriptions.\n",
      "Amazon has eyed the health care industry for some time. Two years ago, it spent $750 million to buy online pharmacy PillPack, which organizes medication in packets by what time and day they need to be taken.\n",
      "Separately, it also has formed a venture named Haven with JPMorgan Chase and Berkshire Hathaway to focus on improving the care their employees receive and managing the expense.\n",
      "CVS and Walgreens, which had opened thousands of drugstores nationwide to get closer to customers, have been been trying to adjust to the rise of online shopping by offering same-day deliveries in many markets.\n",
      "Walgreens also has a partnership with FedEx for a delivery service that takes a day or two. Walgreens CEO Stefano Pessina told analysts in July that the company has seen “unprecedented demand” for both home delivery and online services as the COVID-19 pandemic unfolded earlier this year.\n",
      "Both companies also are providing more care and helping customers monitor chronic conditions like diabetes with services that can’t be delivered by competitors such as Amazon.\n",
      "CVS Health also operates one of the nation’s largest health insurers — Aetna — and a big pharmacy benefit management, or PBM, business that runs prescription drug plans. Spokesman T.J. Crawford said in a statement that new pharmacy competition is no surprise, but he noted that CVS Health has evolved into “so much more” than a corner drugstore.\n",
      "Amazon may continue to evolve as well, said the economist Garthwaite.\n",
      "“We could think of this one day as the first step toward Amazon becoming a PBM,” he said.\n",
      "Shares of CVS closed Tuesday nearly 10% lower and Walgreens shed nearly 9%. Rite Aid Corp.'s stock plunged more than 16%, while Amazon's shares finished slightly higher.\n",
      "Murphy contributed to this story from Indianapolis.\n",
      "Follow Joseph Pisani on Twitter: @ josephpisani\n"
     ]
    }
   ],
   "source": [
    "text = newsfeeds_read[420]['text']\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = pyspark.SparkContext()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0.1\n"
     ]
    }
   ],
   "source": [
    "# check if spark context is defined\n",
    "print(sc.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:75: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# importing some libraries\n",
    "import pandas as pd\n",
    "import pyspark\n",
    "from pyspark.sql import SQLContext\n",
    "sqlContext = SQLContext(sc)\n",
    "# stuff we'll need for text processing\n",
    "from nltk.corpus import stopwords\n",
    "import re as re\n",
    "from pyspark.ml.feature import CountVectorizer , IDF\n",
    "# stuff we'll need for building the model\n",
    "\n",
    "from pyspark.mllib.linalg import Vector, Vectors\n",
    "from pyspark.mllib.clustering import LDA, LDAModel\n",
    "from nltk.stem.wordnet import WordNetLemmatizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading the data\n",
    "data = sqlContext.read.json(\"webhose_walgreens.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of titles: 4217\n"
     ]
    }
   ],
   "source": [
    "walgreens_data = []\n",
    "with open('webhose_walgreens.json', 'r') as f:\n",
    "    for line in f.readlines():\n",
    "        walgreens_data.append(json.loads(line))\n",
    "        \n",
    "feed_titles = [feed['title'] for feed in walgreens_data]\n",
    "print(\"Total number of titles: \" + str(len(feed_titles)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:75: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+\n",
      "|               title|\n",
      "+--------------------+\n",
      "|        Never Forget|\n",
      "|On Demand Deliver...|\n",
      "|Walgreens (WBA) U...|\n",
      "|Time capsule goes...|\n",
      "|Walgreens Shoppin...|\n",
      "|Check Your Accoun...|\n",
      "|Janney Montgomery...|\n",
      "|All Laundry or Sn...|\n",
      "|Walgreens Filler ...|\n",
      "|Giant, Safeway, W...|\n",
      "|Walgreens; New Or...|\n",
      "|***Upcoming 11/15...|\n",
      "|walgreens discont...|\n",
      "|Does Osco Accept ...|\n",
      "|Walgreens Photo: ...|\n",
      "|Free 8×10″ Print ...|\n",
      "|Google Alert - li...|\n",
      "|CVS Hiring 1000s ...|\n",
      "|International Hot...|\n",
      "|Free 8×10 Photo P...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|              ngrams|\n",
      "+--------------------+\n",
      "|[N e v, e v e, v ...|\n",
      "|[O n  , n   D,   ...|\n",
      "|[W a l, a l g, l ...|\n",
      "|[T i m, i m e, m ...|\n",
      "|[W a l, a l g, l ...|\n",
      "|[C h e, h e c, e ...|\n",
      "|[J a n, a n n, n ...|\n",
      "|[A l l, l l  , l ...|\n",
      "|[W a l, a l g, l ...|\n",
      "|[G i a, i a n, a ...|\n",
      "|[W a l, a l g, l ...|\n",
      "|[* * *, * * U, * ...|\n",
      "|[w a l, a l g, l ...|\n",
      "|[D o e, o e s, e ...|\n",
      "|[W a l, a l g, l ...|\n",
      "|[F r e, r e e, e ...|\n",
      "|[G o o, o o g, o ...|\n",
      "|[C V S, V S  , S ...|\n",
      "|[I n t, n t e, t ...|\n",
      "|[F r e, r e e, e ...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|              vector|\n",
      "+--------------------+\n",
      "|(12126,[12,131,24...|\n",
      "|(12126,[12,41,44,...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[13,85,137...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[17,30,39,...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[8,13,18,1...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[0,1,3,4,5...|\n",
      "|(12126,[13,229,81...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "|(12126,[85,113,20...|\n",
      "|(12126,[8,9,11,16...|\n",
      "|(12126,[10,12,24,...|\n",
      "|(12126,[0,1,2,3,4...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|             minHash|\n",
      "+--------------------+\n",
      "|[[2.86509432E8], ...|\n",
      "|[[3.4862836E7], [...|\n",
      "|[[5.1353462E7], [...|\n",
      "|[[4520322.0], [95...|\n",
      "|[[2.5463199E7], [...|\n",
      "|[[1.1116176E7], [...|\n",
      "|[[2.0515813E7], [...|\n",
      "|[[1.52440821E8], ...|\n",
      "|[[5.1188417E7], [...|\n",
      "|[[3.9315087E7], [...|\n",
      "|[[2.2824461E7], [...|\n",
      "|[[7.6913635E7], [...|\n",
      "|[[7.6913635E7], [...|\n",
      "|[[3.7831664E7], [...|\n",
      "|[[7.6913635E7], [...|\n",
      "|[[5.432229E7], [4...|\n",
      "|[[1.38258843E8], ...|\n",
      "|[[6333835.0], [2....|\n",
      "|[[1.1446266E7], [...|\n",
      "|[[7.6913635E7], [...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:117: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+--------------------+----------------+\n",
      "|            datasetA|            datasetB|jaccard_distance|\n",
      "+--------------------+--------------------+----------------+\n",
      "|[3095, MyWalgreen...|[3095, MyWalgreen...|             0.0|\n",
      "|[2531, Kayleigh M...|[2532, Kayleigh M...|             0.0|\n",
      "|[4117, Free Keds ...|[4117, Free Keds ...|             0.0|\n",
      "|[3520, CVS hiring...|[3520, CVS hiring...|             0.0|\n",
      "|[2157, 3.38-Oz Pa...|[2175, 3.38-Oz Pa...|             0.0|\n",
      "|[2709, State read...|[2709, State read...|             0.0|\n",
      "|[1794, Police/Fir...|[2882, Police/Fir...|             0.0|\n",
      "|[3696, Walgreens,...|[3695, Walgreens,...|             0.0|\n",
      "|[3701, Walgreens,...|[3715, Walgreens,...|             0.0|\n",
      "|[3707, Walgreens,...|[3711, Walgreens,...|             0.0|\n",
      "|[3711, Walgreens,...|[3701, Walgreens,...|             0.0|\n",
      "|[1692, Customer S...|[1511, Customer S...|             0.0|\n",
      "|[1982, Customer S...|[1519, Customer S...|             0.0|\n",
      "|[1991, Customer S...|[1519, Customer S...|             0.0|\n",
      "|[2003, Customer S...|[1982, Customer S...|             0.0|\n",
      "|[2223, Customer S...|[1989, Customer S...|             0.0|\n",
      "|[2235, Customer S...|[2010, Customer S...|             0.0|\n",
      "|[2235, Customer S...|[2221, Customer S...|             0.0|\n",
      "|[3309, Customer S...|[1517, Customer S...|             0.0|\n",
      "|[1506, Customer S...|[2201, Customer S...|             0.0|\n",
      "+--------------------+--------------------+----------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+--------------------+\n",
      "|               title|               title|\n",
      "+--------------------+--------------------+\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "|Pharmacy Technici...|Pharmacy Technici...|\n",
      "+--------------------+--------------------+\n",
      "\n",
      "+--------------------+------------------------+\n",
      "|               title|min(datasetA.id AS `id`)|\n",
      "+--------------------+------------------------+\n",
      "|Healthwarehouse.c...|                     816|\n",
      "|Not known Factual...|                    3922|\n",
      "|Amazon Exclusive ...|                    2790|\n",
      "|General Mills Cer...|                     823|\n",
      "|Cuomo threatens t...|                     104|\n",
      "|Retail's role, fo...|                    1023|\n",
      "|Here's what you n...|                    2813|\n",
      "|Buy 2 Toys, Get 2...|                    3045|\n",
      "|Amazon Pharmacy i...|                     437|\n",
      "|The Definitive Gu...|                    3287|\n",
      "|Renuzit Adjustabl...|                    1759|\n",
      "|Local Black-owned...|                    1959|\n",
      "|Amazon opens onli...|                     562|\n",
      "|N.J. Health Commi...|                    1174|\n",
      "|Walmart taps form...|                    2493|\n",
      "|Amazon opens onli...|                     221|\n",
      "|Suspected armed r...|                    1059|\n",
      "| Google Alert - home|                    2868|\n",
      "|Walgreens Flaunts...|                    2348|\n",
      "|The Single Best S...|                    2421|\n",
      "+--------------------+------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(2972, 4217, 2975)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Deduplicating\n",
    "from pyspark import SparkContext\n",
    "from pyspark.sql import SparkSession\n",
    "spark = SparkSession(sc)\n",
    "df = spark.createDataFrame([\n",
    "    (k, t, list(t)) for k, t in enumerate(feed_titles) if len(list(t)) >=3],\n",
    "    ['id', 'title', 'title_characters'])\n",
    "df.select('title').show()\n",
    "\n",
    "from pyspark.ml.feature import NGram\n",
    "ngram = NGram(n=3, inputCol='title_characters', outputCol='ngrams')\n",
    "ngram_df = ngram.transform(df)\n",
    "ngram_df.select('ngrams').show()\n",
    "\n",
    "from pyspark.ml.feature import CountVectorizer \n",
    "count_vectorizer = CountVectorizer(inputCol='ngrams', outputCol='vector', binary=True)\n",
    "model = count_vectorizer.fit(ngram_df)\n",
    "cv_df = model.transform(ngram_df)\n",
    "\n",
    "cv_df.select('vector').show()\n",
    "\n",
    "from pyspark.ml.feature import MinHashLSH\n",
    "min_hash = MinHashLSH(inputCol='vector', outputCol='minHash', seed=0, numHashTables=10)\n",
    "model = min_hash.fit(cv_df)\n",
    "hash_df = model.transform(cv_df)\n",
    "hash_df.select('minHash').show()\n",
    "\n",
    "joined_rows = model.approxSimilarityJoin(cv_df, cv_df, threshold=0.05, distCol='jaccard_distance')\n",
    "joined_rows.show()\n",
    "\n",
    "from pyspark.sql.functions import col\n",
    "joined_rows.filter(joined_rows.datasetA.id == 2211).select(col('datasetA.title'), col('datasetB.title')).show()\n",
    "\n",
    "deduplicated_df = joined_rows.groupby(col('datasetA.title')).min('datasetA.id')\n",
    "deduplicated_df.show()\n",
    "\n",
    "deduplicated_titles = deduplicated_df.toPandas()['title']\n",
    "\n",
    "len(deduplicated_titles), len(feed_titles), len(set(feed_titles))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "descriptions = data.rdd.map(lambda x : x['text']).filter(lambda x: x is not None)\n",
    "StopWords = stopwords.words(\"english\")\n",
    "lmtzr = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokens = descriptions.map( lambda document: document.strip().lower())               \\\n",
    "    .map( lambda document: re.split(\" \", document))          \\\n",
    "    .map( lambda word: [x for x in word if x.isalpha()])           \\\n",
    "    .map( lambda word: [x for x in word if len(x) > 3] )           \\\n",
    "    .map( lambda word: [x for x in word if x not in StopWords])    \\\n",
    "    .map( lambda word: [lmtzr.lemmatize(x,'v') for x in word]) \\\n",
    "    .zipWithIndex()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_txts = sqlContext.createDataFrame(tokens, [\"list_of_words\",'index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+\n",
      "|       list_of_words|index|\n",
      "+--------------------+-----+\n",
      "|[read, deal, deal...|    0|\n",
      "|[dive, ahold, del...|    1|\n",
      "|[drug, store, sup...|    2|\n",
      "|[much, need, expe...|    3|\n",
      "|[sunshine, retire...|    4|\n",
      "|[walgreens, holid...|    5|\n",
      "|[link, post, affi...|    6|\n",
      "|[wynwood, wall, f...|    7|\n",
      "|[baby, formula, t...|    8|\n",
      "|[november, baby, ...|    9|\n",
      "|[walgreens, previ...|   10|\n",
      "|[moneymaker, colg...|   11|\n",
      "|[christians, extr...|   12|\n",
      "|[kirk, swearingen...|   13|\n",
      "|[heartwarming, tr...|   14|\n",
      "|[coupons, week, s...|   15|\n",
      "|[register, forget...|   16|\n",
      "|[love, true, chec...|   17|\n",
      "|[strike, deal, ma...|   18|\n",
      "|[president, trump...|   19|\n",
      "+--------------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_txts.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TF\n",
    "cv = CountVectorizer(inputCol=\"list_of_words\", outputCol=\"raw_features\", vocabSize=5000, minDF=50.0, maxDF = 500)\n",
    "cvmodel = cv.fit(df_txts)\n",
    "result_cv = cvmodel.transform(df_txts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IDF\n",
    "idf = IDF(inputCol=\"raw_features\", outputCol=\"features\")\n",
    "idfModel = idf.fit(result_cv)\n",
    "result_tfidf = idfModel.transform(result_cv) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+--------------------+--------------------+\n",
      "|       list_of_words|index|        raw_features|            features|\n",
      "+--------------------+-----+--------------------+--------------------+\n",
      "|[read, deal, deal...|    0|(1558,[91,111,135...|(1558,[91,111,135...|\n",
      "|[dive, ahold, del...|    1|(1558,[1,19,20,21...|(1558,[1,19,20,21...|\n",
      "|[drug, store, sup...|    2|(1558,[2,8,21,26,...|(1558,[2,8,21,26,...|\n",
      "|[much, need, expe...|    3|(1558,[0,3,18,19,...|(1558,[0,3,18,19,...|\n",
      "|[sunshine, retire...|    4|(1558,[1,7,8,9,26...|(1558,[1,7,8,9,26...|\n",
      "|[walgreens, holid...|    5|(1558,[3,23,158,8...|(1558,[3,23,158,8...|\n",
      "|[link, post, affi...|    6|(1558,[18,56,84,9...|(1558,[18,56,84,9...|\n",
      "|[wynwood, wall, f...|    7|(1558,[31,36,41,4...|(1558,[31,36,41,4...|\n",
      "|[baby, formula, t...|    8|(1558,[18,32,52,7...|(1558,[18,32,52,7...|\n",
      "|[november, baby, ...|    9|(1558,[9,18,21,32...|(1558,[9,18,21,32...|\n",
      "|[walgreens, previ...|   10|(1558,[91,114,118...|(1558,[91,114,118...|\n",
      "|[moneymaker, colg...|   11|(1558,[2,5,57,101...|(1558,[2,5,57,101...|\n",
      "|[christians, extr...|   12|(1558,[39,89,97,2...|(1558,[39,89,97,2...|\n",
      "|[kirk, swearingen...|   13|(1558,[71,261,286...|(1558,[71,261,286...|\n",
      "|[heartwarming, tr...|   14|(1558,[3,23,30,55...|(1558,[3,23,30,55...|\n",
      "|[coupons, week, s...|   15|(1558,[91,97,111,...|(1558,[91,97,111,...|\n",
      "|[register, forget...|   16|(1558,[48,50,110,...|(1558,[48,50,110,...|\n",
      "|[love, true, chec...|   17|(1558,[32,47,79,9...|(1558,[32,47,79,9...|\n",
      "|[strike, deal, ma...|   18|(1558,[4,8,26,31,...|(1558,[4,8,26,31,...|\n",
      "|[president, trump...|   19|(1558,[8,40,47,76...|(1558,[8,40,47,76...|\n",
      "+--------------------+-----+--------------------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result_tfidf.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipython==7.10.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (7.10.0)\n",
      "Requirement already satisfied: pygments in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (2.6.1)\n",
      "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.8.0)\n",
      "Requirement already satisfied: appnope; sys_platform == \"darwin\" in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.1.0)\n",
      "Requirement already satisfied: setuptools>=18.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (49.2.0.post20200714)\n",
      "Requirement already satisfied: decorator in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.4.2)\n",
      "Requirement already satisfied: pickleshare in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.7.5)\n",
      "Requirement already satisfied: jedi>=0.10 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.17.1)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=2.0.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (3.0.5)\n",
      "Requirement already satisfied: traitlets>=4.2 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.3.3)\n",
      "Requirement already satisfied: backcall in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.2.0)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from pexpect; sys_platform != \"win32\"->ipython==7.10.0) (0.6.0)\n",
      "Requirement already satisfied: parso<0.8.0,>=0.7.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from jedi>=0.10->ipython==7.10.0) (0.7.0)\n",
      "Requirement already satisfied: wcwidth in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from prompt-toolkit<3.1.0,>=2.0.0->ipython==7.10.0) (0.2.5)\n",
      "Requirement already satisfied: six in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from traitlets>=4.2->ipython==7.10.0) (1.15.0)\n",
      "Requirement already satisfied: ipython-genutils in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from traitlets>=4.2->ipython==7.10.0) (0.2.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/javierlasa/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "!pip install ipython==7.10.0\n",
    "import gensim\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "import pyLDAvis\n",
    "import pyLDAvis.sklearn\n",
    "pyLDAvis.enable_notebook()\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "stopwords = set(nltk.corpus.stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize_titles(title):\n",
    "    tokens = nltk.word_tokenize(title)\n",
    "    lmtzr = WordNetLemmatizer()\n",
    "    filtered_tokens = []\n",
    "    for token in tokens:\n",
    "        token = token.replace(\"'s\", \" \").replace(\"n’t\", \" not\").replace(\"’ve\", \" have\")\n",
    "        token = re.sub(r'[^a-zA-Z0-9 ]', '', token)\n",
    "        if token not in stopwords:\n",
    "            filtered_tokens.append(token.lower())\n",
    "    lemmas = [lmtzr.lemmatize(t,'v') for t in filtered_tokens]\n",
    "    return lemmas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:383: UserWarning: Your stop_words may be inconsistent with your preprocessing. Tokenizing the stop words generated tokens ['make'] not in stop_words.\n",
      "  warnings.warn('Your stop_words may be inconsistent with '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2972, 187)\n"
     ]
    }
   ],
   "source": [
    "tf_vectorizer = CountVectorizer(strip_accents = 'unicode',\n",
    "                                stop_words = 'english',\n",
    "                                lowercase = True,\n",
    "                                tokenizer=tokenize_titles,\n",
    "                                max_features=500,\n",
    "                                token_pattern = r'\\\\b[a-zA-Z]{3,}\\\\b',\n",
    "                                max_df = .3, \n",
    "                                min_df = .005,\n",
    "                                ngram_range=(2,4))\n",
    "dtm_tf = tf_vectorizer.fit_transform(deduplicated_titles)\n",
    "print(dtm_tf.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time to train LDA321.5925450325012\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from gensim.models.ldamodel import LdaModel\n",
    "import gensim.corpora as corpora\n",
    "from gensim.test.utils import common_corpus, common_dictionary\n",
    "\n",
    "num_topics = 30\n",
    "max_iterations = 100\n",
    "start = time.time()\n",
    "lda_model = LDA.train(result_tfidf.select('index','features').rdd.mapValues(Vectors.fromML).map(list), k=num_topics, maxIterations=max_iterations)\n",
    "print(\"Time to train LDA\" + str(time.time() - start))\n",
    "\n",
    "model = LdaModel(common_corpus, 10, common_dictionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic cluster:  0\n",
      "cost\n",
      "might\n",
      "blog\n",
      "solutions\n",
      "tool\n",
      "site\n",
      "users\n",
      "supply\n",
      "reply\n",
      "individuals\n",
      "together\n",
      "mention\n",
      "utilize\n",
      "obtain\n",
      "quality\n",
      "Topic cluster:  1\n",
      "advertise\n",
      "mywalgreens\n",
      "loyalty\n",
      "digital\n",
      "wellness\n",
      "reward\n",
      "personalize\n",
      "platforms\n",
      "technology\n",
      "pharmacists\n",
      "beauty\n",
      "feature\n",
      "mobile\n",
      "wellbeing\n",
      "range\n",
      "Topic cluster:  2\n",
      "benefit\n",
      "global\n",
      "management\n",
      "research\n",
      "period\n",
      "aspects\n",
      "analysis\n",
      "international\n",
      "regional\n",
      "factor\n",
      "growth\n",
      "study\n",
      "upon\n",
      "facilitate\n",
      "term\n",
      "Topic cluster:  3\n",
      "gift\n",
      "photo\n",
      "code\n",
      "print\n",
      "christmas\n",
      "promo\n",
      "pick\n",
      "cash\n",
      "toy\n",
      "select\n",
      "choose\n",
      "photos\n",
      "tag\n",
      "thumb\n",
      "california\n",
      "Topic cluster:  4\n",
      "really\n",
      "things\n",
      "talk\n",
      "kind\n",
      "thing\n",
      "good\n",
      "little\n",
      "probably\n",
      "actually\n",
      "seem\n",
      "pretty\n",
      "feel\n",
      "maybe\n",
      "something\n",
      "still\n",
      "Topic cluster:  5\n",
      "customer\n",
      "assign\n",
      "photo\n",
      "cash\n",
      "efficient\n",
      "maintain\n",
      "delightful\n",
      "distinctive\n",
      "complete\n",
      "items\n",
      "counter\n",
      "minimize\n",
      "merchandise\n",
      "rain\n",
      "responsibilities\n",
      "Topic cluster:  6\n",
      "today\n",
      "healthcare\n",
      "provider\n",
      "establish\n",
      "promote\n",
      "enhance\n",
      "monitor\n",
      "therapy\n",
      "qualify\n",
      "download\n",
      "pharmacist\n",
      "wellness\n",
      "relate\n",
      "party\n",
      "clearance\n",
      "Topic cluster:  7\n",
      "customer\n",
      "manager\n",
      "ensure\n",
      "question\n",
      "systems\n",
      "answer\n",
      "assist\n",
      "issue\n",
      "team\n",
      "process\n",
      "practice\n",
      "identify\n",
      "opportunity\n",
      "regard\n",
      "maintain\n",
      "Topic cluster:  8\n",
      "florida\n",
      "video\n",
      "monday\n",
      "desantis\n",
      "president\n",
      "former\n",
      "sunday\n",
      "member\n",
      "board\n",
      "office\n",
      "show\n",
      "vote\n",
      "discuss\n",
      "message\n",
      "chief\n",
      "Topic cluster:  9\n",
      "love\n",
      "watch\n",
      "figure\n",
      "color\n",
      "life\n",
      "still\n",
      "family\n",
      "women\n",
      "line\n",
      "star\n",
      "army\n",
      "never\n",
      "hop\n",
      "enjoy\n",
      "favorite\n",
      "Topic cluster:  10\n",
      "facilities\n",
      "nurse\n",
      "vaccinate\n",
      "staff\n",
      "shots\n",
      "federal\n",
      "texas\n",
      "administer\n",
      "vaccination\n",
      "senior\n",
      "among\n",
      "vaccinations\n",
      "shoot\n",
      "pfizer\n",
      "facility\n",
      "Topic cluster:  11\n",
      "email\n",
      "link\n",
      "comment\n",
      "click\n",
      "preview\n",
      "affiliate\n",
      "weekly\n",
      "cookies\n",
      "policy\n",
      "disclosure\n",
      "privacy\n",
      "page\n",
      "contain\n",
      "alert\n",
      "subscribe\n",
      "Topic cluster:  12\n",
      "workers\n",
      "pfizer\n",
      "ohio\n",
      "expect\n",
      "governor\n",
      "distribution\n",
      "administer\n",
      "initial\n",
      "emergency\n",
      "hospital\n",
      "shipment\n",
      "phase\n",
      "department\n",
      "hospitals\n",
      "desantis\n",
      "Topic cluster:  13\n",
      "police\n",
      "city\n",
      "officer\n",
      "block\n",
      "suspect\n",
      "park\n",
      "shoot\n",
      "arrest\n",
      "charge\n",
      "steal\n",
      "street\n",
      "court\n",
      "vehicle\n",
      "avenue\n",
      "woman\n",
      "Topic cluster:  14\n",
      "clinics\n",
      "primary\n",
      "giant\n",
      "consumer\n",
      "accept\n",
      "cost\n",
      "media\n",
      "compete\n",
      "retailer\n",
      "healthcare\n",
      "pay\n",
      "network\n",
      "access\n",
      "convenient\n",
      "visit\n",
      "Topic cluster:  15\n",
      "medicine\n",
      "acquisition\n",
      "competition\n",
      "without\n",
      "vice\n",
      "retailers\n",
      "bring\n",
      "buy\n",
      "multiple\n",
      "secure\n",
      "found\n",
      "separate\n",
      "pillpack\n",
      "corp\n",
      "president\n",
      "Topic cluster:  16\n",
      "trump\n",
      "administration\n",
      "federal\n",
      "distribution\n",
      "warp\n",
      "government\n",
      "greet\n",
      "azar\n",
      "operation\n",
      "human\n",
      "distribute\n",
      "communities\n",
      "official\n",
      "speed\n",
      "live\n",
      "Topic cluster:  17\n",
      "team\n",
      "cash\n",
      "request\n",
      "complete\n",
      "assistant\n",
      "ensure\n",
      "basic\n",
      "task\n",
      "management\n",
      "accurate\n",
      "inventory\n",
      "relate\n",
      "compliance\n",
      "manager\n",
      "floor\n",
      "Topic cluster:  18\n",
      "paper\n",
      "toilet\n",
      "black\n",
      "thanksgiving\n",
      "friday\n",
      "roll\n",
      "holiday\n",
      "hours\n",
      "close\n",
      "cream\n",
      "scott\n",
      "target\n",
      "supply\n",
      "annual\n",
      "retailers\n",
      "Topic cluster:  19\n",
      "couple\n",
      "pharmaceutical\n",
      "doctor\n",
      "refill\n",
      "chance\n",
      "rely\n",
      "minutes\n",
      "shake\n",
      "chronic\n",
      "pillpack\n",
      "profile\n",
      "phone\n",
      "flow\n",
      "prescribe\n",
      "commonly\n",
      "Topic cluster:  20\n",
      "supplement\n",
      "specialty\n",
      "chapter\n",
      "south\n",
      "players\n",
      "study\n",
      "revenue\n",
      "rate\n",
      "bluebonnet\n",
      "summr\n",
      "country\n",
      "growth\n",
      "version\n",
      "type\n",
      "vitamins\n",
      "Topic cluster:  21\n",
      "card\n",
      "credit\n",
      "reward\n",
      "bank\n",
      "money\n",
      "apple\n",
      "balance\n",
      "blue\n",
      "cash\n",
      "bonus\n",
      "account\n",
      "redeem\n",
      "pay\n",
      "earn\n",
      "point\n",
      "Topic cluster:  22\n",
      "covid\n",
      "pain\n",
      "effect\n",
      "cause\n",
      "publish\n",
      "side\n",
      "study\n",
      "virus\n",
      "public\n",
      "article\n",
      "world\n",
      "symptoms\n",
      "survey\n",
      "body\n",
      "risk\n",
      "Topic cluster:  23\n",
      "boot\n",
      "alliance\n",
      "rat\n",
      "sales\n",
      "billion\n",
      "trade\n",
      "investment\n",
      "quarter\n",
      "earn\n",
      "investors\n",
      "estimate\n",
      "value\n",
      "drop\n",
      "average\n",
      "biggest\n",
      "Topic cluster:  24\n",
      "case\n",
      "file\n",
      "show\n",
      "americans\n",
      "hospitals\n",
      "break\n",
      "record\n",
      "hospitalizations\n",
      "face\n",
      "fear\n",
      "mask\n",
      "deaths\n",
      "point\n",
      "worst\n",
      "past\n",
      "Topic cluster:  25\n",
      "threat\n",
      "drugstores\n",
      "insurers\n",
      "push\n",
      "analysts\n",
      "economist\n",
      "evolve\n",
      "competitive\n",
      "see\n",
      "drugstore\n",
      "generic\n",
      "logo\n",
      "uninsured\n",
      "tout\n",
      "script\n",
      "Topic cluster:  26\n",
      "image\n",
      "update\n",
      "label\n",
      "nasdaq\n",
      "longer\n",
      "fee\n",
      "reader\n",
      "cold\n",
      "display\n",
      "edit\n",
      "notification\n",
      "liquid\n",
      "view\n",
      "cnbc\n",
      "match\n",
      "Topic cluster:  27\n",
      "crest\n",
      "coupons\n",
      "select\n",
      "body\n",
      "printable\n",
      "reward\n",
      "final\n",
      "colgate\n",
      "laundry\n",
      "toothpaste\n",
      "ibotta\n",
      "register\n",
      "hair\n",
      "clip\n",
      "detergent\n",
      "Topic cluster:  28\n",
      "test\n",
      "school\n",
      "sit\n",
      "county\n",
      "locations\n",
      "community\n",
      "rapid\n",
      "result\n",
      "travel\n",
      "university\n",
      "spread\n",
      "church\n",
      "quarantine\n",
      "appointment\n",
      "students\n",
      "Topic cluster:  29\n",
      "pharmacist\n",
      "assist\n",
      "clinical\n",
      "ptcb\n",
      "accordance\n",
      "patient\n",
      "maintain\n",
      "train\n",
      "walgreen\n",
      "good\n",
      "adhere\n",
      "computer\n",
      "claim\n",
      "certification\n",
      "possible\n"
     ]
    }
   ],
   "source": [
    "wordNumbers = 15  \n",
    "topicIndices = sc.parallelize(lda_model.describeTopics(maxTermsPerTopic = wordNumbers))\n",
    "topic_list = topicIndices.toDF().select('*').collect()\n",
    "for i in range(0,num_topics):\n",
    "    print(\"Topic cluster: \", i)\n",
    "    for index in topic_list[i]._1:\n",
    "        print(cvmodel.vocabulary[index])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "topics = lda_model.topicsMatrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TOPIC #: 0\n",
      "cost 0.009625576099844367\n",
      "might 0.009142735403070262\n",
      "blog 0.008973951076239188\n",
      "solutions 0.00855560334182233\n",
      "tool 0.008307133729832038\n",
      "site 0.008106181314840234\n",
      "users 0.007958107099607007\n",
      "supply 0.007716986508605414\n",
      "reply 0.007699613102835125\n",
      "individuals 0.007509903774401397\n",
      "\n",
      "TOPIC #: 1\n",
      "advertise 0.023356040109074494\n",
      "mywalgreens 0.021986930568880205\n",
      "loyalty 0.019665365167998758\n",
      "digital 0.017784107394645664\n",
      "wellness 0.01640696112109512\n",
      "reward 0.013463064157233823\n",
      "personalize 0.01338261034945531\n",
      "platforms 0.011602423245721182\n",
      "technology 0.010855470506492755\n",
      "pharmacists 0.010790739375478076\n",
      "\n",
      "TOPIC #: 2\n",
      "benefit 0.06552633225497215\n",
      "global 0.038869355956287155\n",
      "management 0.03833753050568545\n",
      "research 0.02972644344206993\n",
      "period 0.02646553562609811\n",
      "aspects 0.0240108415095413\n",
      "analysis 0.022807270272387686\n",
      "international 0.021886878625684062\n",
      "regional 0.021031782564829918\n",
      "factor 0.020374501659609218\n",
      "\n",
      "TOPIC #: 3\n",
      "gift 0.059996704689907907\n",
      "photo 0.050770275899055105\n",
      "code 0.0505027361198396\n",
      "print 0.04298469102066717\n",
      "christmas 0.028561159113105538\n",
      "promo 0.024873053159350927\n",
      "pick 0.021833584489188266\n",
      "cash 0.019821127926838638\n",
      "toy 0.019187212666318218\n",
      "select 0.015815211334953398\n",
      "\n",
      "TOPIC #: 4\n",
      "really 0.02494365102936863\n",
      "things 0.017610584589491426\n",
      "talk 0.01722238387567918\n",
      "kind 0.0148157429787205\n",
      "thing 0.013823545158381002\n",
      "good 0.013460640529865774\n",
      "little 0.012457860578254633\n",
      "probably 0.011675211271477312\n",
      "actually 0.011464755274752852\n",
      "seem 0.011262727803253764\n",
      "\n",
      "TOPIC #: 5\n",
      "customer 0.027923843185361587\n",
      "assign 0.02510980836026551\n",
      "photo 0.02093252007615357\n",
      "cash 0.020774515638295105\n",
      "efficient 0.019541559585144606\n",
      "maintain 0.017327549601107686\n",
      "delightful 0.016528167885990798\n",
      "distinctive 0.016524891268072873\n",
      "complete 0.015402323433747872\n",
      "items 0.015346903191863328\n",
      "\n",
      "TOPIC #: 6\n",
      "today 0.027381309990753628\n",
      "healthcare 0.024629892866879007\n",
      "provider 0.02151763747277261\n",
      "establish 0.018824201520738177\n",
      "promote 0.018754917723475564\n",
      "enhance 0.018262182491383464\n",
      "monitor 0.015784397743353478\n",
      "therapy 0.015377066250428648\n",
      "qualify 0.01515160869788742\n",
      "download 0.014823160693157759\n",
      "\n",
      "TOPIC #: 7\n",
      "customer 0.12412785213637449\n",
      "manager 0.07377796438409137\n",
      "ensure 0.062131335923133565\n",
      "question 0.045726960324012404\n",
      "systems 0.04201007217627104\n",
      "answer 0.0406595126187243\n",
      "assist 0.0406248797500512\n",
      "issue 0.03995437800915264\n",
      "team 0.03827506095545852\n",
      "process 0.03580361900484876\n",
      "\n",
      "TOPIC #: 8\n",
      "florida 0.04827251941960116\n",
      "video 0.03692179136902828\n",
      "monday 0.018695179733152288\n",
      "desantis 0.017154241127005875\n",
      "president 0.0171092941549741\n",
      "former 0.01698598024089958\n",
      "sunday 0.016733801943756656\n",
      "member 0.016262160520112416\n",
      "board 0.015496720787600815\n",
      "office 0.015243720091991465\n",
      "\n",
      "TOPIC #: 9\n",
      "love 0.020429508720759833\n",
      "watch 0.016779352833386732\n",
      "figure 0.016692936921631204\n",
      "color 0.014855819426534824\n",
      "life 0.013737067636029002\n",
      "still 0.012340193422316839\n",
      "family 0.012179869079621467\n",
      "women 0.010371660767243466\n",
      "line 0.010028680428497238\n",
      "star 0.00992533033601838\n",
      "\n",
      "TOPIC #: 10\n",
      "facilities 0.03854945302504119\n",
      "nurse 0.037840008513860914\n",
      "vaccinate 0.0284610804861762\n",
      "staff 0.02751394951910648\n",
      "shots 0.021596314644654613\n",
      "federal 0.016601174270403772\n",
      "texas 0.015696332278006906\n",
      "administer 0.015149981111007368\n",
      "vaccination 0.012893634779859778\n",
      "senior 0.01130725211097347\n",
      "\n",
      "TOPIC #: 11\n",
      "email 0.04157154357804425\n",
      "link 0.0382958602161267\n",
      "comment 0.038084901812201845\n",
      "click 0.03626612408568777\n",
      "preview 0.03338680285970433\n",
      "affiliate 0.032397533502901726\n",
      "weekly 0.02749581465430872\n",
      "cookies 0.026862553893352178\n",
      "policy 0.026068604547470748\n",
      "disclosure 0.025217219018077552\n",
      "\n",
      "TOPIC #: 12\n",
      "workers 0.023707562446044175\n",
      "pfizer 0.018358836020405563\n",
      "ohio 0.018345194121684123\n",
      "expect 0.018055779637760727\n",
      "governor 0.01765705792804184\n",
      "distribution 0.01677493069374516\n",
      "administer 0.0136486786502289\n",
      "initial 0.012692454821038658\n",
      "emergency 0.012268698112939375\n",
      "hospital 0.012158075850201015\n",
      "\n",
      "TOPIC #: 13\n",
      "police 0.05737499712907447\n",
      "city 0.028183177978838937\n",
      "officer 0.02569169646621714\n",
      "block 0.023169139027373137\n",
      "suspect 0.021223626472991267\n",
      "park 0.01954714396658523\n",
      "shoot 0.01831472374560767\n",
      "arrest 0.01678096625189183\n",
      "charge 0.01659037831391488\n",
      "steal 0.016210287067052343\n",
      "\n",
      "TOPIC #: 14\n",
      "clinics 0.02374336711633142\n",
      "primary 0.02182605082587921\n",
      "giant 0.018141017784171723\n",
      "consumer 0.017256813582174853\n",
      "accept 0.017047744453418855\n",
      "cost 0.015431128115889868\n",
      "media 0.015105641399574017\n",
      "compete 0.014763339714553871\n",
      "retailer 0.014209589925571645\n",
      "healthcare 0.014087418103783255\n",
      "\n",
      "TOPIC #: 15\n",
      "medicine 0.021941054679222704\n",
      "acquisition 0.019453127248393327\n",
      "competition 0.018559029274254228\n",
      "without 0.017762031535272924\n",
      "vice 0.017092363214448975\n",
      "retailers 0.01603519839302415\n",
      "bring 0.016018249446586818\n",
      "buy 0.015853668899429282\n",
      "multiple 0.015127805797607818\n",
      "secure 0.013853923403127792\n",
      "\n",
      "TOPIC #: 16\n",
      "trump 0.028029522474424577\n",
      "administration 0.02248573315559989\n",
      "federal 0.014979256563096816\n",
      "distribution 0.013840836337851325\n",
      "warp 0.012941994359238432\n",
      "government 0.012522513983704473\n",
      "greet 0.012197045798773093\n",
      "azar 0.011072259693485261\n",
      "operation 0.01050898971936966\n",
      "human 0.010199852987128067\n",
      "\n",
      "TOPIC #: 17\n",
      "team 0.03171807347926142\n",
      "cash 0.031381811500794374\n",
      "request 0.027831746940247242\n",
      "complete 0.021689393337847203\n",
      "assistant 0.021430993663856007\n",
      "ensure 0.020420061678057603\n",
      "basic 0.02002840481782588\n",
      "task 0.019070905617844042\n",
      "management 0.017246218712519003\n",
      "accurate 0.01713284317978277\n",
      "\n",
      "TOPIC #: 18\n",
      "paper 0.05628219313294467\n",
      "toilet 0.039161316517730485\n",
      "black 0.038837520401277664\n",
      "thanksgiving 0.035614114429371825\n",
      "friday 0.03210880703024959\n",
      "roll 0.024390348986124223\n",
      "holiday 0.02370753470890023\n",
      "hours 0.020408287228099436\n",
      "close 0.01815402017310901\n",
      "cream 0.01618438278396763\n",
      "\n",
      "TOPIC #: 19\n",
      "couple 0.020395768841453946\n",
      "pharmaceutical 0.018831379085281978\n",
      "doctor 0.018255706020288982\n",
      "refill 0.017390563157662315\n",
      "chance 0.017262473956856372\n",
      "rely 0.017256685138859407\n",
      "minutes 0.016605759084436955\n",
      "shake 0.01646902070329564\n",
      "chronic 0.016375099137162764\n",
      "pillpack 0.016150742143986985\n",
      "\n",
      "TOPIC #: 20\n",
      "supplement 0.06272973137616175\n",
      "specialty 0.04952607807357755\n",
      "chapter 0.02577876879042849\n",
      "south 0.022051950389277663\n",
      "players 0.01972123695724272\n",
      "study 0.019171587626282006\n",
      "revenue 0.017464310857453154\n",
      "rate 0.016868785676310095\n",
      "bluebonnet 0.016179473327049623\n",
      "summr 0.016179473327049623\n",
      "\n",
      "TOPIC #: 21\n",
      "card 0.11150534109109542\n",
      "credit 0.06239829986983533\n",
      "reward 0.03947478909387011\n",
      "bank 0.036306767519354764\n",
      "money 0.029860341633329214\n",
      "apple 0.02143872582245372\n",
      "balance 0.01810348812827713\n",
      "blue 0.015717359421456016\n",
      "cash 0.015622111936544381\n",
      "bonus 0.015523996873021076\n",
      "\n",
      "TOPIC #: 22\n",
      "covid 0.022402723744290188\n",
      "pain 0.019535100030023875\n",
      "effect 0.017683891141960454\n",
      "cause 0.016810952697453998\n",
      "publish 0.016574628739763057\n",
      "side 0.012998317827856737\n",
      "study 0.011176326828272324\n",
      "virus 0.011036580681089727\n",
      "public 0.010905719780199207\n",
      "article 0.010250768838900692\n",
      "\n",
      "TOPIC #: 23\n",
      "boot 0.029199051411142252\n",
      "alliance 0.02298287668555673\n",
      "rat 0.019236277233521604\n",
      "sales 0.01797247170813745\n",
      "billion 0.016217337528517665\n",
      "trade 0.01458886368713475\n",
      "investment 0.013985369829578037\n",
      "quarter 0.01330202860221848\n",
      "earn 0.013107509313991654\n",
      "investors 0.01280747168890242\n",
      "\n",
      "TOPIC #: 24\n",
      "case 0.02613060082804865\n",
      "file 0.023308878315236908\n",
      "show 0.020979758664749142\n",
      "americans 0.020072515648450483\n",
      "hospitals 0.019726621039733182\n",
      "break 0.019254242912327777\n",
      "record 0.0174047871551925\n",
      "hospitalizations 0.017351984389155608\n",
      "face 0.017311073979533305\n",
      "fear 0.016619734220700476\n",
      "\n",
      "TOPIC #: 25\n",
      "threat 0.014654264574442216\n",
      "drugstores 0.013518663951861843\n",
      "insurers 0.012023362462833035\n",
      "push 0.011790567767312451\n",
      "analysts 0.011326322813453917\n",
      "economist 0.010427370945492688\n",
      "evolve 0.010385071569398616\n",
      "competitive 0.010061149966573837\n",
      "see 0.00874224002582002\n",
      "drugstore 0.00842625017708232\n",
      "\n",
      "TOPIC #: 26\n",
      "image 0.0520301254070252\n",
      "update 0.04700750101395828\n",
      "label 0.041403472494673986\n",
      "nasdaq 0.03454686999418882\n",
      "longer 0.029132206599072036\n",
      "fee 0.02500441292958068\n",
      "reader 0.02479481600177121\n",
      "cold 0.024138710312931935\n",
      "display 0.019878640773691437\n",
      "edit 0.01924659668980522\n",
      "\n",
      "TOPIC #: 27\n",
      "crest 0.03490906137796715\n",
      "coupons 0.029568530608572414\n",
      "select 0.02784303265782861\n",
      "body 0.02604308707216003\n",
      "printable 0.025080027830440176\n",
      "reward 0.024958754955771843\n",
      "final 0.02467554566710836\n",
      "colgate 0.023333370318386393\n",
      "laundry 0.02317676071227176\n",
      "toothpaste 0.022305549179724077\n",
      "\n",
      "TOPIC #: 28\n",
      "test 0.09391416286794059\n",
      "school 0.02858452238127111\n",
      "sit 0.02797502926201116\n",
      "county 0.019576399642896952\n",
      "locations 0.017891227714838278\n",
      "community 0.016242585786390394\n",
      "rapid 0.014538908888407236\n",
      "result 0.011643266741061158\n",
      "travel 0.011409022832760055\n",
      "university 0.011371011891703147\n",
      "\n",
      "TOPIC #: 29\n",
      "pharmacist 0.030783763589184276\n",
      "assist 0.021736618727461892\n",
      "clinical 0.02121923695464423\n",
      "ptcb 0.017960643903085355\n",
      "accordance 0.017537487208511966\n",
      "patient 0.016101423796785946\n",
      "maintain 0.01586677089313702\n",
      "train 0.01579337904377824\n",
      "walgreen 0.013618430566194327\n",
      "good 0.013491965381151699\n",
      "\n"
     ]
    }
   ],
   "source": [
    "topics = lda_model.describeTopics(maxTermsPerTopic = 10)\n",
    "for x, topic in enumerate(topics):\n",
    "    print('TOPIC #: ' + str(x))\n",
    "    words = topic[0]\n",
    "    weights = topic[1]\n",
    "    for n in range(len(words)):\n",
    "        print(cvmodel.vocabulary[words[n]] + ' ' + str(weights[n]))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic #0:\n",
      "  | walgreens  |    | today  | walgreens   |  10 | ad preview |  today | sale  | walgreens ad |  5 | coupon  |  reg |  today  | coupons  | 50  |  reg  | reg  | body wash | preview  | gift set |  50 | set  | toothpaste  | oz  | weekly ad |  149 |  regularly | 5  |  299\n",
      "Topic #1:\n",
      "  |  free | free ship | 2  |   free |  free ship |  2 | 2 free | walgreenscom  |  various |   free ship |  instore |  various  | various  | 30  |  2  | ship  |  walgreenscom  |  walgreenscom | free ship  | covid vaccines |  online | 10  |    | 4  | toothpaste  |  3 | pickup walgreens |  3  | body wash\n",
      "Topic #2:\n",
      "nurse home | store pickup | free store | free store pickup |  free store |  free store pickup |  free | walgreens photo | photo  | 3  |  3 |  3  | walgreens photo  | alert  | google alert | google alert  | pickup walgreens | 60  |  photo |   free | card  | free  | pickup  | print free | 4  | gift tag | 10  | 5  |  5 |  various\n",
      "Topic #3:\n",
      "walgreens  | covid19 vaccines | toilet paper | roll  | paper  | toilet paper  | joaquin buckley | pickup  | 30  | 5  |  online | walmart  |   |  regularly | 10  |  299 |  instore | nurse home |  5 | free pickup | 2 free | pickup walgreens | coronavirus vaccine |  free | walgreens  cvs | walgreens  free |    |  news | today  | instore pickup\n",
      "Topic #4:\n",
      "online pharmacy | open online pharmacy | open online | amazon open | amazon open online pharmacy | amazon open online | pharmacy  | online pharmacy  | open online pharmacy  |  shake | shake industry |  shake industry | pharmacy  shake | online pharmacy  shake | pharmacy  shake industry | industry  | shake industry  |  shake industry  | loyalty program |  week | retail media | coronavirus vaccine |  amazon | news  |  news |  new | walgreens  cvs |  cvs | preview  |  \n",
      "Topic #5:\n",
      " cvs |  special | report online | special report | special report online |  special report online |  special report | amazon pharmacy | amazon  | walmart  |  amazon | deal  | cvs walgreens | walgreens  cvs | amazon   | pharmacy  | gift tag |   | covid19 vaccine  |  online |  week | today  | vaccine  | covid19 vaccination | news  | walgreens  |    | covid19 vaccine | walgreens deal | weekly ad\n",
      "Topic #6:\n",
      "covid19 vaccine | longterm care | laundry detergent | vaccine distribution | gift card | detergent  | care facilities | liquid laundry | liquid laundry detergent | longterm care facilities | laundry detergent  | vaccine rollout | gov  | card  |  299 | covid19 vaccination | black friday | staff  |  199 | oz  | free  |  10 | covid19 vaccine  |  149 | walgreens  |  news |  regularly | covid vaccines | week  |  \n",
      "Topic #7:\n",
      " walgreens | walgreens  |  walgreens  | cvs  | covid vaccine | cvs  walgreens | week  | walgreens boot |  199 | boot alliance | walgreens boot alliance | walgreens boot alliance  | boot alliance  | alliance  | wba  |  wba | care  |  wba  | nasdaq  | liquid  |  nasdaq | covid vaccines |   | amazon   |  cvs | preview  | nurse home | walgreens  cvs | vaccine  |  deal\n",
      "Topic #8:\n",
      "photo print |  free | walgreens  | vaccine  | instore pickup | print  | walgreens  free | print walgreens | pickup walgreens | covid19 test | free 810 | pickup  | covid19 vaccine  | test sit | photo print  | photo print walgreens | 5 free | 810 photo | free 810 photo |  new | instore pickup  | free pickup | 4  | free 810 photo print | 810 photo print | print free |  photo | today  |  instore | 2 free\n",
      "Topic #9:\n",
      "amazon launch | online pharmacy |  2020 | launch online | launch online pharmacy | amazon launch online | news  | amazon launch online pharmacy | walgreens deal | free  | deal week |  health |  news |  deal | pharmacy  | online pharmacy  | 5  | preview  |  amazon | 4  | test sit | deal  | week  | care  |  cvs | coupon  | industry  | amazon   | black friday | covid19 vaccine \n"
     ]
    }
   ],
   "source": [
    "lda_tf = LatentDirichletAllocation(n_components=10, \n",
    "                                   max_iter=100,\n",
    "                                   learning_method='online', \n",
    "                                   random_state = 0)\n",
    "lda_tf.fit(dtm_tf)\n",
    "\n",
    "n_top_words = 30\n",
    "tf_feature_names = tf_vectorizer.get_feature_names()\n",
    "topics = dict()\n",
    "for topic_idx, topic in enumerate(lda_tf.components_):\n",
    "    topics[topic_idx] = [tf_feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]\n",
    "    print(\"Topic #%d:\" % topic_idx)\n",
    "    print(\" | \".join([tf_feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el6109498922504485506511859\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el6109498922504485506511859_data = {\"mdsDat\": {\"x\": [-0.20776162765068776, 0.29906513763706716, -0.1004186020273461, -0.15018033651660959, -0.14938847726365617, 0.015679339385103026, 0.10180387261023231, 0.12383416132488344, 0.27464825595033293, -0.20728172344931814], \"y\": [0.06525164638155774, -0.08729368087256836, 0.2983661297051474, -0.27001136734802944, 0.04000673319380547, 0.21033105585829492, -0.03898878034898878, 0.06725663301684238, -0.06570402847949536, -0.2192143411065663], \"topics\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"cluster\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"Freq\": [16.928467458448694, 12.678513059649577, 10.938375407519105, 10.703151781993961, 10.651798097707877, 9.98674519854722, 8.145645580565947, 7.397178262389723, 6.83155830706407, 5.738566846113822]}, \"tinfo\": {\"Term\": [\"walgreens \", \" \", \"covid19 vaccine\", \" walgreens\", \" free\", \"online pharmacy\", \" walgreens \", \"covid19 vaccines\", \"toilet paper\", \"photo print\", \"nurse home\", \"amazon launch\", \"free ship\", \"store pickup\", \"open online\", \"open online pharmacy\", \" 2020\", \" cvs\", \"free store\", \"amazon open\", \"amazon open online\", \"amazon open online pharmacy\", \"free store pickup\", \"2 \", \"cvs \", \"longterm care\", \"vaccine \", \" free store\", \"laundry detergent\", \" free ship\", \"walgreens  \", \" 10\", \"ad preview\", \" today\", \"sale \", \"walgreens ad\", \" 5\", \"coupon \", \" reg\", \" today \", \"coupons \", \"50 \", \" reg \", \"reg \", \"body wash\", \"preview \", \"gift set\", \" 50\", \"set \", \"toothpaste \", \"oz \", \"weekly ad\", \" 149\", \" regularly\", \"today \", \"  \", \" \", \"5 \", \" 299\", \"walgreens \", \"open online\", \"open online pharmacy\", \"amazon open\", \"amazon open online\", \"amazon open online pharmacy\", \"open online pharmacy \", \" shake\", \"shake industry\", \" shake industry\", \"pharmacy  shake\", \"online pharmacy  shake\", \"pharmacy  shake industry\", \"industry \", \" shake industry \", \"shake industry \", \"loyalty program\", \" week\", \"retail media\", \"coronavirus vaccine\", \"online pharmacy \", \"pharmacy \", \"online pharmacy\", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"staff \", \"10 \", \"black friday\", \" nasdaq\", \" amazon\", \"news \", \" news\", \" new\", \"walgreens  cvs\", \" cvs\", \"preview \", \" \", \"free ship\", \"2 \", \" free ship\", \" 2\", \"2 free\", \" various\", \"  free ship\", \" instore\", \" various \", \"various \", \"30 \", \" 2 \", \" walgreenscom\", \" walgreenscom \", \"free ship \", \"covid vaccines\", \" online\", \"  free\", \"10 \", \"ship \", \"walgreenscom \", \" free\", \" \", \"  \", \"4 \", \" regularly\", \" 149\", \"staff \", \"black friday\", \" nasdaq\", \"toothpaste \", \" 3\", \"pickup walgreens\", \" 3 \", \"body wash\", \" walgreens\", \" walgreens \", \"cvs \", \"covid vaccine\", \"cvs  walgreens\", \"week \", \"walgreens boot\", \"boot alliance\", \"walgreens boot alliance \", \"alliance \", \"walgreens boot alliance\", \"boot alliance \", \"wba \", \" wba\", \"care \", \" wba \", \"nasdaq \", \"liquid \", \" nasdaq\", \" 199\", \"walgreens \", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"staff \", \"10 \", \"black friday\", \"free 810 photo print\", \"810 photo print\", \" deal\", \" \", \"amazon  \", \" cvs\", \"preview \", \"nurse home\", \"walgreens  cvs\", \"vaccine \", \"photo print\", \"vaccine \", \"instore pickup\", \"print \", \"walgreens  free\", \"print walgreens\", \"covid19 test\", \"free 810\", \"covid19 vaccine \", \"test sit\", \"photo print \", \"photo print walgreens\", \"5 free\", \"free 810 photo\", \"810 photo\", \" new\", \"instore pickup \", \"free pickup\", \"free 810 photo print\", \"810 photo print\", \"pickup \", \"4 \", \"print free\", \"pickup walgreens\", \" photo\", \" free\", \"today \", \"walgreens \", \" regularly\", \" 149\", \"10 \", \" instore\", \"2 free\", \"nurse home\", \"store pickup\", \"free store\", \"free store pickup\", \" free store\", \" free store pickup\", \"walgreens photo\", \"photo \", \"3 \", \" 3\", \" 3 \", \"walgreens photo \", \"alert \", \"google alert \", \"google alert\", \"60 \", \" photo\", \"pickup walgreens\", \"card \", \"print free\", \"gift tag\", \"free \", \" free\", \"4 \", \"10 \", \"pickup \", \"  free\", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"5 \", \" 5\", \" various\", \"covid19 vaccine\", \"longterm care\", \"laundry detergent\", \"vaccine distribution\", \"gift card\", \"detergent \", \"care facilities\", \"liquid laundry\", \"liquid laundry detergent\", \"longterm care facilities\", \"laundry detergent \", \"vaccine rollout\", \"gov \", \"covid19 vaccination\", \"black friday\", \"staff \", \"card \", \" 299\", \" 199\", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"10 \", \" nasdaq\", \"810 photo print\", \"free 810 photo print\", \"joaquin buckley\", \"liquid \", \" deal\", \"oz \", \"free \", \" 10\", \"covid19 vaccine \", \"walgreens \", \" news\", \"week \", \" \", \" cvs\", \" special\", \"report online\", \" special report online\", \"special report\", \" special report\", \"special report online\", \"amazon pharmacy\", \"amazon \", \"walmart \", \" amazon\", \"deal \", \"cvs walgreens\", \"walgreens  cvs\", \"amazon  \", \"gift tag\", \"pharmacy \", \" \", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"staff \", \"10 \", \"black friday\", \" nasdaq\", \"810 photo print\", \"free 810 photo print\", \"joaquin buckley\", \"liquid \", \" deal\", \"covid19 vaccine \", \" week\", \"today \", \"vaccine \", \"covid19 vaccination\", \"news \", \"walgreens \", \"  \", \"covid19 vaccine\", \"walgreens deal\", \"weekly ad\", \"amazon launch\", \" 2020\", \"launch online\", \"launch online pharmacy\", \"amazon launch online\", \"news \", \"amazon launch online pharmacy\", \"walgreens deal\", \"deal week\", \" health\", \" news\", \" deal\", \"free \", \"5 \", \"online pharmacy\", \"online pharmacy \", \"pharmacy \", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"staff \", \"10 \", \"black friday\", \" nasdaq\", \"free 810 photo print\", \"810 photo print\", \"joaquin buckley\", \"liquid \", \"gift tag\", \"preview \", \" amazon\", \"4 \", \"test sit\", \"deal \", \"week \", \"care \", \" cvs\", \"coupon \", \"industry \", \"amazon  \", \"covid19 vaccine \", \"covid19 vaccines\", \"toilet paper\", \"roll \", \"paper \", \"toilet paper \", \"joaquin buckley\", \"walgreens \", \"pickup \", \" regularly\", \" 149\", \" online\", \"covid vaccines\", \"staff \", \"10 \", \"black friday\", \" nasdaq\", \"free 810 photo print\", \"810 photo print\", \"liquid \", \" deal\", \"gift tag\", \"weekly ad\", \"nasdaq \", \"oz \", \"free pickup\", \"covid19 vaccination\", \"amazon  \", \"coronavirus vaccine\", \"instore pickup \", \"retail media\", \"30 \", \"5 \", \"walmart \", \" \", \" 299\", \" instore\", \"nurse home\", \" 5\", \"2 free\", \"pickup walgreens\", \" free\", \"walgreens  cvs\", \"walgreens  free\", \"  \", \" news\", \"today \", \"instore pickup\"], \"Freq\": [446.0, 521.0, 142.0, 153.0, 192.0, 109.0, 79.0, 51.0, 49.0, 63.0, 60.0, 49.0, 59.0, 54.0, 58.0, 58.0, 43.0, 45.0, 51.0, 56.0, 55.0, 55.0, 48.0, 48.0, 47.0, 41.0, 46.0, 44.0, 40.0, 45.0, 41.76908974275639, 35.8796106658388, 25.373574790996127, 25.330278607011447, 24.36723543626252, 23.71281872499815, 22.63731450084476, 21.661787347867403, 20.186117135061632, 20.159172377780127, 19.98948105771039, 19.23321058198202, 18.452505645829998, 18.45250564582997, 17.376700272020265, 16.67177185023005, 16.433779030584756, 16.422245851453123, 15.587887944676844, 15.473528833837257, 14.949065011303682, 14.851295940889194, 13.160671468671431, 13.114557390718929, 44.09140563480396, 49.76877139629961, 398.662344512065, 11.253357552093963, 8.662441329255666, 125.16792230766123, 57.56109459385739, 57.561094593857426, 55.50544670971781, 54.50402652712639, 54.50402652712646, 40.235231546128844, 37.25289104511982, 37.22312818716821, 36.25147087342694, 35.166324339759065, 35.16632433975874, 34.16490416684911, 31.991082832809322, 27.90961337969021, 27.909613379690366, 21.674421785988766, 20.586756968814232, 15.46713507374745, 15.33693356826543, 44.53092366783574, 49.413522913604446, 61.521893996717694, 0.10557898269940924, 0.10557898256845166, 0.10557898255302953, 0.10557898316487786, 0.1055789821693835, 0.10557898277037184, 0.10557898285062246, 0.10557898195468253, 0.10562039646393896, 0.10559682583663207, 0.10558996950446545, 0.10558569026320487, 0.10558510335529236, 0.10558194798060257, 0.10558173659307983, 0.10558130942047558, 58.899092357064006, 47.43679081020463, 44.852798349847816, 40.477632318960964, 24.0246904519442, 21.810610798294828, 21.73509076209935, 20.47937512200864, 19.993041466707297, 19.99304146670474, 18.452483178470562, 17.623332987997966, 16.203153224732677, 16.203153224732706, 15.89919120897851, 13.348731704325617, 13.301405783003144, 46.15082056420798, 11.540965052412963, 17.044865844941185, 23.213719429889956, 80.80068890320693, 112.63815268850213, 11.223689882639817, 1.4255896447126977, 0.09158413071287856, 0.09158004821851526, 0.09156823975890173, 0.0915837413119404, 0.09156823957285273, 0.09160400226689942, 0.09160363316061752, 0.09159787806789414, 0.09159755905537591, 0.0915951215021986, 152.46628387726702, 78.4370639153918, 46.17258471663437, 42.922307034432045, 38.7680980846493, 32.42660303480024, 24.166109616220275, 18.57242780336891, 17.62905367271987, 17.629053672719756, 17.629053672719902, 17.629053672719827, 16.820720208647042, 16.804703693141214, 16.797759998706844, 15.88139045242307, 14.90070331295576, 14.104875420281285, 14.01315940793265, 22.384595867681483, 81.37915149145343, 0.09609937557916023, 0.09610439434948377, 0.09609541798025532, 0.09612378568907376, 0.09610152486548823, 0.09609630259608255, 0.0960954182709135, 0.09609541729937215, 0.09609541729934072, 0.09610692541245633, 0.09612124930667204, 0.0961185535423123, 0.09611675380468755, 0.09611657123858523, 0.09611019855119321, 0.09611010504631015, 0.09610724699252306, 62.32041704607385, 45.28841452614581, 33.095022726392735, 33.07034845794534, 32.81989245273556, 30.184455819061764, 28.457975536643865, 27.375948231352687, 23.517673905373115, 22.52842637405171, 21.79714720180466, 21.764446766564756, 18.892573943167296, 18.7980590629124, 18.79805906291241, 17.06732411532161, 15.390095767247152, 15.038949460368285, 14.025583401970092, 14.025583401970069, 24.602034225326417, 14.259162079886567, 12.398960539757768, 29.256726067702704, 6.93661846871648, 61.71190496269533, 5.166094175420127, 45.89391975876064, 0.09739423826876294, 0.09739279219566613, 0.09742308535680001, 0.09745959367593411, 0.09743848500025964, 59.81544034673357, 53.192130865828666, 50.31820185310151, 47.49768831026385, 43.62237892809629, 42.69446980188253, 40.22873413757765, 30.545388005804412, 29.944971320100606, 29.179790267433095, 25.30885445103214, 24.8155268221755, 22.695942166611708, 21.71890175795923, 21.718901757959276, 16.1481039675997, 10.34345297246604, 17.720608281058286, 6.312838377587022, 4.883423788393484, 3.9600213211761837, 5.798148059210805, 41.90112018253176, 4.288070139530054, 2.0839240943818487, 5.045790315685779, 6.888021366256851, 0.09825096569843379, 0.09825096555498587, 0.0982509655342762, 0.09825566259708197, 0.09830309833065776, 0.09829205750490726, 0.09829129250361605, 141.40054788243637, 40.27183931915612, 39.29395898096903, 32.45215777963629, 28.846232855006512, 26.820837017680947, 24.194767348220836, 23.207831607730554, 23.207831607727922, 22.385576308709606, 20.563008893046202, 19.784460017232018, 16.264573134087904, 15.215133438906562, 13.80110630740367, 13.479109887135971, 16.191846535586432, 16.171811781579624, 9.032580245650003, 0.09307992806418838, 0.09308386104331784, 0.09307010396763295, 0.09307856458084982, 0.09306835239404092, 0.09306835141363058, 0.0930688497094351, 0.0930688497092917, 0.09306835202295964, 0.09306835177641154, 0.09306835182360232, 0.09309896692321208, 0.09308801016307672, 0.09308616881560507, 0.0930843270700433, 0.09308149355174258, 0.0930810056199174, 0.09307848621938991, 0.0930784290055741, 44.28063069920992, 37.13391372115542, 36.143240331188615, 36.14324033118845, 36.143240331188544, 36.14324033118844, 36.14324033118847, 31.3237931289894, 29.416477187553674, 26.676905997199665, 25.850987169692857, 23.857203763543314, 21.800650233775958, 21.729133798799573, 15.30526713347073, 10.46894098382627, 11.771862504499074, 9.975514020715266, 0.09834793118636398, 0.09834793099227342, 0.09837657507919444, 0.09834793187495167, 0.09834793039827255, 0.09834793129175505, 0.09835034275638638, 0.09834793007978528, 0.098347929926601, 0.09834792992658087, 0.09834793083201929, 0.0983479305293245, 0.09835184973174854, 0.09837901408312963, 0.09836979820481875, 0.0983656551831996, 0.09836459572516558, 0.09836198570097497, 0.09836053710569552, 0.09835951159412767, 0.09835931545774287, 0.09835930466338377, 0.0983586755847564, 0.09835706459989611, 48.31040879725933, 42.832659736077595, 35.20017345913348, 33.314635570555005, 33.286329658268485, 32.91067497654499, 32.3597681931922, 27.208729480571996, 18.633917277173396, 17.74811137960845, 16.085305398144275, 14.110479609878844, 19.69963613930765, 9.445322470787815, 47.47783771483927, 10.785260987036873, 12.292739264907299, 0.09684930497147244, 0.09685430997809737, 0.09684930473761488, 0.09684930569095992, 0.09685090144911507, 0.09685335254340664, 0.09685683435234715, 0.0968493038120535, 0.09684956244874426, 0.09684956244872067, 0.09685092615041851, 0.09684930428121284, 0.09684930537973893, 0.09687982470203335, 0.09687472976467103, 0.09686480970666723, 0.09686468791986477, 0.0968629518980408, 0.09686252355100457, 0.09685989965040036, 0.09685932752457199, 0.09685822966677232, 0.09685763109819807, 0.09685714936906521, 0.09685636054120075, 50.21984392736975, 48.25920754190491, 26.62351393086091, 19.981447464313945, 18.10883210579103, 14.101578545376617, 193.42274448591243, 4.9531004452078164, 0.09829955849484709, 0.09828681055823886, 0.09830721162951474, 0.09828681167683385, 0.09828680979367682, 0.09829784144147335, 0.09828986171781832, 0.09828680938599077, 0.09828680919182484, 0.09828680919174425, 0.09828680996035893, 0.09828903220423887, 0.09829041988889292, 0.09828681154986064, 0.09828680925723654, 0.09828681050866898, 0.09829613613323201, 0.09828681005108077, 0.09828681044219029, 0.09829494767679058, 0.09828680936197474, 0.09828681157668506, 0.09830807652136363, 0.09830756229181908, 0.0983013658682053, 0.09830118543965563, 0.09829782369231169, 0.09829765044790532, 0.09829731124198303, 0.09829667635695793, 0.09829607979039053, 0.09829589705221556, 0.09829480120769574, 0.09829357988183679, 0.09829337360940399, 0.09829291109897238, 0.0982927903908124, 0.09829227898457639, 0.09829217690234383], \"Total\": [446.0, 521.0, 142.0, 153.0, 192.0, 109.0, 79.0, 51.0, 49.0, 63.0, 60.0, 49.0, 59.0, 54.0, 58.0, 58.0, 43.0, 45.0, 51.0, 56.0, 55.0, 55.0, 48.0, 48.0, 47.0, 41.0, 46.0, 44.0, 40.0, 45.0, 42.64454340103005, 36.75513468773304, 26.249016543443744, 26.205765961220294, 25.242696899929864, 24.588266072299156, 23.512864268146203, 22.537300314066954, 21.06159571098032, 21.03464714608814, 20.864928958016915, 20.108667974047066, 19.32796756196209, 19.327967561962303, 18.252192774450876, 17.547264775028186, 17.309228672022943, 17.297710389744445, 16.463361333060988, 16.34901424625172, 15.824552173217796, 15.72675192195166, 14.036151564130462, 13.990041806394444, 50.03561185866198, 61.77637078910158, 521.9616236789085, 21.477389331428398, 25.61665401614117, 446.44745923337894, 58.42095234203124, 58.42095234203158, 56.36530449564636, 55.36388433228313, 55.363884332283384, 41.09508896419249, 38.11274811407739, 38.08298525624819, 37.11132795144996, 36.02618142713608, 36.026181427136095, 35.02476126441418, 32.850952806449676, 28.769470473929026, 28.769470473929378, 22.53428303236189, 21.446669155354666, 16.327004267396084, 16.196816946828825, 56.07919416685723, 74.14278857443637, 109.76274705041024, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.351490120529546, 14.40059327362971, 14.673511921320374, 14.882509893009551, 26.718148003057806, 33.77930979785524, 16.95392909232963, 17.935402211287744, 22.5962593153135, 45.147767277681105, 17.547264775028186, 521.9616236789085, 59.77298162033925, 48.31068730213308, 45.72667914066207, 41.3515318485216, 24.898632361447312, 22.684528258506646, 22.608968475959188, 21.353353095304765, 20.86694525328334, 20.866945253284232, 19.32639815779134, 18.49722196363423, 17.077035480584854, 17.07703548058519, 16.773072412636452, 14.222644695910674, 14.17533116177957, 53.8144762810857, 14.40059327362971, 21.90156435642973, 30.215412444121732, 192.1065933319744, 521.9616236789085, 61.77637078910158, 20.65107828154207, 13.990041806394444, 14.036151564130462, 14.351490120529546, 14.673511921320374, 14.882509893009551, 16.34901424625172, 30.047021925453574, 47.74717512060053, 26.1760763066853, 18.252192774450876, 153.33565341846537, 79.30642106324052, 47.04194188537632, 43.791667397298184, 39.6374521396057, 33.29598283970121, 25.035452631769356, 19.44176951380021, 18.498395458139107, 18.498395458139147, 18.498395458139438, 18.498395458139484, 17.690062277739504, 17.674045763389827, 17.66712379151398, 16.750732627333296, 15.770049068257313, 14.97421752653923, 14.882509893009551, 32.19353858488836, 446.44745923337894, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.351490120529546, 14.40059327362971, 14.673511921320374, 14.893628189053699, 14.893628189053757, 14.97909822968025, 521.9616236789085, 16.172387416046682, 45.147767277681105, 17.547264775028186, 60.6826718932187, 22.5962593153135, 46.15650522747505, 63.18848483260201, 46.15650522747505, 33.96307680009705, 33.93840828026872, 33.68796760362046, 31.052508848190925, 29.326025069061618, 28.243998026409457, 24.38577874216706, 23.396488499087365, 22.665201619045384, 22.632492844222906, 19.760639524611676, 19.66610503432046, 19.666105034320466, 17.935402211287744, 16.258148518002507, 15.907034722367401, 14.893628189053699, 14.893628189053757, 35.27246401370895, 20.65107828154207, 18.052198402457975, 47.74717512060053, 18.049888402722956, 192.1065933319744, 50.03561185866198, 446.44745923337894, 13.990041806394444, 14.036151564130462, 14.40059327362971, 21.353353095304765, 24.898632361447312, 60.6826718932187, 54.059337145137384, 51.185405154943496, 48.364888671586925, 44.489576323775424, 43.561667205737024, 41.09593476671479, 31.4125827138427, 30.812194797643375, 30.047021925453574, 26.1760763066853, 25.682718822421883, 23.563127652038396, 22.58608727393076, 22.586087273930936, 17.015306414914733, 18.049888402722956, 47.74717512060053, 23.278816468656075, 18.052198402457975, 15.197869866102446, 26.26819594010417, 192.1065933319744, 20.65107828154207, 14.40059327362971, 35.27246401370895, 53.8144762810857, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 21.477389331428398, 23.512864268146203, 22.684528258506646, 142.27294678498853, 41.1442119217944, 40.166354017071114, 33.32453713261932, 29.718626508627725, 27.693228073485287, 25.06714509648815, 24.080228307262136, 24.080228307262196, 23.25795130197905, 21.435394812756414, 20.656839948667972, 17.13694973480153, 16.087517452761297, 14.673511921320374, 14.351490120529546, 23.278816468656075, 25.61665401614117, 32.19353858488836, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.40059327362971, 14.882509893009551, 14.893628189053757, 14.893628189053699, 14.968729657943484, 14.97421752653923, 14.97909822968025, 15.824552173217796, 26.26819594010417, 36.75513468773304, 24.38577874216706, 446.44745923337894, 16.95392909232963, 33.29598283970121, 521.9616236789085, 45.147767277681105, 38.00100294717311, 37.01032959639765, 37.01032959639769, 37.01032959639786, 37.01032959639786, 37.010329596397966, 32.19089566679985, 30.283578852655786, 27.544020271021118, 26.718148003057806, 24.724339484088414, 22.667750195584254, 22.5962593153135, 16.172387416046682, 15.197869866102446, 74.14278857443637, 521.9616236789085, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.351490120529546, 14.40059327362971, 14.673511921320374, 14.882509893009551, 14.893628189053757, 14.893628189053699, 14.968729657943484, 14.97421752653923, 14.97909822968025, 24.38577874216706, 21.446669155354666, 50.03561185866198, 46.15650522747505, 16.087517452761297, 33.77930979785524, 446.44745923337894, 61.77637078910158, 142.27294678498853, 28.077332582369756, 15.72675192195166, 49.17900148070343, 43.701261316943224, 36.06876070178699, 34.18322285812032, 34.15491681537095, 33.77930979785524, 33.22835537108697, 28.077332582369756, 19.50251758623634, 18.616716749251875, 16.95392909232963, 14.97909822968025, 26.26819594010417, 21.477389331428398, 109.76274705041024, 56.07919416685723, 74.14278857443637, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.351490120529546, 14.40059327362971, 14.673511921320374, 14.882509893009551, 14.893628189053699, 14.893628189053757, 14.968729657943484, 14.97421752653923, 15.197869866102446, 17.547264775028186, 26.718148003057806, 20.65107828154207, 23.396488499087365, 24.724339484088414, 33.29598283970121, 17.66712379151398, 45.147767277681105, 22.537300314066954, 32.850952806449676, 16.172387416046682, 24.38577874216706, 51.087010178315275, 49.12636890177678, 27.490675857106318, 20.848613460254153, 18.975997130139454, 14.968729657943484, 446.44745923337894, 35.27246401370895, 13.990041806394444, 14.036151564130462, 14.17533116177957, 14.222644695910674, 14.351490120529546, 14.40059327362971, 14.673511921320374, 14.882509893009551, 14.893628189053699, 14.893628189053757, 14.97421752653923, 14.97909822968025, 15.197869866102446, 15.72675192195166, 15.770049068257313, 15.824552173217796, 15.907034722367401, 16.087517452761297, 16.172387416046682, 16.196816946828825, 16.258148518002507, 16.327004267396084, 19.32639815779134, 21.477389331428398, 27.544020271021118, 521.9616236789085, 25.61665401614117, 21.353353095304765, 60.6826718932187, 23.512864268146203, 24.898632361447312, 47.74717512060053, 192.1065933319744, 22.5962593153135, 33.68796760362046, 61.77637078910158, 16.95392909232963, 50.03561185866198, 33.96307680009705], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.3241, -3.4761, -3.8226, -3.8243, -3.863, -3.8903, -3.9367, -3.9807, -4.0513, -4.0526, -4.0611, -4.0996, -4.1411, -4.1411, -4.2011, -4.2426, -4.2569, -4.2576, -4.3098, -4.3171, -4.3516, -4.3582, -4.479, -4.4825, -3.27, -3.1489, -1.0682, -4.6356, -4.8973, -2.2266, -2.7143, -2.7143, -2.7507, -2.7689, -2.7689, -3.0724, -3.1495, -3.1502, -3.1767, -3.2071, -3.2071, -3.236, -3.3017, -3.4382, -3.4382, -3.691, -3.7425, -4.0285, -4.0369, -2.971, -2.867, -2.6478, -9.0155, -9.0155, -9.0155, -9.0155, -9.0155, -9.0155, -9.0155, -9.0155, -9.0151, -9.0153, -9.0154, -9.0154, -9.0154, -9.0154, -9.0155, -9.0155, -2.5437, -2.7602, -2.8162, -2.9188, -3.4405, -3.5372, -3.5406, -3.6001, -3.6242, -3.6242, -3.7043, -3.7503, -3.8343, -3.8343, -3.8533, -4.0281, -4.0317, -2.7876, -4.1736, -3.7837, -3.4748, -2.2276, -1.8954, -4.2015, -6.265, -9.01, -9.0101, -9.0102, -9.0101, -9.0102, -9.0098, -9.0098, -9.0099, -9.0099, -9.0099, -1.5709, -2.2355, -2.7654, -2.8384, -2.9402, -3.1188, -3.4129, -3.6761, -3.7283, -3.7283, -3.7283, -3.7283, -3.7752, -3.7762, -3.7766, -3.8327, -3.8964, -3.9513, -3.9578, -3.4894, -2.1987, -8.9402, -8.9401, -8.9402, -8.9399, -8.9402, -8.9402, -8.9402, -8.9402, -8.9402, -8.9401, -8.94, -8.94, -8.94, -8.94, -8.9401, -8.9401, -8.9401, -2.4607, -2.7799, -3.0936, -3.0944, -3.102, -3.1857, -3.2446, -3.2833, -3.4352, -3.4782, -3.5112, -3.5127, -3.6542, -3.6592, -3.6592, -3.7558, -3.8593, -3.8824, -3.9521, -3.9521, -3.3902, -3.9356, -4.0754, -3.2169, -4.6562, -2.4705, -4.9509, -2.7667, -8.922, -8.922, -8.9217, -8.9213, -8.9215, -2.4373, -2.5546, -2.6102, -2.6678, -2.753, -2.7745, -2.8339, -3.1093, -3.1292, -3.1551, -3.2974, -3.3171, -3.4063, -3.4503, -3.4503, -3.7467, -4.1922, -3.6538, -4.6859, -4.9427, -5.1523, -4.771, -2.7932, -5.0727, -5.7943, -4.91, -4.5987, -8.8488, -8.8488, -8.8488, -8.8487, -8.8482, -8.8483, -8.8484, -1.3732, -2.6291, -2.6537, -2.845, -2.9628, -3.0356, -3.1386, -3.1803, -3.1803, -3.2163, -3.3013, -3.3399, -3.5358, -3.6025, -3.7, -3.7236, -3.5402, -3.5415, -4.1239, -8.6991, -8.699, -8.6992, -8.6991, -8.6992, -8.6992, -8.6992, -8.6992, -8.6992, -8.6992, -8.6992, -8.6988, -8.699, -8.699, -8.699, -8.699, -8.699, -8.6991, -8.6991, -2.4378, -2.6138, -2.6409, -2.6409, -2.6409, -2.6409, -2.6409, -2.784, -2.8468, -2.9446, -2.976, -3.0563, -3.1464, -3.1497, -3.5002, -3.88, -3.7627, -3.9282, -8.5476, -8.5476, -8.5473, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5476, -8.5473, -8.5474, -8.5474, -8.5474, -8.5475, -8.5475, -8.5475, -8.5475, -8.5475, -8.5475, -8.5475, -2.2712, -2.3915, -2.5878, -2.6428, -2.6437, -2.655, -2.6719, -2.8453, -3.2238, -3.2725, -3.3709, -3.5019, -3.1682, -3.9033, -2.2886, -3.7706, -3.6398, -8.4834, -8.4834, -8.4834, -8.4834, -8.4834, -8.4834, -8.4833, -8.4834, -8.4834, -8.4834, -8.4834, -8.4834, -8.4834, -8.4831, -8.4832, -8.4833, -8.4833, -8.4833, -8.4833, -8.4833, -8.4833, -8.4833, -8.4833, -8.4833, -8.4834, -2.0581, -2.0979, -2.6927, -2.9797, -3.0781, -3.3282, -0.7096, -4.3745, -8.2942, -8.2943, -8.2941, -8.2943, -8.2943, -8.2942, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2941, -8.2941, -8.2942, -8.2942, -8.2942, -8.2942, -8.2942, -8.2942, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943, -8.2943], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.7554, 1.7521, 1.7423, 1.7422, 1.7409, 1.7399, 1.7382, 1.7366, 1.7337, 1.7337, 1.7333, 1.7317, 1.7298, 1.7298, 1.727, 1.725, 1.7243, 1.7242, 1.7215, 1.7211, 1.7193, 1.7189, 1.7118, 1.7116, 1.6497, 1.56, 1.5067, 1.1298, 0.6919, 0.5045, 2.0504, 2.0504, 2.0499, 2.0496, 2.0496, 2.0441, 2.0424, 2.0424, 2.0418, 2.0411, 2.0411, 2.0404, 2.0387, 2.0349, 2.0349, 2.0264, 2.0243, 2.0112, 2.0107, 1.8347, 1.6595, 1.4863, -2.8214, -2.8247, -2.8345, -2.8379, -2.8469, -2.8503, -2.8691, -2.8832, -3.468, -3.7027, -3.0134, -3.0697, -3.3008, -3.9929, -3.0479, -6.4406, 2.1982, 2.1946, 2.1936, 2.1915, 2.1772, 2.1736, 2.1735, 2.1711, 2.1701, 2.1701, 2.1666, 2.1645, 2.1604, 2.1604, 2.1594, 2.1495, 2.1493, 2.0593, 1.9915, 1.9622, 1.9493, 1.3468, 0.6795, 0.5074, -0.4603, -2.816, -2.8193, -2.8416, -2.8637, -2.878, -2.9716, -3.5802, -4.0434, -3.4423, -3.0818, 2.2289, 2.2236, 2.216, 2.2146, 2.2125, 2.2082, 2.1993, 2.1889, 2.1865, 2.1865, 2.1865, 2.1865, 2.1842, 2.1842, 2.1842, 2.1813, 2.1779, 2.1748, 2.1744, 1.8712, 0.5324, -2.7461, -2.7493, -2.7593, -2.7623, -2.7716, -2.775, -2.7938, -2.8087, -2.8087, -2.8143, -6.3651, -2.8908, -3.9175, -2.9725, -4.2133, -3.2254, -3.9397, 2.2256, 2.2205, 2.2136, 2.2135, 2.2133, 2.2111, 2.2094, 2.2082, 2.2032, 2.2016, 2.2004, 2.2003, 2.1945, 2.1943, 2.1943, 2.1898, 2.1846, 2.1833, 2.1794, 2.1794, 1.8792, 1.8691, 1.8638, 1.7496, 1.2831, 1.1039, -0.0312, -0.0355, -2.7279, -2.7312, -2.7565, -3.1501, -3.3039, 2.2895, 2.2877, 2.2868, 2.2858, 2.2842, 2.2838, 2.2826, 2.2759, 2.2754, 2.2746, 2.2702, 2.2696, 2.2664, 2.2648, 2.2648, 2.2516, 1.7471, 1.3127, 0.999, 0.9965, 0.959, 0.7931, 0.7812, 0.732, 0.3709, 0.3594, 0.2482, -2.6547, -2.658, -2.6678, -2.6711, -3.0828, -3.1734, -3.1376, 2.5015, 2.4863, 2.4857, 2.4812, 2.4779, 2.4757, 2.4723, 2.4708, 2.4708, 2.4695, 2.4661, 2.4645, 2.4554, 2.4519, 2.4464, 2.445, 2.1447, 2.0477, 1.2368, -2.505, -2.5082, -2.5182, -2.5215, -2.534, -2.5669, -2.5677, -2.5677, -2.5727, -2.5731, -2.5734, -2.628, -3.1349, -3.4708, -3.0606, -5.9679, -2.6971, -3.3721, -6.1242, 2.5847, 2.581, 2.5804, 2.5804, 2.5804, 2.5804, 2.5804, 2.5768, 2.575, 2.5721, 2.5711, 2.5684, 2.5651, 2.5649, 2.549, 2.2313, 0.7638, -1.3534, -2.3535, -2.3568, -2.3664, -2.37, -2.379, -2.3824, -2.4012, -2.4154, -2.4161, -2.4161, -2.4211, -2.4215, -2.4218, -2.9089, -2.7805, -3.6277, -3.547, -2.4931, -3.2349, -5.8164, -3.8386, -4.6728, -3.05, -2.4704, 2.6658, 2.6635, 2.6592, 2.6579, 2.6579, 2.6576, 2.6571, 2.6522, 2.6381, 2.6358, 2.631, 2.6239, 2.3959, 1.8621, 1.8456, 1.035, 0.8866, -2.2893, -2.2926, -2.3025, -2.3058, -2.3148, -2.3182, -2.3369, -2.3512, -2.3519, -2.3519, -2.3569, -2.3573, -2.3721, -2.5156, -2.9361, -2.6786, -2.8034, -2.8586, -3.1563, -2.5226, -3.4608, -2.7661, -3.1429, -2.4342, -2.8449, 2.8408, 2.8402, 2.8259, 2.8155, 2.8112, 2.7983, 2.0215, 0.8949, -2.1001, -2.1035, -2.1132, -2.1167, -2.1258, -2.1291, -2.1479, -2.1621, -2.1628, -2.1628, -2.1682, -2.1685, -2.183, -2.2173, -2.22, -2.2235, -2.2286, -2.2399, -2.2452, -2.2466, -2.2505, -2.2547, -2.4232, -2.5287, -2.7775, -5.7194, -2.705, -2.523, -3.5675, -2.6194, -2.6766, -3.3277, -4.7199, -2.5796, -2.979, -3.5854, -2.2923, -3.3746, -2.9871]}, \"token.table\": {\"Topic\": [1, 3, 8, 1, 3, 3, 6, 3, 1, 1, 4, 7, 3, 3, 9, 1, 7, 6, 6, 1, 1, 8, 8, 9, 1, 3, 5, 6, 3, 6, 6, 9, 3, 4, 5, 9, 3, 5, 6, 1, 1, 1, 2, 2, 2, 8, 8, 8, 1, 1, 3, 3, 4, 4, 3, 3, 4, 4, 2, 3, 6, 3, 3, 6, 3, 3, 5, 6, 1, 9, 5, 1, 6, 5, 5, 1, 6, 4, 8, 8, 9, 9, 9, 2, 2, 2, 8, 7, 1, 4, 4, 6, 7, 4, 7, 2, 1, 1, 4, 3, 5, 7, 7, 5, 10, 4, 4, 8, 8, 9, 7, 6, 9, 5, 5, 5, 5, 3, 3, 6, 6, 7, 1, 6, 8, 6, 6, 7, 2, 5, 5, 10, 9, 9, 7, 7, 4, 7, 7, 7, 7, 2, 4, 9, 6, 2, 9, 2, 9, 2, 2, 2, 2, 1, 10, 2, 8, 9, 2, 2, 6, 5, 5, 5, 5, 6, 10, 5, 6, 1, 5, 5, 6, 5, 1, 8, 2, 10, 1, 1, 2, 2, 1, 3, 8, 8, 7, 6, 5, 1, 5, 10, 10, 1, 5, 7, 7, 3, 1, 4, 5, 10, 1, 8, 5, 1, 4, 4, 4, 9, 6, 6, 1, 3, 8, 4, 4, 1], \"Freq\": [0.764424014906985, 0.21649101174057467, 0.01915849661421015, 0.8093709514062433, 0.17806160930937354, 0.8547885843900282, 0.13007652371152603, 0.9730651808990436, 0.979454987877243, 0.9261797965491938, 0.6833669415367342, 0.2795592033559367, 0.9673160391379813, 0.9731191005540304, 0.9839532934334017, 0.35133394058135226, 0.6245936721446262, 0.9651538868626905, 0.9550705654695493, 0.9781879288589693, 0.9249779097634888, 0.973121340484542, 0.9745775406650395, 0.9346357027193919, 0.0364381038598893, 0.4216409160930047, 0.32273749133044805, 0.2186286231593358, 0.9841082021629715, 0.9889957072143708, 0.9871063886723084, 0.9668729584513521, 0.936621050133698, 0.9407015416516488, 0.9478460421311854, 0.9437340402254477, 0.9170861584561374, 0.38781403207700715, 0.554020045824296, 0.9495956657060479, 0.9312929537104789, 0.9292323911468281, 0.9708037816966973, 0.9700542122097106, 0.9732539229518902, 0.9736585124196682, 0.9727014158637433, 0.9727014158637477, 0.9539885243955623, 0.9508122413985653, 0.9698240029192606, 0.9584536575545513, 0.991289348636874, 0.9835269194382287, 0.9369307698745867, 0.9369307698745681, 0.9618623957177902, 0.955182101939334, 0.9791730290555097, 0.8332990017830957, 0.13888316696384928, 0.9728696200504021, 0.9639083645879787, 0.973640475695503, 0.9313685795479377, 0.04842362158366325, 0.6779307021712856, 0.193694486334653, 0.5121665315208225, 0.41904534397158205, 0.9615073427322882, 0.9448661654030018, 0.9403298189197011, 0.966129285226637, 0.93999929515425, 0.9524166346812825, 0.9761013198097375, 0.9730573681773109, 0.9576146908230029, 0.9275068432454563, 0.9760263233248841, 0.9661859280286346, 0.9630329169960726, 0.9935189830177431, 0.9934274060306324, 0.9934274060306278, 0.9630052024918313, 0.9541001551004451, 0.9313949403271877, 0.9772772990911844, 0.9730573681772932, 0.2577450622577287, 0.6873201660206099, 0.9622392530110409, 0.9574285347461584, 0.9261078920162057, 0.9761595086110828, 0.9585462783143298, 0.9819219626849142, 0.9140353484143345, 0.9547833343953406, 0.9323999208731467, 0.9910527840059974, 0.9841801754110078, 0.9787223763042474, 0.9778507892400543, 0.9839179335402146, 0.9705418407286694, 0.9707033838232738, 0.9742331940471631, 0.9749675959896847, 0.22841309748415886, 0.7613769916138629, 0.9559553139309009, 0.9661292852266373, 0.9399992951542536, 0.9429790191447819, 0.9870680431294359, 0.9539099102646194, 0.9768409539524958, 0.9717793484266043, 0.9758189865060184, 0.9243623909054329, 0.2631947789552837, 0.6579869473882092, 0.9740509603623376, 0.9740509603623452, 0.933655069753013, 0.9740965563019345, 0.9716434171802039, 0.9226142806722814, 0.935283108180833, 0.9703687988998735, 0.9653858601036139, 0.9709619146269686, 0.9796880432313145, 0.9349403382973036, 0.9551404457848782, 0.9551404457848758, 0.9721902093064929, 0.9459130649279497, 0.9762902138224412, 0.9511701539466162, 0.9769293747409629, 0.9887501345619721, 0.5648546675997963, 0.428196280277265, 0.8024366374828362, 0.19615117805135998, 0.9715156759199813, 0.9927944970912707, 0.9927944970912649, 0.9733523155249358, 0.9478941227409072, 0.9592964077984394, 0.6608869310439541, 0.1618498606638255, 0.1618498606638255, 0.9715156759199817, 0.9707418058704841, 0.9868656863524665, 0.9811914332848695, 0.9706509727896522, 0.9720537702772607, 0.7087681765096857, 0.14175363530193713, 0.14175363530193713, 0.6073657745563243, 0.37698565317289096, 0.9688119611777325, 0.9723496672996802, 0.6647389826142222, 0.2769745760892592, 0.9661055132988959, 0.9312929537104687, 0.9727014158637487, 0.9187233465697059, 0.9821511897467782, 0.9507700423272397, 0.9718549982784812, 0.9715624904675636, 0.9732539229518783, 0.18263535585419055, 0.7762002623803099, 0.9727014158637433, 0.9727014158637405, 0.90582928259162, 0.9804041780554338, 0.9830535039861716, 0.8793736773778031, 0.09992882697475035, 0.9770720098603494, 0.948566753913064, 0.9174865086094715, 0.9749438303057089, 0.9602533974486082, 0.9682023024673565, 0.9584536575545103, 0.27998815407001043, 0.18143232383736677, 0.10303564069776383, 0.4323017098840961, 0.9848856770497282, 0.9736124768709211, 0.9795782395745797, 0.9760753332272628, 0.9586405467878223, 0.9730573681772956, 0.973057368177313, 0.961629810124975, 0.9733322827930311, 0.9734171904796214, 0.19857415519632504, 0.7612009282525793, 0.9802490607519092, 0.9609915292040633, 0.9610769009000114, 0.9537888099489096], \"Term\": [\" \", \" \", \" \", \"  \", \"  \", \"  free\", \"  free\", \"  free ship\", \" 10\", \" 149\", \" 199\", \" 199\", \" 2\", \" 2 \", \" 2020\", \" 299\", \" 299\", \" 3\", \" 3 \", \" 5\", \" 50\", \" amazon\", \" cvs\", \" deal\", \" free\", \" free\", \" free\", \" free\", \" free ship\", \" free store\", \" free store pickup\", \" health\", \" instore\", \" nasdaq\", \" new\", \" news\", \" online\", \" photo\", \" photo\", \" reg\", \" reg \", \" regularly\", \" shake\", \" shake industry\", \" shake industry \", \" special\", \" special report\", \" special report online\", \" today\", \" today \", \" various\", \" various \", \" walgreens\", \" walgreens \", \" walgreenscom\", \" walgreenscom \", \" wba\", \" wba \", \" week\", \"10 \", \"10 \", \"2 \", \"2 free\", \"3 \", \"30 \", \"4 \", \"4 \", \"4 \", \"5 \", \"5 \", \"5 free\", \"50 \", \"60 \", \"810 photo\", \"810 photo print\", \"ad preview\", \"alert \", \"alliance \", \"amazon \", \"amazon  \", \"amazon launch\", \"amazon launch online\", \"amazon launch online pharmacy\", \"amazon open\", \"amazon open online\", \"amazon open online pharmacy\", \"amazon pharmacy\", \"black friday\", \"body wash\", \"boot alliance\", \"boot alliance \", \"card \", \"card \", \"care \", \"care facilities\", \"coronavirus vaccine\", \"coupon \", \"coupons \", \"covid vaccine\", \"covid vaccines\", \"covid19 test\", \"covid19 vaccination\", \"covid19 vaccine\", \"covid19 vaccine \", \"covid19 vaccines\", \"cvs \", \"cvs  walgreens\", \"cvs walgreens\", \"deal \", \"deal week\", \"detergent \", \"free \", \"free \", \"free 810\", \"free 810 photo\", \"free 810 photo print\", \"free pickup\", \"free ship\", \"free ship \", \"free store\", \"free store pickup\", \"gift card\", \"gift set\", \"gift tag\", \"gift tag\", \"google alert\", \"google alert \", \"gov \", \"industry \", \"instore pickup\", \"instore pickup \", \"joaquin buckley\", \"launch online\", \"launch online pharmacy\", \"laundry detergent\", \"laundry detergent \", \"liquid \", \"liquid laundry\", \"liquid laundry detergent\", \"longterm care\", \"longterm care facilities\", \"loyalty program\", \"nasdaq \", \"news \", \"nurse home\", \"online pharmacy\", \"online pharmacy\", \"online pharmacy \", \"online pharmacy \", \"online pharmacy  shake\", \"open online\", \"open online pharmacy\", \"open online pharmacy \", \"oz \", \"paper \", \"pharmacy \", \"pharmacy \", \"pharmacy \", \"pharmacy  shake\", \"pharmacy  shake industry\", \"photo \", \"photo print\", \"photo print \", \"photo print walgreens\", \"pickup \", \"pickup \", \"pickup \", \"pickup walgreens\", \"pickup walgreens\", \"preview \", \"print \", \"print free\", \"print free\", \"print walgreens\", \"reg \", \"report online\", \"retail media\", \"roll \", \"sale \", \"set \", \"shake industry\", \"shake industry \", \"ship \", \"ship \", \"special report\", \"special report online\", \"staff \", \"store pickup\", \"test sit\", \"today \", \"today \", \"toilet paper\", \"toilet paper \", \"toothpaste \", \"vaccine \", \"vaccine distribution\", \"vaccine rollout\", \"various \", \"walgreens \", \"walgreens \", \"walgreens \", \"walgreens \", \"walgreens  \", \"walgreens  cvs\", \"walgreens  free\", \"walgreens ad\", \"walgreens boot\", \"walgreens boot alliance\", \"walgreens boot alliance \", \"walgreens deal\", \"walgreens photo\", \"walgreens photo \", \"walgreenscom \", \"walgreenscom \", \"walmart \", \"wba \", \"week \", \"weekly ad\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 5, 2, 8, 9, 3, 7, 6, 10, 4]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el6109498922504485506511859\", ldavis_el6109498922504485506511859_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el6109498922504485506511859\", ldavis_el6109498922504485506511859_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el6109498922504485506511859\", ldavis_el6109498922504485506511859_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
       "topic                                                \n",
       "0     -0.207762  0.065252       1        1  16.928467\n",
       "4      0.299065 -0.087294       2        1  12.678513\n",
       "1     -0.100419  0.298366       3        1  10.938375\n",
       "7     -0.150180 -0.270011       4        1  10.703152\n",
       "8     -0.149388  0.040007       5        1  10.651798\n",
       "2      0.015679  0.210331       6        1   9.986745\n",
       "6      0.101804 -0.038989       7        1   8.145646\n",
       "5      0.123834  0.067257       8        1   7.397178\n",
       "9      0.274648 -0.065704       9        1   6.831558\n",
       "3     -0.207282 -0.219214      10        1   5.738567, topic_info=                Term        Freq       Total Category  logprob  loglift\n",
       "171       walgreens   446.000000  446.000000  Default  30.0000  30.0000\n",
       "0                     521.000000  521.000000  Default  29.0000  29.0000\n",
       "87   covid19 vaccine  142.000000  142.000000  Default  28.0000  28.0000\n",
       "42         walgreens  153.000000  153.000000  Default  27.0000  27.0000\n",
       "18              free  192.000000  192.000000  Default  26.0000  26.0000\n",
       "..               ...         ...         ...      ...      ...      ...\n",
       "174  walgreens  free    0.098293   33.687968  Topic10  -8.2943  -2.9790\n",
       "1                       0.098293   61.776371  Topic10  -8.2943  -3.5854\n",
       "26              news    0.098293   16.953929  Topic10  -8.2943  -2.2923\n",
       "163           today     0.098292   50.035612  Topic10  -8.2943  -3.3746\n",
       "112   instore pickup    0.098292   33.963077  Topic10  -8.2943  -2.9871\n",
       "\n",
       "[407 rows x 6 columns], token_table=      Topic      Freq           Term\n",
       "term                                \n",
       "0         1  0.764424               \n",
       "0         3  0.216491               \n",
       "0         8  0.019158               \n",
       "1         1  0.809371               \n",
       "1         3  0.178062               \n",
       "...     ...       ...            ...\n",
       "182       3  0.761201  walgreenscom \n",
       "183       8  0.980249       walmart \n",
       "184       4  0.960992           wba \n",
       "185       4  0.961077          week \n",
       "186       1  0.953789      weekly ad\n",
       "\n",
       "[218 rows x 3 columns], R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[1, 5, 2, 8, 9, 3, 7, 6, 10, 4])"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pyLDAvis.sklearn.prepare(lda_tf, dtm_tf, tf_vectorizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = pd.read_csv('walgreens_articles.csv')\n",
    "\n",
    "#Remove the columns\n",
    "text = text.drop(columns=['title'], axis=1)\n",
    "#, 'crawled', 'entities', 'external_images', 'external_links', 'highlightText', 'highlightThreadTile', \n",
    "#                          'highlightTitle', 'language', 'ord_in_thread', 'parent_url', 'published', 'rating', 'thread',\n",
    "#                         'title', 'updated', 'url', 'uuid'], axis=1)\n",
    "\n",
    "import gensim\n",
    "from gensim.utils import simple_preprocess\n",
    "def sent_to_words(sentences):\n",
    "    for sentence in sentences:\n",
    "        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations\n",
    "data = text.values.tolist()\n",
    "data_words = list(sent_to_words(data))\n",
    "\n",
    "from nltk.corpus import stopwords\n",
    "stop_words = stopwords.words('english')\n",
    "stop_words.extend(['from', 'subject', 're', 'edu', 'use'])\n",
    "\n",
    "def remove_stopwords(texts):\n",
    "    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]\n",
    "\n",
    "def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):\n",
    "    \"\"\"https://spacy.io/api/annotation\"\"\"\n",
    "    texts_out = []\n",
    "    for sent in texts:\n",
    "        doc = nlp(\" \".join(sent)) \n",
    "        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])\n",
    "\n",
    "import spacy\n",
    "data_words_nostops = remove_stopwords(data_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coherence Score:  0.4493928682355722\n"
     ]
    }
   ],
   "source": [
    "import gensim.corpora as corpora\n",
    "from gensim.test.utils import common_corpus, common_dictionary\n",
    "\n",
    "id2word = corpora.Dictionary(data_words)\n",
    "\n",
    "texts = data_words_nostops\n",
    "\n",
    "corpus = common_corpus\n",
    "\n",
    "from gensim.models import CoherenceModel\n",
    "cm = CoherenceModel(model=model, texts= data_words_nostops, corpus=common_corpus, coherence='c_v')\n",
    "coherence = cm.get_coherence()  \n",
    "print('\\nCoherence Score: ', coherence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "topic_taxonomy = {\n",
    "     \"Organization\":\n",
    "     {\n",
    "        \"Amazon Pharmacy\":  \"Amazon Pharmacy AMZ\",\n",
    "        \"CVS\":  \"CVS\",\n",
    "        \"Walgreens\": \"Walgreens\",\n",
    "        \"Government\": \"U.S. Food and Drug Administration FDA Division of Drug Information CDER The Office of Drug Evaluation\" \n",
    "     },\n",
    "     \"Health\":\n",
    "     {\n",
    "         \"Medicines\": \"Levothyroxine\tLevothroid\tLevoxyl\tSynthroid\tUnithroid\tLisinopril\tPrinivil\tZestril\tAtorvastatin\tLipitor\tAmlodipine\tNorvasc\tMetoprolol\tLopressor \tToprol XL\tOmeprazole\tPrilosec\tSimvastatin\tZocor\tLosartan\tCozaar\tAlbuterol\tAccuneb\tProair\tProventil\tVentolin\tGabapentin \tNeurontin\tHydrochlorothiazide \tEsidrix\tHydrodiuril\tMicrozide\tOretic\tZide\tHydrocodone\tAcetaminophen\tLortab\tNorco\tVicodin\tSertraline \tZoloft\tFurosemide \tLasix\tFluticasone\tFlonase\tFlovent\tCutivate\tTylenol\tAmoxicillin\tAmoxil\tPolymox\tTrimox\tAlprazolam\tXanax\tAtenolol\tTenormin\tCitalopram\tCelexa\tInsulin glargine\tLantus\tToujeo\tMontelukast\tSingulair\tTrazodone\tDesyrel\tPantoprazole\tProtonix\tEscitalopram\tLexapro\tPravastatin\tPravachol\tBupropion\tBudeprion\tBuproban\tWellbutrin\tZyban\tFluoxetine\tProzac\tRapiflux\tSarafem\tSelfemra\tCarvedilol\tCoreg\tPrednisone\tDeltasone\tTamsulosin\tFlomax\tPotassium\tK-Dur\tKlor-Con\tKlotrix\tMicro-K\tSlow-Kclopidogrel\tPlavix\tIbuprofen\tAdvil\tMotrin\tMeloxicam\tMobic\tRosuvastatin\tCrestor\tAspirin\tTramadol\tUltram\tZolpidem\tAmbien\tIntermezzo\tWarfarin\tCoumadin\tClonazepam Klonopin\tPropranolol \tInderal\tInnoPran\tPronol\tGlipizide\tGlucotrol\tDextroamphetamine\tamphetamine salts \tAdderall\tCyclobenzaprine\tFlexeril\tMethylphenidate\tConcerta\tMetadate\tRitalin\tDuloxetine\tCymbalta\tAzithromycin\tZithromax\tRanitidine\tZantac\tMetformin Hydrochloride\tLosartan Potassium\tGabapentin\tAcetaminophen\tHydrocodone Bitartrate\tHydrochlorothiazide\tSertraline Hydrochloride\tFurosemide\tPantoprazole Sodium\tEscitalopram Oxalate\tFluoxetine Hydrochloride\tDextroamphetamine\tDextroamphetamine Saccharate\tAmphetamine\tAmphetamine Aspartate\tTramadol Hydrochloride\tPravastatin Sodium\tTrazodone Hydrochloride\tTamsulosin Hydrochloride\tClopidogrel Bisulfate\tClonazepam\tOxycodone\tAllopurinol\tVenlafaxine\tHydrochlorothiazide\tLisinopril\tPropranolol Hydrochloride\tHydrochlorothiazide\tLosartan Potassium\tCetirizine\tEstradiol\tEthinyl Estradiol\tNorethindrone\tLorazepam\tQuetiapine Fumarate\tZolpidem Tartrate\tErgocalciferol\tBudesonide\tFormoterol\tSpironolactone\tOndansetron\tInsulin Aspart\tApixaban\tNaproxen\tLamotrigine\tFluticasone Propionate\tSalmeterol Xinafoate\tPregabalin\tGlimepiride\tDiclofenac\tFenofibrate\tParoxetine\tClonidine\tLoratadine\tDiltiazem Hydrochloride\tHydroxyzine\tAmitriptyline\tDoxycycline\tEthinyl Estradiol\tNorgestimate\tLisdexamfetamine Dimesylate\tSitagliptin Phosphate\tLatanoprost\tCephalexin\tTizanidine\tFinasteride\tLovastatin\tTopiramate\tInsulin Lispro\tSulfamethoxazole\tTrimethoprim\tBuspirone Hydrochloride\tOseltamivir Phosphate\tFerrous Sulfate\tAmoxicillin\tClavulanate Potassium\tValsartan\tLevetiracetam\tHydralazine Hydrochloride\tMirtazapine\tRivaroxaban\tAripiprazole\tOxybutynin\tEsomeprazole\tAlendronate Sodium\tFolic Acid\tTriamcinolone\tTiotropium\tThyroid\tCiprofloxacin\tIsosorbide Mononitrate\tSumatriptan\tInsulin Detemir\tBenzonatate\tFamotidine\tDiazepam\tRopinirole Hydrochloride\tHydrochlorothiazide\tTriamterene\tBenazepril Hydrochloride\tMetronidazole\tMethocarbamol\tNifedipine\tBaclofen\tMethotrexate\tTestosterone\tEzetimibe\tCelecoxib\tGuanfacine\tDonepezil Hydrochloride\tHydroxychloroquine\tClindamycin\tDivalproex Sodium\tMorphine\tEthinyl Estradiol\tLevonorgestrel\tPrednisolone\tEnalapril Maleate\tPioglitazone\tCyanocobalamin\tNorethindrone\tMeclizine Hydrochloride\tValacyclovir\tAlbuterol Sulfate\tIpratropium Bromide\tDocusate\tLiraglutide\tHydrocortisone\tVerapamil Hydrochloride\tCefdinir\tNortriptyline Hydrochloride\tTimolol\tDulaglutide\tPromethazine Hydrochloride\tAcyclovir\tFluconazole\tMethylprednisolone\tMetformin Hydrochloride\tSitagliptin Phosphate\tRamipril\tDexmethylphenidate Hydrochloride\tBrimonidine Tartrate\tOxcarbazepine\tRisperidone\tLevofloxacin\tChlorthalidone\tAtomoxetine Hydrochloride\tPolyethylene Glycol 3350\tCalcium\tCholecalciferol\tMupirocin\tEthinyl Estradiol\tEtonogestrel\tDrospirenone\tEthinyl Estradiol\tPhentermine\tCarbidopa\tLevodopa\tOmega-3-acid Ethyl Esters\tDesogestrel\tEthinyl Estradiol\tGuaifenesin\tRizatriptan Benzoate\tIrbesartan\tProgesterone\tDoxazosin Mesylate\tLinagliptin\tAdalimumab\tNitrofurantoin\tBudesonide\tAmlodipine Besylate\tBenazepril Hydrochloride\tHydrochlorothiazide\tValsartan\tDigoxin\tAcetaminophen\tButalbital\tInsulin Degludec\tKetoconazole\tNitroglycerin\tTemazepam\tAmiodarone Hydrochloride\tMemantine Hydrochloride\tCanagliflozin\tKetorolac Tromethamine\tLiothyronine Sodium\tLithium\tDicyclomine Hydrochloride\tPramipexole Dihydrochloride\tNebivolol Hydrochloride\tTerazosin\tMagnesium\tColchicine\tSucralfate\tMedroxyprogesterone Acetate\tGlyburide\tCarbamazepine\tGemfibrozil\tNystatin\tSildenafil\tPrazosin Hydrochloride\tBeclomethasone\tLinaclotide\tDesvenlafaxine\tInsulin Human\tInsulin Isophane Human\tClobetasol Propionate\tEmpagliflozin\tLansoprazole\tErythromycin\tGuaifenesin\tCodeine Phosphate\tPseudoephedrine Hydrochloride\tBumetanide\tDexlansoprazole\tMometasone\tEstrogens, Conjugated\tHydromorphone Hydrochloride\tLetrozole\tOlanzapine\tLevocetirizine Dihydrochloride\tCyclosporine\tDapagliflozin\tLabetalol\tAnastrozole\tMesalamine\tSodium\tMirabegron\tLidocaine\tMycophenolate Mofetil\tOfloxacin\tIndomethacin\tPenicillin V\tMetoclopramide Hydrochloride\tOlmesartan Medoxomil\tAzelastine Hydrochloride\tEmtricitabine\tEpinephrine\tIpratropium\tTamoxifen Citrate\tLurasidone Hydrochloride\tBuprenorphine\tCalcitriol\tRanolazine\tDorzolamide Hydrochloride\tTimolol Maleate\tFormoterol Fumarate\tMometasone Furoate\tBetamethasone\tCalcium\tTadalafil\tDextroamphetamine Sulfate\tMethimazole\tUmeclidinium Bromide\tVilanterol Trifenatate\tUmeclidinium Bromide\tDiphenhydramine Hydrochloride\tTicagrelor\tFexofenadine Hydrochloride\tSotalol Hydrochloride\tSodium Fluoride\tInsulin Isophane\tSolifenacin Succinate\tFlecainide Acetate\tBenztropine Mesylate\tEszopiclone\tPolymyxin B Sulfate\tTrimethoprim Sulfate\tPhenytoin\tBromfenac Sodium\tPrednisolone Acetate\tGatifloxacin\tTorsemide\tSennosides\tTolterodine Tartrate\tBimatoprost\tEtanercept\tTravoprost\tMinocycline Hydrochloride\tBisoprolol Fumarate\tHydrochlorothiazide\tNabumetone\tIsotretinoin\tDoxepin Hydrochloride\tPrimidone\tDexamethasone\tBisoprolol Fumarate\tExenatide\tChlorhexidine\tEthinyl Estradiol\tNorgestrel\tDutasteride\tModafinil\tOlopatadine\tFentanyl\tTelmisartan\tPolyethylene Glycol 3350\tTretinoin\tDexamethasone\tNeomycin Sulfate\tPolymyxin B Sulfate\tPseudoephedrine\tInsulin Human\tSacubitril\tValsartan\tPancrelipase Lipase\tPancrelipase Protease\tPancrelipase Amylase\tBrompheniramine Maleate\tDextromethorphan Hydrobromide\tPseudoephedrine Hydrochloride\"\n",
    "     },\n",
    "     \"Shipping\":\n",
    "     {\n",
    "        \"Shipping\": \"Accessorial service\tAccrual\tAcquiescence\tAd Valorem\tAd Valorem Duty\tAd Valorem Freight\tAdvice of Shipment\tAdvising bank\tAffreight\tAffreightment Contract of\tAgent (Agt.)\tAir Freight Forwarder\tAir waybill\tAll commodity rate\tAll inclusive rate (AI)\tAllowance\tAlso Notify Party\tApparent Authority\tApparent Good Order\tArbitrary\tArbitration\tArrival notice\tAwkward cargo\tB/L Master\tBank guarantee\tBareboat Charter Party\tBasic freight\tBdl.\tBerth term\tBill of lading (B/L)\tBill of lading Ton\tBlack powder content\tBlanket waybill\tBlocked train\tBlocking or bracing\tBls.\tBobtail\tBona fide\tBond\tBond port\tBonded Logistics Park (Center)\tBonded freight\tBonded indemnity\tBonded warehouse\tBooking\tBooking number\tBooking status\tBottom air delivery\tBox\tBoxcar\tBreak-bulk cargo\tBreakbulk (BB)\tBritish Thermal Unit (BTU)\tBroken stowage\tBroker\tBrokerage\tBrokerage license\tBulk carriers\tBulk freight\tBulk-freight container\tBull rings\tBunker surcharge (BAF BSC)\tBunkers\tBx.\tC-TPAT/CTPAT\tC.A.F.\tC.B.M. (C.M.)\tC.F. (Cu. Ft.)\tC.F.S.\tC.I.\tC.K.D.\tC.M.\tC.O.D.\tC.O.F.C.\tC.O.G.S.A.\tCFCs Chlorofluorocarbons\tCFR\tCFS/CFS\tCFS/CY\tCIF\tCIP\tCPT\tCSC\tCSI\tCY\tCY/CFS\tCY/CY\tCapacity/Weight (Container)\tCaptains protest\tCar pooling\tCargo manifest\tCargo nature\tCarload\tCarload rate\tCarnet\tCarrier\tCarriers lien\tCartage\tCellular vessel\tCertificate of origin\tCharter party (C/P)\tChartered ship\tCharterer\tChassis\tChilling\tChilling injury\tChock\tClean bill of lading\tClearance limits\tCleared without examination\tClip-on\tClosing date\tCollapsible container\tCollecting bank\tCombined transport\tCombined transport document (CTD)\tCombined transport operator (CTO)\tCommercial invoice\tCommodity\tCommodity rate\tCommon carrier\tCommon tariff\tCompressor\tConcealed damage\tConcealed loss\tCondenser\tConference\tConference rate\tConfirmed letter of credit\tConfirming bank\tConnecting carrier\tConsignee\tConsignor\tConsolidated cargo\tConsolidation\tConsolidator\tConsortium\tContainer\tContainer freight station (CFS C.F.S.)\tContainer gross weight\tContainer load plan (CLP)\tContainer number\tContainer part load\tContainer seal number\tContainer service charge\tContainer size\tContainer status\tContainer type\tContainerizable cargo\tContainerization\tContainerload\tContainership\tContract carrier\tControlled atmosphere (CA)\tCopy B/L\tCorner castings\tCorner posts (door posts)\tCorrection memo\tCorrector\tCost matrix\tCost insurance and freight (C.I.F.)\tCredit agreement\tCu.\tCubic foot\tCustom house\tCustomer’s own transport\tCustomhouse broker\tCustoms bonded warehouse\tCustoms invoice\tCut-off time\tCwt.\tD & H\tD.W.\tDAF\tDDC\tDDP\tDDU\tDEQ\tDES\tDFG\tDOT\tDST\tDangerous Cargo\tDangerous Goods\tDead Space\tDeadweight Tonnage (D/W)\tDedicated Unit Train\tDelivery Order\tDemurrage (Dem.)\tDeployment\tDepot Container\tDestination\tDetention\tDetention Charge\tDevanning\tDifferential Rate\tDistribution\tDiversion\tDivert\tDock\tDock Receipt\tDockage\tDocumentary Credit\tDoor-to-Door\tDouble-Deck Load\tDray\tDrayage\tDry Cargo\tDry Dock\tDry-Bulk Container\tDunnage (Dge.)\tDuty Free Zone\tDwell Time\tECU\tETA\tETD\tEXW\tEn route\tEntry Declaration\tEthylene\tEvaporation\tEvaporator\tEx Work\tExpiry Date\tExport\tExport Declaration\tExpress B/L\tF.A.K.\tF.A.S.\tF.C.L.\tF.E.U.\tF.I.O.\tF.O.B.\tFAS\tFCA\tFCL/FCL\tFCL/LCL\tFDA\tFEFC\tFEU\tFF\tFMC\tFOB\tFeeder Service\tFeeder Vessel\tFinal Destination (FND)\tFlash Point\tForwarder\tFree Trade Zone\tFreight\tFreight Ton\tFresh Air Exchange (FAE)\tFumigation\tG.R.I.\tGATT\tGateway\tGeneral Average\tGeneral Order\tGenerator Set\tGenset (Generator Set)\tGooseneck\tGross Tonnage\tGross Weight\tGroupage\tHague Rules\tHague-Visby Rules\tHamburg Rules\tHarmonized Commodity Description and Coding System\tHatch\tHaulage\tHaulier\tHeavy Lift\tHeavy-Lift Charge\tHigh Cube\tHouse B/L\tHouse-to-House (H/H)\tHouse-to-Pier (H/P)\tHub\tHull\tHull Underwriter\tI.C.C.\tI.M.C.O.\tI.P.I.\tIATA Cargo Agent\tIFP\tIMDG Code\tISPS\tImport\tImport License\tImport Permit\tIn Transit\tInbound\tInbound Editing\tIncoterms\tInland Clearance Depot\tInsulated Container\tInsulated Tank Container\tInsurance\tInsurance Certificate\tInsurance With Average-Clause\tInsurance All-Risk\tInsurance General-Average\tInsurance Particular-Average\tInterchange\tInterchange Points\tIntercoastal\tIntermodal\tIntermodal Transport\tInternet Applications - Shipment Detail\tInterstate\tInterstate Traffic\tIntrastate\tIntrastate Traffic\tIssuing Bank\tKnot\tL.C.L.\tLCL - NVO\tLCL/FCL\tLCL/LCL\tLetter of Credit\tLetter of Indemnity\tLien\tLift-On/Lift-Off (LO-LO)\tLighter\tLighterage\tLine-haul\tLiner\tLiner Terms\tLiter\tLloyds Registry\tLo/Lo\tLoad Factor\tLoadwire\tLocking Bar\tLogistics\tLong Ton\tLongshoreman\tLoose\tLow-Bed\tM.L.B.\tM/V\tMQC\tMT\tMalpractice\tManifest\tManifest Traveling\tMaritime\tMarks & Nos.\tMaster Bill of Ladings\tMaster Lease\tMaster Lease Leasing Cost\tMates Receipt\tMaximum Payload\tMaximum Rate\tMeasurement Ton\tMemo B/L\tMicrobridge\tMileage\tMini Landbridge (MLB)\tMini-Bridge\tMinimum Charge\tModified Atmosphere (MA)\tMultimodal Transport\tN.O.I.B.N.\tN.O.S.\tN.V.O.C.C.\tNVOCC\tNegotiable B/L\tNegotiating Bank\tNet Tonnage\tNet Weight\tNeutral Body\tNon-negotiable B/L\tNon-vessel Owning / Operating Common Carrier (N.V.O.C.C.)\tO.C.P. rate\tOBL\tOcean Bill of Lading (Ocean B/L)\tOcean Freight\tOcean Route\tOn Board\tOn Board B/L\tOn Deck\tOne-Way lease\tOpen-Top Container\tOrigin\tOriginal Bill of Lading (O.B.L.)\tOutbound\tOverage\tOverheight Cargo\tOverland Common Point (O.C.P.)\tOverwidth\tP.& I.\tP.O.D.\tP.O.L.\tP.O.R.\tP/A\tPLRMU\tPSA\tPTI (Pre-trip Inspection)\tPWSC\tPallet\tPanama Canal Act\tPartial Shipments\tParticipating Carrier (Tariff)\tPartlow\tPartlow chart\tPayable Elsewhere\tPayload\tPer Diem\tPerils of the Sea\tPerishable Cargo\tPier\tPier-to-House (P/H)\tPier-to-Pier (P/P)\tPiggyback\tPilferage\tPilot\tPlace of Delivery\tPlace of Receipt\tPool (Container)\tPort\tPort Service Charge\tPort of Call\tPort of Discharge\tPort of Entry\tPort of Loading (POL)\tPort of arrival\tPower Pack\tPower of Attorney\tPratique Certificate\tPre-cooling\tPrepaid (Ppd.)\tPro Rata\tProtest\tPull-down\tQuarantine\tQuarantine buoy\tQuarantine declaration\tQuarantine dues\tQuarantine flag\tQuarantine harbor\tQuarantine signal\tQuarantine station\tQuay rent\tQuota\tRail Onboard B/L\tRailhead\tRamp\tReceipt for shipment B/L\tReconsignment (R/C)\tReefer\tRefrigerant\tRegistrar Accreditation Board (RAB)\tRelative Humidity\tRelay\tRelease note\tRespiration\tReturn air\tRevenue ton (R/T)\tRoll-On/Roll-Off (Ro/Ro)\tRoute (Rte.)\tRyan\tS.D.D.\tS.D.P.\tSCM\tSED\tSI\tSSN\tSTC\tSalvage loss\tSea waybill\tSeal (Container)\tSeal record\tService contract\tShip chandler\tShip owner\tShipped bill of lading\tShipped on board\tShipper\tShipper owned container\tShippers Export Declaration\tShippers Load & Count\tShipping order\tShipping permit\tShipside Delivery\tShort Term Lease\tShort cycling\tShut-out\tSlot\tSpreader\tStability\tStack Car\tStack Train\tStandard Industrial Classification (SIC)\tStandard International Trade Classification (SITC)\tStandard Rate\tStevedore\tStorage\tStore-Door Delivery (STOR/DOR)\tStore-Door PickUp\tStowage\tStraddle Carrier\tStraight Bill of Lading\tStripping\tStuffing\tSupply Chain Management\tSupply air\tSurcharge\tT-floor\tT.E.U.\tT.I.R.\tT.O.F.C.\tTDR\tTEU\tTHC\tTOS\tTRC\tTSN - Time-Space Network\tTVR\tTail\tTank Container\tTare Weight\tTariff (Trf.)\tTender\tTerminal\tThrough Rate\tThrough Service (Thru Service)\tTime Charter\tTonnage\tTontines\tTop air delievery\tTowage\tTramp\tTranship\tTransit Cargo\tTransit Port\tTransshipment Port\tTruck Onboard B/L\tTurnaround\tTwist Locks\tTwo-Way Pallet\tU.S.M.\tUCP\tUCP500\tUN\tUNCTAD\tUNCTAD MMO\tUSDA\tUnit Load\tUnit Train\tUnitization\tVCTSN \tVirtual Capacity Time-Space Network\tVanning\tVentilated Container\tVerified Gross Mass \tVGM\tVessels Manifest\tVol.\tVoyage Direction\tVoyage Number\tWarehouse\tWaybill \tWB\tWeight Cargo\tWharfage \tWhfge\tcm\"\n",
    "     },\n",
    "     \"Delivery\":\n",
    "     {\n",
    "        \"Delivery\":  \"Home Address Zip Code Town Freight Plane Apartment Package Packing Prime Truck Pick up\",\n",
    "     },    \n",
    "     \"Ecommerce\":\n",
    "     {\n",
    "        \"Ecommerce\":  \"SC\tSeller Central\tVC\tVendor Central\t3P\tThird-party seller \tAdvantage \tFBA\tFulfilled by Amazon\tFBM\tFulfilled by Merchant\tSFP\tSeller Fulfilled Prime \tPAN EU\tFC\tFulfilment Centre\tEFN\tEuropean Fulfilment Network\tMCI\tMulti-Country Inventory \tEAN\tEuropean Article Number \tGTIN\tGlobal Trade Identification Number \tISBN\tInternational Standard Book Number \tASIN\tAmazon Standard Identification Number \tSKU\tStock Keeping Unit \tadvertising\tAMG\tAmazon Media Group \tAMS\tAmazon Marketing Services \tDSP\tDemand Side Platform \tAAP \tAmazon Advertising Platform\tHSAs\tHeadline Search Ads \tPDAs\tProduct Display Ads \tSP\tSponsored Products \tLSA\tLock Screen Ads \tA+ \tEBC\tEnhanced Brand Content \tStorefront \tVine Voices \tACoS\tAdvertising Cost of Sale \treporting\tCOGS\tCost of Goods Sold \tRetail Revenue \tP-COGS \tContra-COGS \tSales Discounts \tPPM\tPure Product Margin \tNetPPM – SD\tNet Pure Profit Margin minus Sales Discounts \tRetail Fast Track BuyBox \tRepOOS\tReplenishable Out of Stock \tLBB\tLost Buy Box \tVLT\tVendor Lead Time \tProbRec\tProblem Receive \tBrand Registry \tBuy Box \tLightning Deals \tVerified Review \tBrowse Nodes \tAffiliate\tBlog \tCMS \tContent Management System\tConversion Rate \tCTA \tCall To Action\tCRO\tConversion Rate Optimisation\tDropshipping \tDomain Name \tEbay \tEcommerce \tEvolutionary Algorithms \tFulfilment \tGoogle Analytics \tGoogle Webmaster Tools \tInventory \tLong Tail \tLanding Page \tLogistics \tMargin \tMulti-Channel Ecommerce \tOutsource \tOlark \tPPC \tPayment Gateway \tPaypal \tPay Per Click \tSEO \tSERP \tSocial Signals \tSocial Media \tSplit Testing \tTraffic \tUsability\tWholesale \tWordPress \tWP Engine\"\n",
    "     }\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gensim, operator\n",
    "from scipy import spatial\n",
    "import numpy as np\n",
    "from gensim.models import KeyedVectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vocab_check(vectors, words):\n",
    "\n",
    "    output = list()\n",
    "    for word in words:\n",
    "        if word in vectors.vocab:\n",
    "            output.append(word.strip())\n",
    "        \n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_similarity(input1, input2, vectors):\n",
    "    s1words = set(vocab_check(vectors, input1.split()))\n",
    "    s2words = set(vocab_check(vectors, input2.split()))\n",
    "\n",
    "    output = vectors.n_similarity(s1words, s2words)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "def classify_topics(input, vectors):\n",
    "    feed_score = dict()\n",
    "    for key, value in topic_taxonomy.items():\n",
    "        max_value_score = dict()\n",
    "        for label, keywords in value.items():\n",
    "            max_value_score[label] = 0\n",
    "            topic = (key + ' ' + keywords).strip()\n",
    "            max_value_score[label] += float(calc_similarity(input, topic, vectors))\n",
    "\n",
    "            sorted_max_score = sorted(max_value_score.items(), key=operator.itemgetter(1), reverse=True)[0]\n",
    "            feed_score[sorted_max_score[0]] = sorted_max_score[1]\n",
    "    return sorted(feed_score.items(), key=operator.itemgetter(1), reverse=True)[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading Word2Vec model...\n",
      "Finished loading Word2Vec model...\n"
     ]
    }
   ],
   "source": [
    "model_path = '/Users/javierlasa/Downloads/wordvec/'\n",
    "def load_wordvec_model(modelName, modelFile, flagBin):\n",
    "    print('Loading ' + modelName + ' model...')\n",
    "    model = KeyedVectors.load_word2vec_format(model_path + modelFile, binary=flagBin)\n",
    "    print('Finished loading ' + modelName + ' model...')\n",
    "    return model\n",
    "\n",
    "model_word2vec = load_wordvec_model('Word2Vec', 'GoogleNews-vectors-negative300.bin', True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "([('Walgreens', 0.3735729455947876), ('Shipping', 0.32539650797843933), ('Ecommerce', 0.3119170069694519)],)\n",
      "([('Ecommerce', 0.34261244535446167), ('Shipping', 0.33746498823165894), ('Medicines', 0.3019953668117523)],)\n",
      "([('Shipping', 0.3171371817588806), ('Ecommerce', 0.2812742590904236), ('CVS', 0.23283356428146362)],)\n",
      "([('Amazon Pharmacy', 0.3972618579864502), ('Shipping', 0.3551642894744873), ('Ecommerce', 0.3461659550666809)],)\n",
      "([('Walgreens', 0.35508227348327637), ('Shipping', 0.3339124917984009), ('Ecommerce', 0.3167673945426941)],)\n",
      "([('Amazon Pharmacy', 0.4432898163795471), ('Ecommerce', 0.31570857763290405), ('Shipping', 0.30580174922943115)],)\n",
      "([('Walgreens', 0.3536291718482971), ('Shipping', 0.3294084966182709), ('Ecommerce', 0.3287859559059143)],)\n",
      "([('Walgreens', 0.4085548222064972), ('CVS', 0.3547872304916382), ('Shipping', 0.3253345489501953)],)\n",
      "([('Walgreens', 0.35676565766334534), ('Shipping', 0.3469219207763672), ('CVS', 0.30309152603149414)],)\n",
      "([('Shipping', 0.28568804264068604), ('Ecommerce', 0.28302499651908875), ('Government', 0.2752073109149933)],)\n",
      "([('Shipping', 0.2787896394729614), ('Ecommerce', 0.24896633625030518), ('Delivery', 0.18219441175460815)],)\n",
      "([('Walgreens', 0.3532087802886963), ('Amazon Pharmacy', 0.31280380487442017), ('Shipping', 0.30850744247436523)],)\n",
      "([('Shipping', 0.30933478474617004), ('Government', 0.2622150778770447), ('Ecommerce', 0.2578164339065552)],)\n",
      "([('Shipping', 0.29949384927749634), ('Government', 0.27759599685668945), ('Walgreens', 0.2768234312534332)],)\n",
      "([('Shipping', 0.29447418451309204), ('Ecommerce', 0.270046591758728), ('Government', 0.21029797196388245)],)\n",
      "([('Shipping', 0.31711429357528687), ('Government', 0.3117479979991913), ('Ecommerce', 0.2719354033470154)],)\n",
      "([('Shipping', 0.3078504800796509), ('Walgreens', 0.2955789566040039), ('CVS', 0.2768745422363281)],)\n",
      "([('Ecommerce', 0.3578207194805145), ('Shipping', 0.35040175914764404), ('Amazon Pharmacy', 0.3438054621219635)],)\n",
      "([('Shipping', 0.3023812770843506), ('Ecommerce', 0.27585381269454956), ('Delivery', 0.21381494402885437)],)\n",
      "([('Shipping', 0.36946335434913635), ('Ecommerce', 0.3625296354293823), ('Amazon Pharmacy', 0.3065357804298401)],)\n",
      "([('Ecommerce', 0.4159192442893982), ('Amazon Pharmacy', 0.3985063433647156), ('Shipping', 0.3857657313346863)],)\n",
      "([('Ecommerce', 0.471839964389801), ('Shipping', 0.44443264603614807), ('Amazon Pharmacy', 0.4350915253162384)],)\n",
      "([('Ecommerce', 0.37390679121017456), ('Shipping', 0.3624235689640045), ('Amazon Pharmacy', 0.27835550904273987)],)\n",
      "([('Shipping', 0.4711781144142151), ('Ecommerce', 0.4054313004016876), ('Delivery', 0.3215187191963196)],)\n",
      "([('Shipping', 0.47072434425354004), ('CVS', 0.45232975482940674), ('Ecommerce', 0.4406052231788635)],)\n",
      "([('Ecommerce', 0.41523122787475586), ('Shipping', 0.41136544942855835), ('Delivery', 0.2813594937324524)],)\n",
      "([('Ecommerce', 0.3950835168361664), ('Shipping', 0.3690892159938812), ('Amazon Pharmacy', 0.33976221084594727)],)\n",
      "([('Ecommerce', 0.36654528975486755), ('Shipping', 0.35739201307296753), ('Medicines', 0.33367717266082764)],)\n",
      "([('Shipping', 0.41872918605804443), ('Government', 0.3908977210521698), ('Ecommerce', 0.38448697328567505)],)\n",
      "([('Shipping', 0.48395684361457825), ('Ecommerce', 0.4419921636581421), ('Medicines', 0.404347687959671)],)\n",
      "([('Shipping', 0.3275463879108429), ('Medicines', 0.32108163833618164), ('Ecommerce', 0.3006729483604431)],)\n",
      "([('Shipping', 0.2534344494342804), ('Ecommerce', 0.24388007819652557), ('Delivery', 0.1780860722064972)],)\n",
      "([('Shipping', 0.31814873218536377), ('Ecommerce', 0.28140586614608765), ('Delivery', 0.21466831862926483)],)\n",
      "([('Shipping', 0.2519211173057556), ('Ecommerce', 0.2140820175409317), ('Delivery', 0.16411659121513367)],)\n",
      "([('Shipping', 0.35977602005004883), ('Ecommerce', 0.3181424140930176), ('Delivery', 0.2933318018913269)],)\n",
      "([('Shipping', 0.2606246769428253), ('Ecommerce', 0.2393959015607834), ('Delivery', 0.2120663970708847)],)\n",
      "([('Shipping', 0.41283273696899414), ('Ecommerce', 0.3800521492958069), ('Medicines', 0.38001054525375366)],)\n",
      "([('Shipping', 0.3000258803367615), ('Ecommerce', 0.25944626331329346), ('Medicines', 0.24874047935009003)],)\n",
      "([('CVS', 0.27968406677246094), ('Shipping', 0.26421093940734863), ('Ecommerce', 0.24993017315864563)],)\n",
      "([('Shipping', 0.2818777859210968), ('Ecommerce', 0.23015747964382172), ('Delivery', 0.22149436175823212)],)\n",
      "([('Shipping', 0.3611503839492798), ('Medicines', 0.2951609194278717), ('Ecommerce', 0.28967761993408203)],)\n",
      "([('Amazon Pharmacy', 0.5422918796539307), ('Ecommerce', 0.483203262090683), ('Shipping', 0.4358532428741455)],)\n",
      "([('Ecommerce', 0.36663636565208435), ('Shipping', 0.35975584387779236), ('Medicines', 0.34573400020599365)],)\n",
      "([('Ecommerce', 0.4204978048801422), ('Amazon Pharmacy', 0.41654717922210693), ('Shipping', 0.41572362184524536)],)\n",
      "([('Shipping', 0.41290682554244995), ('Ecommerce', 0.3895537257194519), ('Amazon Pharmacy', 0.34762659668922424)],)\n",
      "([('Shipping', 0.34670525789260864), ('Ecommerce', 0.30018150806427), ('Delivery', 0.24006974697113037)],)\n",
      "([('Shipping', 0.3579667806625366), ('Medicines', 0.30461397767066956), ('Ecommerce', 0.3038010895252228)],)\n",
      "([('Shipping', 0.332450807094574), ('Ecommerce', 0.2899094820022583), ('Medicines', 0.2416187822818756)],)\n",
      "([('Shipping', 0.305285781621933), ('Ecommerce', 0.2572917342185974), ('Delivery', 0.23884738981723785)],)\n",
      "([('Shipping', 0.30348676443099976), ('Ecommerce', 0.258491575717926), ('Medicines', 0.24586883187294006)],)\n",
      "([('Shipping', 0.26788678765296936), ('Ecommerce', 0.24099384248256683), ('Delivery', 0.20306286215782166)],)\n",
      "([('Walgreens', 0.4590424597263336), ('CVS', 0.45695415139198303), ('Amazon Pharmacy', 0.41059431433677673)],)\n",
      "([('Shipping', 0.4038439393043518), ('Ecommerce', 0.3657786250114441), ('Delivery', 0.3272973597049713)],)\n",
      "([('Shipping', 0.42170020937919617), ('Ecommerce', 0.3572676181793213), ('CVS', 0.3297281265258789)],)\n",
      "([('Shipping', 0.39646777510643005), ('Ecommerce', 0.38800910115242004), ('Delivery', 0.3155694603919983)],)\n",
      "([('Shipping', 0.38460099697113037), ('Ecommerce', 0.336556613445282), ('Government', 0.2716449499130249)],)\n",
      "([('Shipping', 0.4139918088912964), ('Ecommerce', 0.37591540813446045), ('Amazon Pharmacy', 0.3192518949508667)],)\n",
      "([('Shipping', 0.3290467858314514), ('Ecommerce', 0.28674203157424927), ('Medicines', 0.25892573595046997)],)\n",
      "([('Ecommerce', 0.36933422088623047), ('Shipping', 0.35205012559890747), ('Walgreens', 0.30239975452423096)],)\n",
      "([('Walgreens', 0.5020809173583984), ('CVS', 0.3609355688095093), ('Amazon Pharmacy', 0.35536128282546997)],)\n",
      "([('Ecommerce', 0.38606858253479004), ('Shipping', 0.3794808089733124), ('Walgreens', 0.3713945746421814)],)\n",
      "([('Ecommerce', 0.3752679228782654), ('Shipping', 0.3534577488899231), ('Walgreens', 0.3297387361526489)],)\n",
      "([('Shipping', 0.33222752809524536), ('Ecommerce', 0.2967816889286041), ('Medicines', 0.2645694613456726)],)\n",
      "([('Shipping', 0.35679060220718384), ('Delivery', 0.28296589851379395), ('Ecommerce', 0.2808176279067993)],)\n",
      "([('Shipping', 0.3173425793647766), ('Government', 0.2678372859954834), ('Medicines', 0.2569398880004883)],)\n"
     ]
    }
   ],
   "source": [
    "output1 = classify_topics('Walgreens has rolled out a new kind of store that shrinks down its square footage and focuses on the pharmacy', model_word2vec),\n",
    "print(output1)\n",
    "\n",
    "output2 = classify_topics('Expect to see fewer front-of-store items, a slimmed down selection of over-the-counter medications and an emphasis on relationships between pharmacists and customers', model_word2vec),\n",
    "print(output2)\n",
    "\n",
    "output3 = classify_topics('It has opened more than 30 small-format pharmacies as part of a pilot, and it may open additional ones depending on how the stores perform', model_word2vec),\n",
    "print(output3)\n",
    "\n",
    "output4 = classify_topics('Along with feeling the heat from CVS Health and other drugstores, Walmart and Amazon are both expanding their health care focus', model_word2vec),\n",
    "print(output4)\n",
    "\n",
    "output5 = classify_topics('Walmart has opened four clinics that offer a broad array of services at a low price, including primary care and dental care, in addition to the pharmacies it has at many of its big-box stores', model_word2vec),\n",
    "print(output5)\n",
    "\n",
    "output6 = classify_topics('Amazon bought PillPack two years ago, laying the foundation for the company to expand into pharmacy', model_word2vec),\n",
    "print(output6)\n",
    "\n",
    "output7 = classify_topics('Walgreens is balancing its investment with cost-cutting efforts that have included layoffs and hundreds of store closures', model_word2vec),\n",
    "print(output7)\n",
    "\n",
    "output8 = classify_topics('Walgreens has turned some of its more than 9,200 U.S. stores into “neighborhood health destinations” — a term it uses to describe locations with health care services along with a pharmacy', model_word2vec),\n",
    "print(output8)\n",
    "\n",
    "output9 = classify_topics('She said the small-format pharmacy was inspired in part by Walgreens stores near health care systems that are smaller in size and cater to customers picking up medication after getting discharged from the hospital', model_word2vec),\n",
    "print(output9)\n",
    "\n",
    "output10 = classify_topics('Instead, they’ll notice a sharper focus on health and wellness products like vitamins, over-the-counter medications, thermometers and Band-Aids, Shah said', model_word2vec),\n",
    "print(output10)\n",
    "\n",
    "output11 = classify_topics('She said it’s changed the mix of products, depending on what customers want', model_word2vec),\n",
    "print(output11)\n",
    "\n",
    "output12 = classify_topics('Pharmacists play a central role in the new kind of store — and Walgreens hopes that personalized care will ultimately lead to better health outcomes, Shah said', model_word2vec),\n",
    "print(output12)\n",
    "\n",
    "output13 = classify_topics('She said the company sees the smaller stores as a place where more people can have one-on-one conversations with pharmacists, particularly those taking multiple medications or with complex and chronic conditions', model_word2vec),\n",
    "print(output13)\n",
    "\n",
    "output14 = classify_topics('Shah said the company is testing the small-format pharmacies in diverse locations, including urban, suburban and rural areas', model_word2vec),\n",
    "print(output14)\n",
    "\n",
    "output15 = classify_topics('Even as people order prescriptions online or get them delivered to their door, Shah said brick-and-mortar locations still play an important role', model_word2vec),\n",
    "print(output15)\n",
    "\n",
    "output16 = classify_topics('The company considers a variety of factors when deciding where to open the stores, such as whether there’s a need for more pharmacies and greater health care access, Shah said', model_word2vec),\n",
    "print(output16)\n",
    "\n",
    "output17 = classify_topics('Those include pharmacy deserts, where customers don’t have a nearby place to pick up prescriptions', model_word2vec),\n",
    "print(output17)\n",
    "\n",
    "output18 = classify_topics('When Seattle-headquartered Amazon announced its foray into e-pharmacy in the US recently, traders’ groups, pharma associations as well as big businesses in India took notice', model_word2vec),\n",
    "print(output18)\n",
    "\n",
    "output19 = classify_topics('Players with interest in this space are keenly looking out for Amazon’s next move and whether India would figure prominently in its e-pharmacy plans.', model_word2vec),\n",
    "print(output19)\n",
    "\n",
    "output20 = classify_topics('So far, the American e-commerce major has taken only baby steps in the pharmacy segment in India and Amazon executives have pointed out there’s no timeline for a commercial launch in the country yet', model_word2vec),\n",
    "print(output20)\n",
    "\n",
    "output21 = classify_topics('Amazon has launched an online delivery service offering big discounts for prescription medicine in the US, as pharmacies become the latest sector to be disrupted by the retail giant', model_word2vec),\n",
    "print(output21)\n",
    "\n",
    "output22 = classify_topics('Amazon Pharmacy, which will offer discounts of up to 80 per cent on generic drugs for Prime subscribers paying without insurance, either on its site or at more than 50,000 bricks-and-mortar pharmacies nationwide, will become a direct challenger to retailers such as Walgreens and CVS Health', model_word2vec),\n",
    "print(output22)\n",
    "\n",
    "output23 = classify_topics('The world’s largest online retailer is also offering discounts of up to 40 per cent on branded medicines, it said in a statement on Tuesday', model_word2vec),\n",
    "print(output23)\n",
    "\n",
    "output24 = classify_topics('The recurring nature of pharmacy, and relatively small package size, should also integrate well into Amazon’s existing logistics orders to increase gross profit dollars per shipment', model_word2vec),\n",
    "print(output24)\n",
    "\n",
    "output25 = classify_topics('Shares in competitors were shaken by the announcement. Walgreens Boots Alliance fell more than 9 per cent by afternoon trading on Tuesday, while CVS Health, the largest pharmacy operator in the US, dropped 9 per cent and Rite Aid shed more than 16 per cent', model_word2vec),\n",
    "print(output25)\n",
    "\n",
    "output26 = classify_topics('Shares in GoodRx, a California-based company that offers discount partnerships with 75,000 US pharmacies, tumbled 20 per cent', model_word2vec),\n",
    "print(output26)\n",
    "\n",
    "output27 = classify_topics('Setting up the store during the pandemic could help Amazon as online sales of other products such as groceries have rapidly grown while people have been stuck at home', model_word2vec),\n",
    "print(output27)\n",
    "\n",
    "output28 = classify_topics('Although prescription medicines have lagged behind other products in selling online, consumers could be tempted by the convenience of ordering from Amazon, and the discounts available', model_word2vec),\n",
    "print(output28)\n",
    "\n",
    "output29 = classify_topics('Analysts warn regulatory compliance — particularly how the drugs are stored and shipped — presents a big hurdle for Amazon to overcome', model_word2vec),\n",
    "print(output29)\n",
    "\n",
    "output30 = classify_topics('The store will also not deliver Schedule 2 medication, which includes many opioids', model_word2vec),\n",
    "print(output30)\n",
    "\n",
    "output31 = classify_topics('Customers seeking prescriptions tend to be loyal to local pharmacists, in part because of the sensitive nature of medication', model_word2vec),\n",
    "print(output31)\n",
    "\n",
    "output32 = classify_topics('They also tend to be older, making them less likely to shop online', model_word2vec),\n",
    "print(output32)\n",
    "\n",
    "output33 = classify_topics('There are intricacies in this sub-segment that may be tougher to break, from a relationship perspective, than in any other segment of retail', model_word2vec),\n",
    "print(output33)\n",
    "\n",
    "output34 = classify_topics('I would never discount Amazon. It can afford to spend an awful lot of money and absorb a big margin hit', model_word2vec),\n",
    "print(output34)\n",
    "\n",
    "output35 = classify_topics('Avoiding stores and getting your necessities delivered to your door is not just convenient, it is very necessary in the ongoing COVID-19 pandemic', model_word2vec),\n",
    "print(output35)\n",
    "\n",
    "output36 = classify_topics('Luckily, you can get basically anything you want without stepping into a store -- including your prescriptions', model_word2vec),\n",
    "print(output36)\n",
    "\n",
    "output37 = classify_topics('Prescription delivery services can be a game-changer if you are unable to go the standard pharmacy route for your prescription refill', model_word2vec),\n",
    "print(output37)\n",
    "\n",
    "output38 = classify_topics('Of course, finding a way to get your prescription medication delivered is very important if you are home sick and dont want to spread germs, but there are so many other reasons a patient may want to get their medication delivered direct to their door', model_word2vec),\n",
    "print(output38)\n",
    "\n",
    "output39 = classify_topics('Seniors might have trouble making it to the pharmacy', model_word2vec),\n",
    "print(output39)\n",
    "\n",
    "output40 = classify_topics('Women may not have time to pick up their birth control each month', model_word2vec),\n",
    "print(output40)\n",
    "\n",
    "output41 = classify_topics('It can be easy to become disorganized and fall behind on refills for maintenance medications', model_word2vec),\n",
    "print(output41)\n",
    "\n",
    "output42 = classify_topics('Amazon Pharmacy is a new online pharmacy that offers prescription refills and free delivery for Amazon Prime members', model_word2vec),\n",
    "print(output42)\n",
    "\n",
    "output43 = classify_topics('Amazon takes your health insurance to help pay for your medications and is also offering a prescription savings benefit if you arent using health insurance', model_word2vec),\n",
    "print(output43)\n",
    "\n",
    "output44 = classify_topics('Amazon Pharmacy lets customers compare prescription costs for their medications with an insurance co-pay, without insurance and the Prime Discount, so they can find the least-expensive option', model_word2vec),\n",
    "print(output44)\n",
    "\n",
    "output45 = classify_topics('PillPack is a medication delivery service owned and operated by Amazon that offers free delivery, and takes most types of health insurance', model_word2vec),\n",
    "print(output45)\n",
    "\n",
    "output46 = classify_topics('The service does not cost anything more than what you pay for medication, which is a great deal considering the extra benefits you get compared to a standard pharmacy service', model_word2vec),\n",
    "print(output46)\n",
    "\n",
    "output47 = classify_topics('Once you get your prescriptions set up to be filled through PillPack, you simply pay the copay for your medication, and your medications will be shipped to you every month', model_word2vec),\n",
    "print(output47)\n",
    "\n",
    "output48 = classify_topics('Besides offering free delivery, those extra benefits include organizing and separating your medications for each day.', model_word2vec),\n",
    "print(output48)\n",
    "\n",
    "output49 = classify_topics('Every day pills are placed into a convenient single-serve pack, and the time you are supposed to take them is even printed on the front', model_word2vec),\n",
    "print(output49)\n",
    "\n",
    "output50 = classify_topics('This is a huge perk if you take a lot of medications and spend time sorting them out, and also if you have difficulty remembering what time you are supposed to take your pills', model_word2vec),\n",
    "print(output50)\n",
    "\n",
    "output51 = classify_topics('If you are a caretaker for someone else, this can also be a huge time saver', model_word2vec),\n",
    "print(output51)\n",
    "\n",
    "output52 = classify_topics('CVS Pharmacy offers one- to two-day delivery and same day (on-demand) delivery in most cities', model_word2vec),\n",
    "print(output52)\n",
    "\n",
    "output53 = classify_topics('Same day delivery is usually fulfilled within hours, which is great for when you need your meds ASAP', model_word2vec),\n",
    "print(output53)\n",
    "\n",
    "output54 = classify_topics('CVS does charge a delivery fee for prescriptions, but some health insurance plans may cover the fee, including Medicare Part D', model_word2vec),\n",
    "print(output54)\n",
    "\n",
    "output55 = classify_topics('If you join CVS membership program, CarePass for $5 a month, you get free delivery for your prescriptions, plus free one- to two-day delivery for other items', model_word2vec),\n",
    "print(output55)\n",
    "\n",
    "output56 = classify_topics('It is important to remember that ordering items from CVS.com is not the same service as prescription delivery, so those will take several days or longer to ship', model_word2vec),\n",
    "print(output56)\n",
    "\n",
    "output57 = classify_topics('Walmart Pharmacy does offer free standard shipping for prescriptions, but you will have to wait around 5-7 days for your medications', model_word2vec),\n",
    "print(output57)\n",
    "\n",
    "output58 = classify_topics('If you need your medications faster, you can pay an additional $8 for second-day delivery, or $15 for overnight delivery', model_word2vec),\n",
    "print(output58)\n",
    "\n",
    "output59 = classify_topics('Walmart has an app to help make the prescription management and refill process easier and more efficient', model_word2vec),\n",
    "print(output59)\n",
    "\n",
    "output60 = classify_topics('AllianceRx is Walgreens combined specialty and home delivery pharmacy', model_word2vec),\n",
    "print(output60)\n",
    "\n",
    "output61 = classify_topics('For non-specialty medications, you can get free next-day delivery with Walgreens Express', model_word2vec),\n",
    "print(output61)\n",
    "\n",
    "output62 = classify_topics('Walgreens Express is your best bet for individual or one-time prescriptions you need now', model_word2vec),\n",
    "print(output62)\n",
    "\n",
    "output63 = classify_topics('With AllianceRx, you can get up to 90 days of your prescriptions filled, plus automatic refills', model_word2vec),\n",
    "print(output63)\n",
    "\n",
    "output64 = classify_topics('Because it can cover up to three months of medication, the delivery takes about 10 days since it is delivered by standard mail for free', model_word2vec),\n",
    "print(output64)\n",
    "\n",
    "output65 = classify_topics('AllianceRx is what you would request if you have chronic health conditions or specialty medications you know you will need filled for the foreseeable future', model_word2vec),\n",
    "print(output65)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
