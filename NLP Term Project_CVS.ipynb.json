{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "print(\"Current Working Directory \" , os.getcwd())\n",
    "os.chdir(\"/Users/javierlasa/Downloads\")\n",
    "print(\"Current Working Directory \" , os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting python-decouple\n",
      "  Downloading python-decouple-3.3.tar.gz (10 kB)\n",
      "Building wheels for collected packages: python-decouple\n",
      "  Building wheel for python-decouple (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for python-decouple: filename=python_decouple-3.3-py3-none-any.whl size=9024 sha256=18c383633ac549a5ba215a54224d55ae4c8104aec5ca2594823304f7b104fa10\n",
      "  Stored in directory: /Users/javierlasa/Library/Caches/pip/wheels/89/05/0c/780f3533d4fd7f9abdaafb2acdabdfe5542efb9fd15456030a\n",
      "Successfully built python-decouple\n",
      "Installing collected packages: python-decouple\n",
      "Successfully installed python-decouple-3.3\n",
      "Requirement already satisfied: webhoseio in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (0.5)\n",
      "Requirement already satisfied: requests>=2.0.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from webhoseio) (2.24.0)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (3.0.4)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (2.10)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (2020.6.20)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.0.0->webhoseio) (1.25.9)\n"
     ]
    }
   ],
   "source": [
    "#Configure API\n",
    "!pip install python-decouple\n",
    "!pip install webhoseio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "import webhoseio\n",
    "from decouple import config\n",
    "\n",
    "webhoseio.config(token=\"\")\n",
    "\n",
    "query_params = {\n",
    "\n",
    "\"q\": \"language:english organization:CVS language:english is_first:true\",\n",
    "\n",
    "\"ts\": \"1605236719963\",\n",
    "\n",
    "\"sort\": \"crawled\"\n",
    "\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get the first batch of 100 news posts, add them to newsfeeds - a Python array of JSONs\n",
    "output = webhoseio.query(\"filterWebContent\", query_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds = []\n",
    "for post in output['posts']:\n",
    "    newsfeeds.append(post)\n",
    "len(newsfeeds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'persons': [],\n",
       " 'organizations': [{'name': 'cvs', 'sentiment': 'none'},\n",
       "  {'name': 'signet financial management llc signet financial management llc',\n",
       "   'sentiment': 'none'},\n",
       "  {'name': 'nyse', 'sentiment': 'none'},\n",
       "  {'name': 'cvs health co.', 'sentiment': 'none'},\n",
       "  {'name': 'cvs health', 'sentiment': 'none'},\n",
       "  {'name': 'ipg investment advisors llc', 'sentiment': 'none'},\n",
       "  {'name': 'signet financial management llc', 'sentiment': 'none'},\n",
       "  {'name': 'commonwealth equity services llc', 'sentiment': 'none'},\n",
       "  {'name': 'cibc asset management inc', 'sentiment': 'none'},\n",
       "  {'name': 'holdings channel', 'sentiment': 'none'}],\n",
       " 'locations': []}"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds[0]['entities']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "589"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the remaining API call limiit and how many more posts are left (e.g. 1 ca\n",
    "output['requestsLeft']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3847"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print(output['totalResults']) # to see total available posts\n",
    "num_more_posts = output['moreResultsAvailable']\n",
    "num_more_posts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3947\n"
     ]
    }
   ],
   "source": [
    "#Get the next batches and add them to newsfeeds\n",
    "count = 0\n",
    "while count < num_more_posts:    \n",
    "    output = webhoseio.get_next()\n",
    "    for post in output['posts']:\n",
    "        newsfeeds.append(post)\n",
    "    count += 100\n",
    "print(len(newsfeeds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "thread\n",
      "uuid\n",
      "url\n",
      "ord_in_thread\n",
      "parent_url\n",
      "author\n",
      "published\n",
      "title\n",
      "text\n",
      "highlightText\n",
      "highlightTitle\n",
      "highlightThreadTitle\n",
      "language\n",
      "external_links\n",
      "external_images\n",
      "entities\n",
      "rating\n",
      "crawled\n",
      "updated\n"
     ]
    }
   ],
   "source": [
    "# Write the JSONs to a data file as one line per post JSON object\n",
    "import json\n",
    "\n",
    "with open(\"webhose_cvs_clean.json\", \"w\") as data_file:\n",
    "    for feed in newsfeeds:\n",
    "        line = json.dumps(feed)\n",
    "        data_file.write(line)\n",
    "        data_file.write(\"\\n\")\n",
    "        \n",
    "import pandas as pd\n",
    "df = pd.read_json ('webhose_cvs_clean.json', lines = True)\n",
    "df.to_csv (r'cvs_articles.csv', index = None)\n",
    "\n",
    "df1 = pd.read_csv('cvs_articles.csv')\n",
    "\n",
    "for col in df1.columns: \n",
    "    print(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3947\n"
     ]
    }
   ],
   "source": [
    "#Read the JSON file back into Python array of JSON objects and confirm the count\n",
    "json_data=open(\"webhose_cvs_clean.json\").readlines()\n",
    "newsfeeds_read = []\n",
    "for line in json_data:\n",
    "    newsfeeds_read.append(json.loads(line))\n",
    "print(len(newsfeeds_read))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'thread': {'uuid': 'ecffb30d92280a276af76d40712a65a86d159936',\n",
       "  'url': 'https://www.thecouponingcouple.com/academy-sports-ad-11-15-20/',\n",
       "  'site_full': 'www.thecouponingcouple.com',\n",
       "  'site': 'thecouponingcouple.com',\n",
       "  'site_section': 'http://www.thecouponingcouple.com/feed',\n",
       "  'site_categories': ['couponing', 'shopping'],\n",
       "  'section_title': 'The Couponing Couple',\n",
       "  'title': 'Academy Sports Ad (11/15/20 – 11/21/20): Academy Sports Weekly Ad Preview',\n",
       "  'title_full': 'Academy Sports Ad (11/15/20 – 11/21/20): Academy Sports Weekly Ad Preview',\n",
       "  'published': '2020-11-13T04:03:00.000+02:00',\n",
       "  'replies_count': 0,\n",
       "  'participants_count': 1,\n",
       "  'site_type': 'blogs',\n",
       "  'country': 'US',\n",
       "  'spam_score': 0.0,\n",
       "  'main_image': 'https://www.thecouponingcouple.com/wp-content/uploads/2020/11/Academy-Sports-Ad-111520.jpg',\n",
       "  'performance_score': 0,\n",
       "  'domain_rank': None,\n",
       "  'reach': None,\n",
       "  'social': {'facebook': {'likes': 0, 'comments': 0, 'shares': 0},\n",
       "   'gplus': {'shares': 0},\n",
       "   'pinterest': {'shares': 0},\n",
       "   'linkedin': {'shares': 0},\n",
       "   'stumbledupon': {'shares': 0},\n",
       "   'vk': {'shares': 0}}},\n",
       " 'uuid': 'ecffb30d92280a276af76d40712a65a86d159936',\n",
       " 'url': 'https://www.thecouponingcouple.com/academy-sports-ad-11-15-20/',\n",
       " 'ord_in_thread': 0,\n",
       " 'parent_url': None,\n",
       " 'author': 'TCC-Jessica',\n",
       " 'published': '2020-11-13T04:03:00.000+02:00',\n",
       " 'title': 'Academy Sports Ad (11/15/20 – 11/21/20): Academy Sports Weekly Ad Preview',\n",
       " 'text': 'A Couple that Coupons Together Stays Together Academy Sports Ad (11/15/20 – 11/21/20): Academy Sports Weekly Ad Preview November 12, 2020 Misc Weekly Ad Previews All posts may contain affiliate links. Read our disclosure policy here .\\nHere is the upcoming ✅ Academy Sports Ad 11/15/20 – 11/21/20! View the pages of the 11/15 ✅ Academy Sports Weekly Ad Preview for next week and this week! Make sure you check out all the other Weekly Ad Preview scans we have posted! BROWSE all the pages of the Academy Sports Ad Scan for 11/15/20 – 11/21/20 BELOW!\\nYou can also browse these other 11/15 ads: Target Ad Preview , CVS Ad Preview , Walgreens Ad Preview , and the Rite Aid Ad Preview ! Be sure and check out all of the other Weekly Ad Previews for many more great stores! Academy Sports Ad 11/15/20 – 11/21/20\\nJust use the NEXT and PREV arrows at the BOTTOM of the PAGE to scroll through all the Pages of the Academy Sports Weekly Ad Preview! Prev 1 of 13 Next',\n",
       " 'highlightText': '',\n",
       " 'highlightTitle': '',\n",
       " 'highlightThreadTitle': '',\n",
       " 'language': 'english',\n",
       " 'external_links': [],\n",
       " 'external_images': [],\n",
       " 'entities': {'persons': [],\n",
       "  'organizations': [{'name': 'cvs', 'sentiment': 'none'},\n",
       "   {'name': 'walgreens', 'sentiment': 'none'}],\n",
       "  'locations': []},\n",
       " 'rating': None,\n",
       " 'crawled': '2020-11-13T05:26:44.005+02:00',\n",
       " 'updated': '2020-11-13T05:26:44.005+02:00'}"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newsfeeds_read[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVS Health Co. (NYSE:CVS) Shares Purchased by Signet Financial Management LLC\n",
      "https://rocklandregister.com/2020/11/12/cvs-health-co-nysecvs-shares-purchased-by-signet-financial-management-llc.html\n",
      "2020-11-13T04:08:00.000+02:00\n"
     ]
    }
   ],
   "source": [
    "for feed in newsfeeds_read:\n",
    "    print(feed['title'])\n",
    "    print(feed['url'])\n",
    "    print(feed['published'])\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3947\n"
     ]
    }
   ],
   "source": [
    "#open dedup json data and validate number of elements in list\n",
    "json_data=open(\"webhose_cvs_clean.json\").readlines()\n",
    "newsfeeds_read = []\n",
    "for line in json_data:\n",
    "    newsfeeds_read.append(json.loads(line))\n",
    "print(len(newsfeeds_read))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: print_schema in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (1.1.1)\n",
      "Requirement already satisfied: requests in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from print_schema) (2.24.0)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (1.25.9)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (2020.6.20)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (2.10)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from requests->print_schema) (3.0.4)\n",
      "|-  list \t - list [18893] <class 'dict'>\n",
      "   |- thread\t - <class 'dict'>\n",
      "      |- uuid\t - <class 'str'>\n",
      "      |- url\t - <class 'str'>\n",
      "      |- site_full\t - <class 'str'>\n",
      "      |- site\t - <class 'str'>\n",
      "      |- site_section\t - <class 'str'>\n",
      "      |- site_categories\t - list [4] <class 'str'>\n",
      "      |- section_title\t - <class 'str'>\n",
      "      |- title\t - <class 'str'>\n",
      "      |- title_full\t - <class 'str'>\n",
      "      |- published\t - <class 'str'>\n",
      "      |- replies_count\t - <class 'int'>\n",
      "      |- participants_count\t - <class 'int'>\n",
      "      |- site_type\t - <class 'str'>\n",
      "      |- country\t - <class 'str'>\n",
      "      |- spam_score\t - <class 'float'>\n",
      "      |- main_image\t - <class 'str'>\n",
      "      |- performance_score\t - <class 'int'>\n",
      "      |- domain_rank\t - <class 'int'>\n",
      "      |- reach\t - <class 'dict'>\n",
      "         |- per_million\t - <class 'float'>\n",
      "         |- page_views\t - <class 'dict'>\n",
      "            |- per_million\t - <class 'float'>\n",
      "            |- per_user\t - <class 'float'>\n",
      "         |- updated\t - <class 'str'>\n",
      "      |- social\t - <class 'dict'>\n",
      "         |- facebook\t - <class 'dict'>\n",
      "            |- likes\t - <class 'int'>\n",
      "            |- comments\t - <class 'int'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- gplus\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- pinterest\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- linkedin\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- stumbledupon\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "         |- vk\t - <class 'dict'>\n",
      "            |- shares\t - <class 'int'>\n",
      "   |- uuid\t - <class 'str'>\n",
      "   |- url\t - <class 'str'>\n",
      "   |- ord_in_thread\t - <class 'int'>\n",
      "Not supported\n",
      "   |- author\t - <class 'str'>\n",
      "   |- published\t - <class 'str'>\n",
      "   |- title\t - <class 'str'>\n",
      "   |- text\t - <class 'str'>\n",
      "   |- highlightText\t - <class 'str'>\n",
      "   |- highlightTitle\t - <class 'str'>\n",
      "   |- highlightThreadTitle\t - <class 'str'>\n",
      "   |- language\t - <class 'str'>\n",
      "   |- external_links\t - list [22] <class 'str'>\n",
      "   |- external_images\t - list [0] <empty list>\n",
      "   |- entities\t - <class 'dict'>\n",
      "      |- persons\t - list [5] <class 'dict'>\n",
      "         |- name\t - <class 'str'>\n",
      "         |- sentiment\t - <class 'str'>\n",
      "      |- organizations\t - list [2] <class 'dict'>\n",
      "         |- name\t - <class 'str'>\n",
      "         |- sentiment\t - <class 'str'>\n",
      "      |- locations\t - list [0] <empty list>\n",
      "Not supported\n",
      "   |- crawled\t - <class 'str'>\n",
      "   |- updated\t - <class 'str'>\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "!pip install print_schema\n",
    "from print_schema import print_schema\n",
    "my_dict = newsfeeds_read\n",
    "print_schema(my_dict, indent=3, dense=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CEO of A Resume Building Agency Announced Readiness to Help People Land Their Dream Jobs November 13 Share it With Friends The CEO Made This Announcement on The Google Meet with Many Online Participants The CEO of Resumebuild , a company saddled with the responsibility of helping people land their dream jobs by providing them with an impeccable Resume, announced an improvement to its services. Having seen the way most job seekers struggle to get their dream jobs due to their inability to make an impressive and convincing first impression on their employers through a resume, it is expedient to lay a helping hand. Writing a Resume requires some level of technicalities, good command of English grammar, and more. Employers are looking for those whose confidence, capabilities and honesty will reflect in their CVs and Resumes. To assist with this, the CEO stated the finest approach to remedy the situation. The meeting commenced with an opening speech by the CEO, who started by saluting the members in attendance, saying, “Welcome aboard our esteemed client, we assure you a memorable experience in today’s online meeting. We are the leading resume build agency with the latest improved technology for creating an impeccable, convincing, and comprehensive resume. The first thing about a resume is to know the things to include. A professional summary is your opportunity to make a lasting first impression on your prospective employer. So, we pay attention to details to make sure that we create something unique to your skills, employment history, education, and more. We have a list of resume templates in all industries and fields and ready to customize them to individual needs. “A Resume is your first opportunity to speak directly to your employer and explain who you are, why you are the best fit for the job, and the reasons the employer should consider you for the job. So, it requires attention to detail. We aim to see you get the job of your dream with our resume, and our agency has employed technology improved tools to make resume building easy and impeccable,” a staff member added. The meeting attracted the attention of many people, including those that have tried and failed in their writing resume. A happy participant showed​​ optimism in the information released by the CEO and said, “I tried many times to get my dream job and failed until a friend told me about resumebuild.com , where I got the resume template that helped me to get my dream job. The announcement of the CEO to make service better will enhance the chances of more people to get the job of their dreams without wasting time. “Sitting down in the comfort of my home to listen to the CEO discuss how I can make my resume better through a professional summary has ignited hopes in my ability to get a job of my dream. Now I will go ahead and spread the news to all and sundress who need a job to take advantage of the service of this company,” added by another client. There is a required standard to resume building, which most people do not know. But, with the template provided by the resume building agency, there is the hope of getting it right this time. To learn more about this agency and its templates, check https://resumebuild.com . Media Contact\n"
     ]
    }
   ],
   "source": [
    "text = newsfeeds_read[420]['text']\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc = pyspark.SparkContext()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0.1\n"
     ]
    }
   ],
   "source": [
    "# check if spark context is defined\n",
    "print(sc.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:75: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# importing some libraries\n",
    "import pandas as pd\n",
    "import pyspark\n",
    "from pyspark.sql import SQLContext\n",
    "sqlContext = SQLContext(sc)\n",
    "# stuff we'll need for text processing\n",
    "from nltk.corpus import stopwords\n",
    "import re as re\n",
    "from pyspark.ml.feature import CountVectorizer , IDF\n",
    "# stuff we'll need for building the model\n",
    "\n",
    "from pyspark.mllib.linalg import Vector, Vectors\n",
    "from pyspark.mllib.clustering import LDA, LDAModel\n",
    "from nltk.stem.wordnet import WordNetLemmatizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading the data\n",
    "data = sqlContext.read.json(\"webhose_cvs_clean.json\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:75: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+\n",
      "|               title|\n",
      "+--------------------+\n",
      "|Dateline Rice for...|\n",
      "|Cash App Debit Ca...|\n",
      "|Theft of pills fr...|\n",
      "|Tide Pods Deal at...|\n",
      "|Top Guidelines Of...|\n",
      "|*HOT* Spend $20 a...|\n",
      "|50% off Shipt Mem...|\n",
      "|CVS Health (NYSE:...|\n",
      "|FREE $20 to Spend...|\n",
      "|Creative Planning...|\n",
      "|Grocery pharmacie...|\n",
      "|49 years on the l...|\n",
      "|How Much You Need...|\n",
      "|CVS Health (NYSE:...|\n",
      "|Sunshine Retireme...|\n",
      "|FREE $20 Order fr...|\n",
      "|Costco will requi...|\n",
      "|Kansas FBI offeri...|\n",
      "|Hayden Royal LLC ...|\n",
      "|Convicted Killer ...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|              ngrams|\n",
      "+--------------------+\n",
      "|[D a t, a t e, t ...|\n",
      "|[C a s, a s h, s ...|\n",
      "|[T h e, h e f, e ...|\n",
      "|[T i d, i d e, d ...|\n",
      "|[T o p, o p  , p ...|\n",
      "|[* H O, H O T, O ...|\n",
      "|[5 0 %, 0 %  , % ...|\n",
      "|[C V S, V S  , S ...|\n",
      "|[F R E, R E E, E ...|\n",
      "|[C r e, r e a, e ...|\n",
      "|[G r o, r o c, o ...|\n",
      "|[4 9  , 9   y,   ...|\n",
      "|[H o w, o w  , w ...|\n",
      "|[C V S, V S  , S ...|\n",
      "|[S u n, u n s, n ...|\n",
      "|[F R E, R E E, E ...|\n",
      "|[C o s, o s t, s ...|\n",
      "|[K a n, a n s, n ...|\n",
      "|[H a y, a y d, y ...|\n",
      "|[C o n, o n v, n ...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|              vector|\n",
      "+--------------------+\n",
      "|(12292,[7,15,24,3...|\n",
      "|(12292,[0,4,10,15...|\n",
      "|(12292,[0,4,8,10,...|\n",
      "|(12292,[0,4,10,12...|\n",
      "|(12292,[1,7,19,88...|\n",
      "|(12292,[0,10,29,6...|\n",
      "|(12292,[39,40,51,...|\n",
      "|(12292,[0,1,2,4,9...|\n",
      "|(12292,[0,4,8,10,...|\n",
      "|(12292,[0,1,2,4,5...|\n",
      "|(12292,[1,7,8,11,...|\n",
      "|(12292,[3,6,13,18...|\n",
      "|(12292,[15,19,40,...|\n",
      "|(12292,[0,1,2,4,1...|\n",
      "|(12292,[1,2,3,5,6...|\n",
      "|(12292,[0,4,10,13...|\n",
      "|(12292,[2,5,8,9,1...|\n",
      "|(12292,[2,3,5,9,1...|\n",
      "|(12292,[0,1,4,6,1...|\n",
      "|(12292,[13,15,18,...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+\n",
      "|             minHash|\n",
      "+--------------------+\n",
      "|[[7.6913635E7], [...|\n",
      "|[[1.10224977E8], ...|\n",
      "|[[6.9987691E7], [...|\n",
      "|[[2.8432027E7], [...|\n",
      "|[[4025187.0], [1....|\n",
      "|[[6828970.0], [6....|\n",
      "|[[3.5192926E7], [...|\n",
      "|[[6498880.0], [1....|\n",
      "|[[6.652571E7], [6...|\n",
      "|[[4190232.0], [2....|\n",
      "|[[1.5733472E7], [...|\n",
      "|[[3.9810222E7], [...|\n",
      "|[[4850412.0], [2....|\n",
      "|[[1.28694161E8], ...|\n",
      "|[[68071.0], [2221...|\n",
      "|[[6.9987691E7], [...|\n",
      "|[[4520322.0], [1....|\n",
      "|[[8149330.0], [2....|\n",
      "|[[3.9645177E7], [...|\n",
      "|[[2.7606802E7], [...|\n",
      "+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages/pyspark/sql/context.py:117: DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+--------------------+----------------+\n",
      "|            datasetA|            datasetB|jaccard_distance|\n",
      "+--------------------+--------------------+----------------+\n",
      "|[3136, Dr. Thorne...|[3136, Dr. Thorne...|             0.0|\n",
      "|[783, Indexes Sta...|[783, Indexes Sta...|             0.0|\n",
      "|[300, Amazon Name...|[300, Amazon Name...|             0.0|\n",
      "|[344, Amazon Name...|[300, Amazon Name...|             0.0|\n",
      "|[2125, The Boulde...|[2144, The Boulde...|             0.0|\n",
      "|[437, Amazon laun...|[1056, Amazon lau...|             0.0|\n",
      "|[661, Amazon laun...|[516, Amazon laun...|             0.0|\n",
      "|[3321, Fears and ...|[3375, Fears and ...|             0.0|\n",
      "|[3338, Fears and ...|[3391, Fears and ...|             0.0|\n",
      "|[3357, Fears and ...|[3464, Fears and ...|             0.0|\n",
      "|[3371, Fears and ...|[3395, Fears and ...|             0.0|\n",
      "|[3374, Fears and ...|[3338, Fears and ...|             0.0|\n",
      "|[3385, Fears and ...|[3444, Fears and ...|             0.0|\n",
      "|[3427, Fears and ...|[3317, Fears and ...|             0.0|\n",
      "|[3427, Fears and ...|[3415, Fears and ...|             0.0|\n",
      "|[2592, CVS Ad & C...|[2592, CVS Ad & C...|             0.0|\n",
      "|[3630, Coin Cloud...|[3630, Coin Cloud...|             0.0|\n",
      "|[407, Amazon laun...|[340, Amazon laun...|             0.0|\n",
      "|[518, Amazon laun...|[347, Amazon laun...|             0.0|\n",
      "|[2519, Last Day T...|[2519, Last Day T...|             0.0|\n",
      "+--------------------+--------------------+----------------+\n",
      "only showing top 20 rows\n",
      "\n",
      "+--------------------+--------------------+\n",
      "|               title|               title|\n",
      "+--------------------+--------------------+\n",
      "|Truvestments Capi...|Truvestments Capi...|\n",
      "+--------------------+--------------------+\n",
      "\n",
      "+--------------------+------------------------+\n",
      "|               title|min(datasetA.id AS `id`)|\n",
      "+--------------------+------------------------+\n",
      "|Healthwarehouse.c...|                     811|\n",
      "|Man shot dead in ...|                    2684|\n",
      "|The Basic Princip...|                    1826|\n",
      "|Just when he thou...|                     281|\n",
      "|CVS Health (NYSE:...|                    1512|\n",
      "|Conair Styling To...|                    2248|\n",
      "|Sells 449 Shares ...|                    2645|\n",
      "|Security Guard Sh...|                    2695|\n",
      "|Amazon Pharmacy i...|                     545|\n",
      "|Not known Details...|                    1284|\n",
      "|Spiky | Tiny flow...|                    1388|\n",
      "|I am off the cloc...|                    1686|\n",
      "|  Privacy Policy CLP|                     952|\n",
      "|Annie’s Mac & Che...|                    3682|\n",
      "|Cuomo threatens t...|                     244|\n",
      "|Irish Spring & So...|                    3032|\n",
      "|NIVEA Body Wash O...|                    2223|\n",
      "|L.A. Colors & Wet...|                    3007|\n",
      "|Drugstore Stocks ...|                     461|\n",
      "|Not known Details...|                     126|\n",
      "+--------------------+------------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(3043, 3854, 3044)"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Deduplicating\n",
    "from pyspark import SparkContext\n",
    "from pyspark.sql import SparkSession\n",
    "spark = SparkSession(sc)\n",
    "df = spark.createDataFrame([\n",
    "    (k, t, list(t)) for k, t in enumerate(feed_titles) if len(list(t)) >=3],\n",
    "    ['id', 'title', 'title_characters'])\n",
    "df.select('title').show()\n",
    "\n",
    "from pyspark.ml.feature import NGram\n",
    "ngram = NGram(n=3, inputCol='title_characters', outputCol='ngrams')\n",
    "ngram_df = ngram.transform(df)\n",
    "ngram_df.select('ngrams').show()\n",
    "\n",
    "from pyspark.ml.feature import CountVectorizer \n",
    "count_vectorizer = CountVectorizer(inputCol='ngrams', outputCol='vector', binary=True)\n",
    "model = count_vectorizer.fit(ngram_df)\n",
    "cv_df = model.transform(ngram_df)\n",
    "\n",
    "cv_df.select('vector').show()\n",
    "\n",
    "from pyspark.ml.feature import MinHashLSH\n",
    "min_hash = MinHashLSH(inputCol='vector', outputCol='minHash', seed=0, numHashTables=10)\n",
    "model = min_hash.fit(cv_df)\n",
    "hash_df = model.transform(cv_df)\n",
    "hash_df.select('minHash').show()\n",
    "\n",
    "joined_rows = model.approxSimilarityJoin(cv_df, cv_df, threshold=0.05, distCol='jaccard_distance')\n",
    "joined_rows.show()\n",
    "\n",
    "from pyspark.sql.functions import col\n",
    "joined_rows.filter(joined_rows.datasetA.id == 2211).select(col('datasetA.title'), col('datasetB.title')).show()\n",
    "\n",
    "deduplicated_df = joined_rows.groupby(col('datasetA.title')).min('datasetA.id')\n",
    "deduplicated_df.show()\n",
    "\n",
    "deduplicated_titles = deduplicated_df.toPandas()['title']\n",
    "\n",
    "len(deduplicated_titles), len(feed_titles), len(set(feed_titles))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "descriptions = data.rdd.map(lambda x : x['text']).filter(lambda x: x is not None)\n",
    "StopWords = stopwords.words(\"english\")\n",
    "lmtzr = WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokens = descriptions.map( lambda document: document.strip().lower())               \\\n",
    "    .map( lambda document: re.split(\" \", document))          \\\n",
    "    .map( lambda word: [x for x in word if x.isalpha()])           \\\n",
    "    .map( lambda word: [x for x in word if len(x) > 3] )           \\\n",
    "    .map( lambda word: [x for x in word if x not in StopWords])    \\\n",
    "    .map( lambda word: [lmtzr.lemmatize(x,'v') for x in word]) \\\n",
    "    .zipWithIndex()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_txts = sqlContext.createDataFrame(tokens, [\"list_of_words\",'index'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+\n",
      "|       list_of_words|index|\n",
      "+--------------------+-----+\n",
      "|[signet, financia...|    0|\n",
      "|[couple, coupons,...|    1|\n",
      "|[best, sales, thr...|    2|\n",
      "|[health, operator...|    3|\n",
      "|[update, november...|    4|\n",
      "|[janney, capital,...|    5|\n",
      "|[twin, capital, m...|    6|\n",
      "|[department, heal...|    7|\n",
      "|[twin, capital, m...|    8|\n",
      "|[playstation, go,...|    9|\n",
      "|[passionate, love...|   10|\n",
      "|[parent, company,...|   11|\n",
      "|[say, number, pha...|   12|\n",
      "|[parent, company,...|   13|\n",
      "|[previous, next, ...|   14|\n",
      "|[brick, associate...|   15|\n",
      "|[cantor, fitzgera...|   16|\n",
      "|[janney, montgome...|   17|\n",
      "|[health, give, pr...|   18|\n",
      "|[cantor, fitzgera...|   19|\n",
      "+--------------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_txts.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TF\n",
    "cv = CountVectorizer(inputCol=\"list_of_words\", outputCol=\"raw_features\", vocabSize=5000, minDF=50.0, maxDF = 500)\n",
    "cvmodel = cv.fit(df_txts)\n",
    "result_cv = cvmodel.transform(df_txts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IDF\n",
    "idf = IDF(inputCol=\"raw_features\", outputCol=\"features\")\n",
    "idfModel = idf.fit(result_cv)\n",
    "result_tfidf = idfModel.transform(result_cv) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+--------------------+--------------------+\n",
      "|       list_of_words|index|        raw_features|            features|\n",
      "+--------------------+-----+--------------------+--------------------+\n",
      "|[signet, financia...|    0|(1692,[0,9,18,20,...|(1692,[0,9,18,20,...|\n",
      "|[couple, coupons,...|    1|(1692,[111,124,14...|(1692,[111,124,14...|\n",
      "|[best, sales, thr...|    2|(1692,[1,15,33,40...|(1692,[1,15,33,40...|\n",
      "|[health, operator...|    3|(1692,[11,24,52,5...|(1692,[11,24,52,5...|\n",
      "|[update, november...|    4|(1692,[47,97,192,...|(1692,[47,97,192,...|\n",
      "|[janney, capital,...|    5|(1692,[2,9,18,22,...|(1692,[2,9,18,22,...|\n",
      "|[twin, capital, m...|    6|(1692,[0,2,9,10,1...|(1692,[0,2,9,10,1...|\n",
      "|[department, heal...|    7|(1692,[23,29,31,3...|(1692,[23,29,31,3...|\n",
      "|[twin, capital, m...|    8|(1692,[0,2,9,10,2...|(1692,[0,2,9,10,2...|\n",
      "|[playstation, go,...|    9|(1692,[133,152,22...|(1692,[133,152,22...|\n",
      "|[passionate, love...|   10|(1692,[11,22,47,6...|(1692,[11,22,47,6...|\n",
      "|[parent, company,...|   11|(1692,[24,57,85,1...|(1692,[24,57,85,1...|\n",
      "|[say, number, pha...|   12|(1692,[27,30,41,4...|(1692,[27,30,41,4...|\n",
      "|[parent, company,...|   13|(1692,[24,57,85,1...|(1692,[24,57,85,1...|\n",
      "|[previous, next, ...|   14|(1692,[3,7,23,29,...|(1692,[3,7,23,29,...|\n",
      "|[brick, associate...|   15|(1692,[4,11,16,23...|(1692,[4,11,16,23...|\n",
      "|[cantor, fitzgera...|   16|(1692,[0,9,10,20,...|(1692,[0,9,10,20,...|\n",
      "|[janney, montgome...|   17|(1692,[9,18,22,26...|(1692,[9,18,22,26...|\n",
      "|[health, give, pr...|   18|(1692,[0,9,10,18,...|(1692,[0,9,10,18,...|\n",
      "|[cantor, fitzgera...|   19|(1692,[0,9,10,20,...|(1692,[0,9,10,20,...|\n",
      "+--------------------+-----+--------------------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "result_tfidf.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ipython==7.10.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (7.10.0)\n",
      "Requirement already satisfied: pickleshare in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.7.5)\n",
      "Requirement already satisfied: decorator in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.4.2)\n",
      "Requirement already satisfied: appnope; sys_platform == \"darwin\" in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.1.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.17.1)\n",
      "Requirement already satisfied: traitlets>=4.2 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.3.3)\n",
      "Requirement already satisfied: setuptools>=18.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (49.2.0.post20200714)\n",
      "Requirement already satisfied: backcall in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (0.2.0)\n",
      "Requirement already satisfied: pygments in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (2.6.1)\n",
      "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (4.8.0)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=2.0.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from ipython==7.10.0) (3.0.5)\n",
      "Requirement already satisfied: parso<0.8.0,>=0.7.0 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from jedi>=0.10->ipython==7.10.0) (0.7.0)\n",
      "Requirement already satisfied: ipython-genutils in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from traitlets>=4.2->ipython==7.10.0) (0.2.0)\n",
      "Requirement already satisfied: six in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from traitlets>=4.2->ipython==7.10.0) (1.15.0)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from pexpect; sys_platform != \"win32\"->ipython==7.10.0) (0.6.0)\n",
      "Requirement already satisfied: wcwidth in /Users/javierlasa/opt/anaconda3/lib/python3.8/site-packages (from prompt-toolkit<3.1.0,>=2.0.0->ipython==7.10.0) (0.2.5)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/javierlasa/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "!pip install ipython==7.10.0\n",
    "import gensim\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "import pyLDAvis\n",
    "import pyLDAvis.sklearn\n",
    "pyLDAvis.enable_notebook()\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "stopwords = set(nltk.corpus.stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize_titles(title):\n",
    "    tokens = nltk.word_tokenize(title)\n",
    "    lmtzr = WordNetLemmatizer()\n",
    "    filtered_tokens = []\n",
    "    for token in tokens:\n",
    "        token = token.replace(\"'s\", \" \").replace(\"n’t\", \" not\").replace(\"’ve\", \" have\")\n",
    "        token = re.sub(r'[^a-zA-Z0-9 ]', '', token)\n",
    "        if token not in stopwords:\n",
    "            filtered_tokens.append(token.lower())\n",
    "    lemmas = [lmtzr.lemmatize(t,'v') for t in filtered_tokens]\n",
    "    return lemmas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3043, 144)\n"
     ]
    }
   ],
   "source": [
    "tf_vectorizer = CountVectorizer(strip_accents = 'unicode',\n",
    "                                stop_words = 'english',\n",
    "                                lowercase = True,\n",
    "                                tokenizer=tokenize_titles,\n",
    "                                max_features=500,\n",
    "                                token_pattern = r'\\\\b[a-zA-Z]{3,}\\\\b',\n",
    "                                max_df = .3, \n",
    "                                min_df = .005,\n",
    "                                ngram_range=(2,4))\n",
    "dtm_tf = tf_vectorizer.fit_transform(deduplicated_titles)\n",
    "print(dtm_tf.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time to train LDA344.54969596862793\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "from gensim.models.ldamodel import LdaModel\n",
    "import gensim.corpora as corpora\n",
    "from gensim.test.utils import common_corpus, common_dictionary\n",
    "\n",
    "num_topics = 30\n",
    "max_iterations = 100\n",
    "start = time.time()\n",
    "lda_model = LDA.train(result_tfidf.select('index','features').rdd.mapValues(Vectors.fromML).map(list), k=num_topics, maxIterations=max_iterations)\n",
    "print(\"Time to train LDA\" + str(time.time() - start))\n",
    "\n",
    "model = LdaModel(common_corpus, 10, common_dictionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic cluster:  0\n",
      "coupon\n",
      "limit\n",
      "body\n",
      "printable\n",
      "ibotta\n",
      "extrabucks\n",
      "colgate\n",
      "coupons\n",
      "hair\n",
      "crest\n",
      "wash\n",
      "gift\n",
      "toothpaste\n",
      "dive\n",
      "product\n",
      "Topic cluster:  1\n",
      "county\n",
      "city\n",
      "covid\n",
      "call\n",
      "hospital\n",
      "virus\n",
      "drive\n",
      "appointment\n",
      "travel\n",
      "sit\n",
      "park\n",
      "texas\n",
      "west\n",
      "contact\n",
      "appointments\n",
      "Topic cluster:  2\n",
      "capital\n",
      "raise\n",
      "simple\n",
      "corporation\n",
      "currently\n",
      "investors\n",
      "associate\n",
      "strategies\n",
      "corporate\n",
      "commission\n",
      "period\n",
      "previous\n",
      "comment\n",
      "month\n",
      "roosevelt\n",
      "Topic cluster:  3\n",
      "transit\n",
      "commute\n",
      "rid\n",
      "board\n",
      "lot\n",
      "transportation\n",
      "porter\n",
      "subway\n",
      "traffic\n",
      "bus\n",
      "cars\n",
      "crowd\n",
      "university\n",
      "pandemic\n",
      "fear\n",
      "Topic cluster:  4\n",
      "school\n",
      "social\n",
      "december\n",
      "early\n",
      "face\n",
      "safety\n",
      "wear\n",
      "mask\n",
      "update\n",
      "washington\n",
      "others\n",
      "everyone\n",
      "stop\n",
      "businesses\n",
      "pandemic\n",
      "Topic cluster:  5\n",
      "ask\n",
      "question\n",
      "answer\n",
      "manager\n",
      "write\n",
      "court\n",
      "food\n",
      "clean\n",
      "never\n",
      "package\n",
      "local\n",
      "pharmacist\n",
      "claim\n",
      "tell\n",
      "sample\n",
      "Topic cluster:  6\n",
      "print\n",
      "photo\n",
      "image\n",
      "google\n",
      "photos\n",
      "paper\n",
      "search\n",
      "alert\n",
      "picture\n",
      "wall\n",
      "label\n",
      "version\n",
      "view\n",
      "fee\n",
      "update\n",
      "Topic cluster:  7\n",
      "really\n",
      "christmas\n",
      "love\n",
      "feel\n",
      "little\n",
      "good\n",
      "something\n",
      "things\n",
      "pretty\n",
      "small\n",
      "tell\n",
      "watch\n",
      "try\n",
      "away\n",
      "always\n",
      "Topic cluster:  8\n",
      "black\n",
      "thanksgiving\n",
      "friday\n",
      "holiday\n",
      "shop\n",
      "pizza\n",
      "close\n",
      "hours\n",
      "toilet\n",
      "annual\n",
      "restaurants\n",
      "food\n",
      "restaurant\n",
      "sport\n",
      "amid\n",
      "Topic cluster:  9\n",
      "black\n",
      "police\n",
      "women\n",
      "students\n",
      "college\n",
      "suspect\n",
      "block\n",
      "arrest\n",
      "education\n",
      "series\n",
      "award\n",
      "future\n",
      "gold\n",
      "travel\n",
      "woman\n",
      "Topic cluster:  10\n",
      "cookies\n",
      "privacy\n",
      "personal\n",
      "collect\n",
      "site\n",
      "content\n",
      "months\n",
      "nine\n",
      "theme\n",
      "compensate\n",
      "website\n",
      "save\n",
      "flow\n",
      "publish\n",
      "cookie\n",
      "Topic cluster:  11\n",
      "ratio\n",
      "dividend\n",
      "stake\n",
      "consensus\n",
      "institutional\n",
      "lift\n",
      "hedge\n",
      "quarterly\n",
      "august\n",
      "transaction\n",
      "firm\n",
      "objective\n",
      "october\n",
      "analysts\n",
      "boost\n",
      "Topic cluster:  12\n",
      "consumers\n",
      "tuesday\n",
      "percent\n",
      "discount\n",
      "chain\n",
      "customers\n",
      "prescription\n",
      "drugstore\n",
      "drugstores\n",
      "industry\n",
      "digital\n",
      "tech\n",
      "launch\n",
      "prime\n",
      "insurance\n",
      "Topic cluster:  13\n",
      "rite\n",
      "walmart\n",
      "prime\n",
      "competition\n",
      "acquisition\n",
      "retailers\n",
      "club\n",
      "license\n",
      "boot\n",
      "separate\n",
      "customers\n",
      "discount\n",
      "launch\n",
      "let\n",
      "kroger\n",
      "Topic cluster:  14\n",
      "hire\n",
      "ohio\n",
      "phase\n",
      "workers\n",
      "weeks\n",
      "shipment\n",
      "hospital\n",
      "pfizer\n",
      "department\n",
      "hospitals\n",
      "initial\n",
      "shipments\n",
      "technicians\n",
      "distribution\n",
      "departments\n",
      "Topic cluster:  15\n",
      "prescription\n",
      "insurance\n",
      "medication\n",
      "patients\n",
      "medicine\n",
      "medications\n",
      "save\n",
      "prime\n",
      "prescriptions\n",
      "treatment\n",
      "antibody\n",
      "delivery\n",
      "customers\n",
      "shoppers\n",
      "generic\n",
      "Topic cluster:  16\n",
      "delivery\n",
      "gain\n",
      "laundry\n",
      "cost\n",
      "common\n",
      "launch\n",
      "retailer\n",
      "blue\n",
      "promise\n",
      "liquid\n",
      "pressure\n",
      "industry\n",
      "affect\n",
      "exclude\n",
      "adviser\n",
      "Topic cluster:  17\n",
      "trump\n",
      "florida\n",
      "desantis\n",
      "pfizer\n",
      "emergency\n",
      "administration\n",
      "government\n",
      "vote\n",
      "video\n",
      "governor\n",
      "authorization\n",
      "december\n",
      "thursday\n",
      "distribution\n",
      "white\n",
      "Topic cluster:  18\n",
      "knowledge\n",
      "tool\n",
      "support\n",
      "application\n",
      "development\n",
      "skills\n",
      "load\n",
      "opportunity\n",
      "provision\n",
      "advantage\n",
      "computer\n",
      "script\n",
      "court\n",
      "automate\n",
      "disability\n",
      "Topic cluster:  19\n",
      "nembutal\n",
      "quality\n",
      "reply\n",
      "leave\n",
      "obtain\n",
      "blog\n",
      "utilize\n",
      "phenobarbital\n",
      "software\n",
      "present\n",
      "near\n",
      "possibly\n",
      "however\n",
      "field\n",
      "particular\n",
      "Topic cluster:  20\n",
      "portfolio\n",
      "impact\n",
      "initiate\n",
      "ishares\n",
      "corp\n",
      "trust\n",
      "capital\n",
      "asset\n",
      "spdr\n",
      "vanguard\n",
      "wealth\n",
      "financial\n",
      "bond\n",
      "aapl\n",
      "msft\n",
      "Topic cluster:  21\n",
      "preview\n",
      "weekly\n",
      "hemp\n",
      "study\n",
      "effect\n",
      "slide\n",
      "pain\n",
      "cannabis\n",
      "page\n",
      "side\n",
      "cause\n",
      "contain\n",
      "skin\n",
      "product\n",
      "supplement\n",
      "Topic cluster:  22\n",
      "wealth\n",
      "office\n",
      "family\n",
      "advisors\n",
      "ellis\n",
      "liberty\n",
      "quarter\n",
      "financial\n",
      "approximately\n",
      "second\n",
      "hoover\n",
      "daily\n",
      "latest\n",
      "keebeck\n",
      "note\n",
      "Topic cluster:  23\n",
      "property\n",
      "invest\n",
      "street\n",
      "rate\n",
      "private\n",
      "biden\n",
      "real\n",
      "fire\n",
      "four\n",
      "bill\n",
      "large\n",
      "house\n",
      "remain\n",
      "single\n",
      "locate\n",
      "Topic cluster:  24\n",
      "media\n",
      "brand\n",
      "digital\n",
      "healthcare\n",
      "advertise\n",
      "wellness\n",
      "consumer\n",
      "lead\n",
      "aetna\n",
      "build\n",
      "serve\n",
      "platform\n",
      "join\n",
      "role\n",
      "board\n",
      "Topic cluster:  25\n",
      "facilities\n",
      "residents\n",
      "nurse\n",
      "staff\n",
      "vaccinate\n",
      "vaccination\n",
      "program\n",
      "distribute\n",
      "live\n",
      "workers\n",
      "shots\n",
      "facility\n",
      "officials\n",
      "partnership\n",
      "priority\n",
      "Topic cluster:  26\n",
      "note\n",
      "daily\n",
      "morgan\n",
      "stanley\n",
      "latest\n",
      "system\n",
      "blackrock\n",
      "retirement\n",
      "nordea\n",
      "beyond\n",
      "michigan\n",
      "second\n",
      "date\n",
      "enter\n",
      "insider\n",
      "Topic cluster:  27\n",
      "paypal\n",
      "card\n",
      "gift\n",
      "money\n",
      "cash\n",
      "account\n",
      "click\n",
      "cod\n",
      "payment\n",
      "code\n",
      "game\n",
      "reward\n",
      "payments\n",
      "credit\n",
      "link\n",
      "Topic cluster:  28\n",
      "community\n",
      "access\n",
      "support\n",
      "program\n",
      "amount\n",
      "grant\n",
      "locations\n",
      "employees\n",
      "communities\n",
      "provider\n",
      "dollar\n",
      "frontline\n",
      "patient\n",
      "clinics\n",
      "senior\n",
      "Topic cluster:  29\n",
      "nasdaq\n",
      "sales\n",
      "rise\n",
      "analysis\n",
      "close\n",
      "fell\n",
      "growth\n",
      "fiscal\n",
      "drop\n",
      "jump\n",
      "decline\n",
      "economic\n",
      "profit\n",
      "jones\n",
      "tesla\n"
     ]
    }
   ],
   "source": [
    "wordNumbers = 15  \n",
    "topicIndices = sc.parallelize(lda_model.describeTopics(maxTermsPerTopic = wordNumbers))\n",
    "topic_list = topicIndices.toDF().select('*').collect()\n",
    "for i in range(0,num_topics):\n",
    "    print(\"Topic cluster: \", i)\n",
    "    for index in topic_list[i]._1:\n",
    "        print(cvmodel.vocabulary[index])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [],
   "source": [
    "topics = lda_model.topicsMatrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TOPIC #: 0\n",
      "coupon 0.05584182497404184\n",
      "limit 0.04046604740508255\n",
      "body 0.030200285909703244\n",
      "printable 0.027343936870497347\n",
      "ibotta 0.025741723923472716\n",
      "extrabucks 0.0230143124475287\n",
      "colgate 0.021856391665047818\n",
      "coupons 0.020795062065452403\n",
      "hair 0.020546403184258436\n",
      "crest 0.01976692587633246\n",
      "\n",
      "TOPIC #: 1\n",
      "county 0.034067248176207876\n",
      "city 0.028459367678631952\n",
      "covid 0.016655706349365428\n",
      "call 0.015388548422652894\n",
      "hospital 0.014530571517705948\n",
      "virus 0.014195431234819209\n",
      "drive 0.013092726259871502\n",
      "appointment 0.012677737454080542\n",
      "travel 0.012560621689304908\n",
      "sit 0.01200451480156997\n",
      "\n",
      "TOPIC #: 2\n",
      "capital 0.08113523679796744\n",
      "raise 0.06387055710347868\n",
      "simple 0.04631552960368701\n",
      "corporation 0.03790352306299758\n",
      "currently 0.03588157281956684\n",
      "investors 0.03574814600799972\n",
      "associate 0.035208490226472294\n",
      "strategies 0.027656659103235934\n",
      "corporate 0.027635305641423538\n",
      "commission 0.02731047912110018\n",
      "\n",
      "TOPIC #: 3\n",
      "transit 0.0299325121524044\n",
      "commute 0.018022795277955465\n",
      "rid 0.01681012605536416\n",
      "board 0.015104406455630194\n",
      "lot 0.010998829499909235\n",
      "transportation 0.010755432225215638\n",
      "porter 0.010590288278839984\n",
      "subway 0.010344163689438078\n",
      "traffic 0.010329888075287239\n",
      "bus 0.01032664259534345\n",
      "\n",
      "TOPIC #: 4\n",
      "school 0.04725026231737693\n",
      "social 0.03547604980919816\n",
      "december 0.03238537584499014\n",
      "early 0.029763159462637863\n",
      "face 0.027749583089889118\n",
      "safety 0.026632576907756705\n",
      "wear 0.025727722138609434\n",
      "mask 0.024372026511625802\n",
      "update 0.020823156031251084\n",
      "washington 0.020483723942389898\n",
      "\n",
      "TOPIC #: 5\n",
      "ask 0.018573897400465167\n",
      "question 0.01786236932993023\n",
      "answer 0.014195541216164677\n",
      "manager 0.012874863648340897\n",
      "write 0.012116358435180457\n",
      "court 0.011719478423036937\n",
      "food 0.01140468575927396\n",
      "clean 0.010489654686119659\n",
      "never 0.009906825883200335\n",
      "package 0.00961619743741666\n",
      "\n",
      "TOPIC #: 6\n",
      "print 0.0745827553456936\n",
      "photo 0.05048845452769571\n",
      "image 0.03356982796837366\n",
      "google 0.03305989739300608\n",
      "photos 0.03262754551850446\n",
      "paper 0.022849422910466852\n",
      "search 0.020335382531430416\n",
      "alert 0.02006316376320271\n",
      "picture 0.01865621055138889\n",
      "wall 0.01779275568847817\n",
      "\n",
      "TOPIC #: 7\n",
      "really 0.015646500559497054\n",
      "christmas 0.014929110787935998\n",
      "love 0.014498916329189095\n",
      "feel 0.014302828303723897\n",
      "little 0.013658214818532136\n",
      "good 0.013224440966979896\n",
      "something 0.012421127166349551\n",
      "things 0.010762381220443751\n",
      "pretty 0.010085319789612487\n",
      "small 0.00996819696877803\n",
      "\n",
      "TOPIC #: 8\n",
      "black 0.03246177628270008\n",
      "thanksgiving 0.031483565792881835\n",
      "friday 0.03051486147299096\n",
      "holiday 0.028224824826905765\n",
      "shop 0.02456286243653826\n",
      "pizza 0.018894483402281056\n",
      "close 0.017226089136271144\n",
      "hours 0.015235645552204077\n",
      "toilet 0.013490726255901904\n",
      "annual 0.013399965373889409\n",
      "\n",
      "TOPIC #: 9\n",
      "black 0.03429002108228942\n",
      "police 0.0308884976089182\n",
      "women 0.02816731784371895\n",
      "students 0.025745925891952102\n",
      "college 0.024168499936027696\n",
      "suspect 0.02103581377434112\n",
      "block 0.018930803251172554\n",
      "arrest 0.018459281064990268\n",
      "education 0.017283701456620736\n",
      "series 0.015844405172727043\n",
      "\n",
      "TOPIC #: 10\n",
      "cookies 0.027825097600518222\n",
      "privacy 0.02499586115277421\n",
      "personal 0.023557801228699157\n",
      "collect 0.018159152097030163\n",
      "site 0.016465550683946322\n",
      "content 0.014873659889447697\n",
      "months 0.014840938227471017\n",
      "nine 0.012548426439796253\n",
      "theme 0.012140263862635958\n",
      "compensate 0.012043158797574005\n",
      "\n",
      "TOPIC #: 11\n",
      "ratio 0.06739379338505481\n",
      "dividend 0.03267088159462419\n",
      "stake 0.030363881576162405\n",
      "consensus 0.02613070237598471\n",
      "institutional 0.022834278522736753\n",
      "lift 0.021619873037313133\n",
      "hedge 0.02135431866204262\n",
      "quarterly 0.02114403113171532\n",
      "august 0.02056882065179306\n",
      "transaction 0.020196992572363657\n",
      "\n",
      "TOPIC #: 12\n",
      "consumers 0.017542429802467566\n",
      "tuesday 0.017055228307951247\n",
      "percent 0.01701930113472586\n",
      "discount 0.016787227685588126\n",
      "chain 0.016625786605157386\n",
      "customers 0.016622323127029524\n",
      "prescription 0.016075661225534693\n",
      "drugstore 0.015315510445919394\n",
      "drugstores 0.01369790426274123\n",
      "industry 0.01296762285078669\n",
      "\n",
      "TOPIC #: 13\n",
      "rite 0.030222971914575993\n",
      "walmart 0.029341605761058764\n",
      "prime 0.025838189030972895\n",
      "competition 0.021866214354342696\n",
      "acquisition 0.02103158989122969\n",
      "retailers 0.02064973478204498\n",
      "club 0.020464532696032312\n",
      "license 0.018441588649294068\n",
      "boot 0.01834659213011479\n",
      "separate 0.017935669387080584\n",
      "\n",
      "TOPIC #: 14\n",
      "hire 0.023685933262292777\n",
      "ohio 0.020324570776776997\n",
      "phase 0.017202930608432625\n",
      "workers 0.01719348715466998\n",
      "weeks 0.013665002767404162\n",
      "shipment 0.013315504819100758\n",
      "hospital 0.012861901686669376\n",
      "pfizer 0.012445725219630185\n",
      "department 0.012363782668359453\n",
      "hospitals 0.012124931312726616\n",
      "\n",
      "TOPIC #: 15\n",
      "prescription 0.050092874022910426\n",
      "insurance 0.029546556146788173\n",
      "medication 0.028553921371331427\n",
      "patients 0.025844285069653503\n",
      "medicine 0.023691207268117558\n",
      "medications 0.019469920271559516\n",
      "save 0.01873990113327667\n",
      "prime 0.017966381479377836\n",
      "prescriptions 0.017147591979982613\n",
      "treatment 0.014320135433562106\n",
      "\n",
      "TOPIC #: 16\n",
      "delivery 0.0627585207800003\n",
      "gain 0.030249011583149726\n",
      "laundry 0.030230637033466384\n",
      "cost 0.028435536315417696\n",
      "common 0.02575332754615135\n",
      "launch 0.022427051462443105\n",
      "retailer 0.021168799921056795\n",
      "blue 0.019835206175910117\n",
      "promise 0.019764040267730026\n",
      "liquid 0.019510367328424188\n",
      "\n",
      "TOPIC #: 17\n",
      "trump 0.03089666439863968\n",
      "florida 0.02869866137676745\n",
      "desantis 0.022638658229708012\n",
      "pfizer 0.02096964620788668\n",
      "emergency 0.019302916648726836\n",
      "administration 0.01843292183039701\n",
      "government 0.017751707664034562\n",
      "vote 0.017564127389205923\n",
      "video 0.016357647695663082\n",
      "governor 0.014074643609810773\n",
      "\n",
      "TOPIC #: 18\n",
      "knowledge 0.03162335438921446\n",
      "tool 0.029961333991031697\n",
      "support 0.019796996462769525\n",
      "application 0.018695602799788814\n",
      "development 0.018392751352269143\n",
      "skills 0.0182755278392099\n",
      "load 0.017826775087708555\n",
      "opportunity 0.017405848076417155\n",
      "provision 0.01711698937270302\n",
      "advantage 0.016790496513498555\n",
      "\n",
      "TOPIC #: 19\n",
      "nembutal 0.015747070915055374\n",
      "quality 0.010321174362202586\n",
      "reply 0.009904989325595167\n",
      "leave 0.009518176536473594\n",
      "obtain 0.00948425590578772\n",
      "blog 0.008608262263427443\n",
      "utilize 0.008412407623285932\n",
      "phenobarbital 0.008371980462215425\n",
      "software 0.008273002841724454\n",
      "present 0.007998176612265689\n",
      "\n",
      "TOPIC #: 20\n",
      "portfolio 0.08310144210743876\n",
      "impact 0.057868579263038435\n",
      "initiate 0.05136869268339517\n",
      "ishares 0.05093640880658534\n",
      "corp 0.047122261899118306\n",
      "trust 0.04338791122708435\n",
      "capital 0.0390459994010631\n",
      "asset 0.02769735451550593\n",
      "spdr 0.024617598975504598\n",
      "vanguard 0.023854061254802973\n",
      "\n",
      "TOPIC #: 21\n",
      "preview 0.02826946923643376\n",
      "weekly 0.02656656098698008\n",
      "hemp 0.02533074675358924\n",
      "study 0.022478545372770015\n",
      "effect 0.021578666791469157\n",
      "slide 0.02132817584094096\n",
      "pain 0.01915527800434049\n",
      "cannabis 0.015810442183579472\n",
      "page 0.01530518894926897\n",
      "side 0.014581448883148863\n",
      "\n",
      "TOPIC #: 22\n",
      "wealth 0.07419701939366932\n",
      "office 0.0654912522837338\n",
      "family 0.06478608732696221\n",
      "advisors 0.055641463127332313\n",
      "ellis 0.05224288697901896\n",
      "liberty 0.04807026552858048\n",
      "quarter 0.047803601638562176\n",
      "financial 0.039347940830620855\n",
      "approximately 0.03375588401044369\n",
      "second 0.029362348612727233\n",
      "\n",
      "TOPIC #: 23\n",
      "property 0.02336985253726663\n",
      "invest 0.020568763709625636\n",
      "street 0.02026177840098376\n",
      "rate 0.020147924948122432\n",
      "private 0.020085013385428886\n",
      "biden 0.01693274506282468\n",
      "real 0.016922134590781325\n",
      "fire 0.013757320702227809\n",
      "four 0.01252522708136255\n",
      "bill 0.011533804000704938\n",
      "\n",
      "TOPIC #: 24\n",
      "media 0.03214315165092191\n",
      "brand 0.027354063582674108\n",
      "digital 0.02083456629392888\n",
      "healthcare 0.01683078567693542\n",
      "advertise 0.014612775613886112\n",
      "wellness 0.014179603165865763\n",
      "consumer 0.012820092292914963\n",
      "lead 0.012584335437659673\n",
      "aetna 0.012423423563190926\n",
      "build 0.012078087443167516\n",
      "\n",
      "TOPIC #: 25\n",
      "facilities 0.03753809076969894\n",
      "residents 0.034561061692581885\n",
      "nurse 0.03407191048703047\n",
      "staff 0.028874185794146984\n",
      "vaccinate 0.025231666340489005\n",
      "vaccination 0.01761609292127348\n",
      "program 0.01631113540655762\n",
      "distribute 0.015071060457013149\n",
      "live 0.01173292541181467\n",
      "workers 0.011509711182417103\n",
      "\n",
      "TOPIC #: 26\n",
      "note 0.09520380312402547\n",
      "daily 0.0592502027154314\n",
      "morgan 0.055284447729377816\n",
      "stanley 0.05286392983497659\n",
      "latest 0.044041528680191726\n",
      "system 0.040627666207879304\n",
      "blackrock 0.039298432327451505\n",
      "retirement 0.038544329079016254\n",
      "nordea 0.036223500659248\n",
      "beyond 0.03416392634868842\n",
      "\n",
      "TOPIC #: 27\n",
      "paypal 0.05263289181476919\n",
      "card 0.05197403239009904\n",
      "gift 0.03814226742014446\n",
      "money 0.034734773994536915\n",
      "cash 0.027474499225216314\n",
      "account 0.02555894133414554\n",
      "click 0.02206156945477465\n",
      "cod 0.0214395852945062\n",
      "payment 0.020933702917439484\n",
      "code 0.020082733979868584\n",
      "\n",
      "TOPIC #: 28\n",
      "community 0.02050556005075197\n",
      "access 0.019464851260042264\n",
      "support 0.014969782851480422\n",
      "program 0.014218488606786713\n",
      "amount 0.01302910824863699\n",
      "grant 0.01289604032122071\n",
      "locations 0.012720942507435553\n",
      "employees 0.011913570635113089\n",
      "communities 0.011711867991117012\n",
      "provider 0.011308527913273471\n",
      "\n",
      "TOPIC #: 29\n",
      "nasdaq 0.030339203176824068\n",
      "sales 0.030266272518572244\n",
      "rise 0.029395308142449266\n",
      "analysis 0.018973038012194215\n",
      "close 0.016283996412866014\n",
      "fell 0.015805681131488898\n",
      "growth 0.014142288955611816\n",
      "fiscal 0.013482922969782164\n",
      "drop 0.013291599005640253\n",
      "jump 0.01291985986736997\n",
      "\n"
     ]
    }
   ],
   "source": [
    "topics = lda_model.describeTopics(maxTermsPerTopic = 10)\n",
    "for x, topic in enumerate(topics):\n",
    "    print('TOPIC #: ' + str(x))\n",
    "    words = topic[0]\n",
    "    weights = topic[1]\n",
    "    for n in range(len(words)):\n",
    "        print(cvmodel.vocabulary[words[n]] + ' ' + str(weights[n]))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic #0:\n",
      " cvs  |  cvs | cvs  | health  |  nyse | nyse  cvs |  nyse  | nyse  |  nyse  cvs | nyse  cvs  | cvs health  | health  nyse | health  nyse  | cvs health  nyse | cvs health | share cvs health | share cvs | share cvs health  | position cvs health | position cvs | position cvs health  |  share | cvs  share |  cvs  share | stock position | stock position cvs | stock position cvs health | asset management | management llc |  stock\n",
      "Topic #1:\n",
      "cvs health | cvs pharmacy | stake cvs | stake cvs health | stake cvs health  | management  | group  | pharmacy  |  cvs | llc buy | asset management | cvs health  | health  | cvs  | cvs health  nyse | health  nyse | health  nyse  |  nyse  cvs | nyse  cvs | nyse  cvs  |  nyse  |  nyse | nyse  |  cvs  | covid19 test | management llc | capital management | gift card |  free | nurse home\n",
      "Topic #2:\n",
      "  |    | ad preview | cvs  | cvs   | black friday |  free | weekly ad | cvs walgreens | preview  | cvs ad |  amazon | ad preview  | deal week |  20 | cvs weekly | ad  | cvs weekly ad | vaccine rollout |  week |  stock |  cvs  | amazon  | deal  |  cvs | week  | best deal |  10 | gift card | gift set\n",
      "Topic #3:\n",
      " 2020 | trust  | corp  |  sell | 2020  |  2020  |  ishares | ishares trust | ishares trust  | etf  |  llc | amazon  |  ishares trust | management  |  ishares trust  |  vanguard | bond etf | llc buy | bond etf  | hold  | group  |  spdr |  week | 13  |  llc buy | service  | capital management |  buy | partner llc |  p\n",
      "Topic #4:\n",
      "hold cvs health | hold cvs | hold cvs health  | stock hold | stock hold cvs | stock hold cvs health | cvs health | cvs  | cvs health  nyse | health  nyse  | health  nyse | nyse  cvs  |  nyse  cvs | nyse  |  nyse  | nyse  cvs |  nyse | cvs health  | health  | management  | partner llc | asset management |  cvs |  cvs  | capital management | management llc |  stock |  week | amazon  |  amazon\n",
      "Topic #5:\n",
      "cvs  |  cvs | nurse home | gift card | buy nembutal | cvs health |  cvs health | walgreens  cvs | walgreens  |  cvs  | amazon  | vaccine rollout | cvs walgreens |  amazon |  week | news  | corp  | walmart  |   | cvs hire | body wash | asset management |  10 | deal week | covid vaccine | pharmacy  | n wild | gift set | cvs   | deal cvs\n",
      "Topic #6:\n",
      "covid19 vaccines | cvs deal | body wash | deal  |  10 | walmart  |  new | reg  |  reg |  reg  | cvs hire | amazon  | deal week |  20 |  amazon |   | gift set | cvs  |  week |  covid19 | cvs walgreens | vaccine rollout |  cvs | gift card |  cvs  | vaccine distribution | nurse home | gov  | week  | walgreens \n",
      "Topic #7:\n",
      "covid19 vaccine | covid vaccine | longterm care | vaccine  | vaccine distribution |  covid19 | news  | cvs photo | care facilities | covid19 test | alert  | photo  | google alert  | google alert | covid19 vaccine  | longterm care facilities | gov  | cvs photo  | covid19 vaccination | n wild | gift set |  p | vaccine rollout |  free |  buy | cvs hire |  amazon |  week | amazon  | nurse home\n",
      "Topic #8:\n",
      " walgreens | cvs  walgreens | cvs  | amazon pharmacy | walgreens  | pharmacy  |  walgreens  |  buy | amazon  |  cvs  | walgreens  cvs |  amazon | covid vaccines | deal cvs | cvs walgreens | covid vaccine |  cvs |  free | covid19 vaccines | news  | nurse home | deal  | covid19 vaccine | walmart  | longterm care facilities |   | care facilities |    | online pharmacy | 2020 \n",
      "Topic #9:\n",
      "online pharmacy | amazon launch | launch online | week  | launch online pharmacy | amazon launch online | amazon launch online pharmacy | pharmacy  | online pharmacy  | deal cvs | open online pharmacy | open online | covid vaccines | best deal | asset management |  stock |  share |  amazon | service  | deal week | walmart  | walgreens  |  cvs |  cvs  |  week | walgreens  cvs | cvs  | black friday | deal  |  new\n"
     ]
    }
   ],
   "source": [
    "lda_tf = LatentDirichletAllocation(n_components=10, \n",
    "                                   max_iter=100,\n",
    "                                   learning_method='online', \n",
    "                                   random_state = 0)\n",
    "lda_tf.fit(dtm_tf)\n",
    "\n",
    "n_top_words = 30\n",
    "tf_feature_names = tf_vectorizer.get_feature_names()\n",
    "topics = dict()\n",
    "for topic_idx, topic in enumerate(lda_tf.components_):\n",
    "    topics[topic_idx] = [tf_feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]\n",
    "    print(\"Topic #%d:\" % topic_idx)\n",
    "    print(\" | \".join([tf_feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el5137757277961288828409403\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el5137757277961288828409403_data = {\"mdsDat\": {\"x\": [0.2516133239870485, -0.19771450240615593, 0.05793668263420715, -0.21684232352385777, 0.2825006146175099, -0.15146713255230182, 0.11974200104383748, -0.19571215403233033, 0.03196450081207569, 0.01797898941996759], \"y\": [-0.14103180748859498, -0.06123434038720558, 0.21481914672303834, -0.05553411690199215, 0.021068611234750918, 0.1915682595134286, 0.22049896352172768, -0.029094233516746653, -0.2610323740309692, -0.10002810866743618], \"topics\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"cluster\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"Freq\": [49.6558323652696, 11.302340463795705, 8.964413264573828, 6.123613394156289, 5.402590256379237, 4.743586438090883, 3.786577454605628, 3.781280178723113, 3.187308859139384, 3.0524573252663343]}, \"tinfo\": {\"Term\": [\"cvs \", \"cvs health\", \" \", \" cvs\", \"covid19 vaccine\", \" walgreens\", \"online pharmacy\", \"cvs pharmacy\", \"hold cvs health\", \"hold cvs\", \"hold cvs health \", \"covid19 vaccines\", \" cvs \", \" 2020\", \"cvs  walgreens\", \"trust \", \"nurse home\", \"corp \", \"stake cvs health\", \"stake cvs\", \"pharmacy \", \"walgreens \", \"health \", \" nyse\", \"nyse  cvs\", \" nyse \", \"nyse \", \" nyse  cvs\", \"nyse  cvs \", \"cvs health \", \" cvs \", \"health \", \" nyse\", \"nyse  cvs\", \" nyse \", \"nyse \", \" nyse  cvs\", \"nyse  cvs \", \"cvs health \", \"health  nyse\", \"health  nyse \", \"cvs health  nyse\", \"share cvs\", \"share cvs health\", \"share cvs health \", \"position cvs health\", \"position cvs\", \"position cvs health \", \" share\", \"cvs  share\", \" cvs  share\", \"stock position\", \"stock position cvs health\", \"stock position cvs\", \" stock\", \"management llc\", \" cvs\", \"cvs health\", \"partner llc\", \"asset management\", \"cvs \", \" 2020\", \"trust \", \"corp \", \" sell\", \"2020 \", \" 2020 \", \" ishares\", \"ishares trust\", \"ishares trust \", \"etf \", \" llc\", \"amazon \", \" ishares trust\", \"management \", \" ishares trust \", \" vanguard\", \"bond etf\", \"bond etf \", \"hold \", \"group \", \" spdr\", \" week\", \"13 \", \" llc buy\", \"service \", \"llc buy\", \"capital management\", \" buy\", \"partner llc\", \" p\", \" \", \"  \", \"ad preview\", \"cvs  \", \"black friday\", \" free\", \"weekly ad\", \"cvs walgreens\", \"preview \", \"cvs ad\", \" amazon\", \"ad preview \", \"deal week\", \" 20\", \"cvs weekly\", \"ad \", \"cvs weekly ad\", \"vaccine rollout\", \"cvs \", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \" week\", \" cvs \", \"amazon \", \"deal \", \" cvs\", \"week \", \"best deal\", \" 10\", \"gift card\", \"covid19 vaccine\", \"covid vaccine\", \"longterm care\", \"vaccine \", \"vaccine distribution\", \" covid19\", \"news \", \"cvs photo\", \"care facilities\", \"covid19 test\", \"alert \", \"photo \", \"google alert\", \"google alert \", \"covid19 vaccine \", \"longterm care facilities\", \"gov \", \"cvs photo \", \"covid19 vaccination\", \"n wild\", \"gift set\", \" p\", \"vaccine rollout\", \" stock\", \"service \", \" llc buy\", \"cvs hire\", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \" free\", \" buy\", \" amazon\", \" week\", \"amazon \", \"nurse home\", \"nurse home\", \"gift card\", \"buy nembutal\", \" cvs health\", \"walgreens  cvs\", \"cvs \", \" cvs\", \"walgreens \", \"cvs health\", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"cvs hire\", \"google alert \", \"google alert\", \"photo \", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \"13 \", \"open online\", \"deal cvs\", \" cvs \", \"amazon \", \"cvs walgreens\", \" amazon\", \" week\", \"news \", \"corp \", \"walmart \", \" \", \"body wash\", \"asset management\", \" 10\", \"deal week\", \"covid vaccine\", \"pharmacy \", \"cvs  \", \"online pharmacy\", \"amazon launch\", \"launch online\", \"week \", \"launch online pharmacy\", \"amazon launch online\", \"amazon launch online pharmacy\", \"online pharmacy \", \"deal cvs\", \"open online\", \"open online pharmacy\", \"covid vaccines\", \"best deal\", \"pharmacy \", \"asset management\", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"cvs hire\", \"google alert \", \"google alert\", \" share\", \" amazon\", \"deal week\", \"walmart \", \"walgreens \", \" cvs\", \" cvs \", \" week\", \"walgreens  cvs\", \"cvs \", \"black friday\", \"deal \", \" new\", \" walgreens\", \"cvs  walgreens\", \"amazon pharmacy\", \" walgreens \", \"walgreens \", \" buy\", \"pharmacy \", \"cvs \", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"cvs hire\", \"google alert \", \"google alert\", \"photo \", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \"13 \", \"open online pharmacy\", \"open online\", \"deal cvs\", \"walgreens  cvs\", \"amazon \", \" cvs \", \" amazon\", \"cvs walgreens\", \"covid vaccine\", \" cvs\", \" free\", \"covid19 vaccines\", \"news \", \"nurse home\", \"deal \", \"covid19 vaccine\", \"walmart \", \" \", \"care facilities\", \"  \", \"online pharmacy\", \"2020 \", \"covid19 vaccines\", \"cvs deal\", \"body wash\", \"deal \", \" 10\", \"walmart \", \" new\", \"reg \", \" reg\", \" reg \", \"cvs hire\", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"google alert \", \"google alert\", \"photo \", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \"13 \", \"amazon \", \"deal week\", \" 20\", \" amazon\", \" \", \"cvs \", \" week\", \" covid19\", \"cvs walgreens\", \" cvs\", \"gift card\", \" cvs \", \"vaccine distribution\", \"nurse home\", \"week \", \"walgreens \", \"cvs pharmacy\", \"stake cvs\", \"stake cvs health\", \"stake cvs health \", \"cvs health\", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"cvs hire\", \"google alert\", \"google alert \", \"photo \", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \"13 \", \"open online\", \"open online pharmacy\", \"partner llc\", \"deal cvs\", \"ad \", \"management \", \"group \", \"pharmacy \", \" cvs\", \"llc buy\", \"asset management\", \"cvs health \", \"health \", \"cvs \", \"cvs health  nyse\", \"health  nyse\", \"health  nyse \", \" nyse  cvs\", \"nyse  cvs\", \"nyse  cvs \", \" nyse \", \" nyse\", \"nyse \", \" cvs \", \"covid19 test\", \"management llc\", \"capital management\", \"gift card\", \" free\", \"nurse home\", \"hold cvs health\", \"hold cvs\", \"hold cvs health \", \"stock hold\", \"stock hold cvs\", \"stock hold cvs health\", \"cvs health\", \"cvs \", \"gift set\", \"n wild\", \"covid19 vaccination\", \"cvs photo \", \"vaccine rollout\", \" p\", \" stock\", \"gov \", \"longterm care facilities\", \"service \", \"covid19 vaccine \", \" llc buy\", \"cvs hire\", \"google alert\", \"google alert \", \"photo \", \"cvs weekly ad\", \"best deal\", \"covid vaccines\", \"13 \", \"open online\", \"open online pharmacy\", \"partner llc\", \"cvs health  nyse\", \"health  nyse \", \"health  nyse\", \"nyse  cvs \", \" nyse  cvs\", \"nyse \", \" nyse \", \"nyse  cvs\", \" nyse\", \"cvs health \", \"health \", \"management \", \"asset management\", \" cvs\", \" cvs \", \"capital management\", \"management llc\", \" week\", \"amazon \", \" amazon\"], \"Freq\": [526.0, 363.0, 316.0, 379.0, 125.0, 69.0, 66.0, 56.0, 52.0, 52.0, 51.0, 53.0, 297.0, 80.0, 50.0, 72.0, 51.0, 71.0, 42.0, 42.0, 57.0, 51.0, 253.0, 252.0, 252.0, 252.0, 252.0, 252.0, 252.0, 252.0, 296.4620441339117, 252.61742367858383, 251.79736210624975, 251.79736143882062, 251.7973613448826, 251.79736128380995, 251.79736063898108, 251.79735974790637, 251.70355951017606, 245.04679600165548, 245.04678958738367, 245.04678845606261, 72.25494052971246, 72.25494052971261, 70.33846636278348, 42.285578904771796, 42.28557890477178, 38.44730905887004, 36.94214032918675, 35.08273078571114, 33.78956525922823, 23.814453058692365, 22.908457724874307, 22.90845772487436, 15.348713559759526, 19.428528465903096, 266.32391427147724, 244.69276618867502, 11.656573943986084, 19.73646206093391, 259.13212431424404, 79.62891237868877, 71.83626844931993, 70.06680072967406, 62.81509590418556, 62.18157622819218, 55.45245110961918, 52.1564747108939, 46.30532450165277, 41.40213247898734, 39.43132512549207, 34.30501204972952, 33.31348159220752, 31.242835144704248, 30.56721405360771, 27.276293707404285, 24.08174785889374, 23.969745598751395, 22.08410213415053, 20.69579695115298, 20.56950550315422, 19.76523249204494, 19.434060468998247, 17.247719143832438, 16.715820071648466, 16.389163906856144, 23.294158868727397, 12.946614056273706, 7.846246069292407, 5.977701474375394, 3.939715602819135, 315.5084936018535, 47.01695931868832, 40.367232722549765, 35.82647535034832, 34.35142547472417, 31.209164513798015, 27.13610141880683, 22.549877406688815, 22.47289493641554, 21.88965537652792, 21.537526093720004, 20.688306281358194, 19.794603496611835, 19.354009504015625, 18.839448675246707, 17.81928895761291, 17.054860282922743, 14.542778195874561, 40.16160789071142, 0.08989344358274112, 0.0898933559827201, 0.0898878435353949, 0.08988717023365742, 0.08989178691363076, 0.08991721345309779, 0.08988632670396016, 0.08988561096247398, 0.08988646146607988, 0.08988785658963819, 0.0898856108686087, 0.08993932097019489, 0.08990366122586523, 0.08990226228603213, 0.08989760011510078, 0.08989730261389126, 0.08989623503012503, 0.08989526506233815, 0.08989432032610778, 0.08989361435003118, 124.67744534982774, 35.219485679955845, 33.112252219196584, 30.49892030881116, 29.122626146683782, 21.92152565955105, 19.886434330491166, 18.83104806524617, 18.69594807478949, 18.457437865642394, 18.109312829316263, 17.045343226917783, 16.9520705181651, 16.952070518165115, 16.530281451984372, 16.133287703727614, 15.390709562811738, 14.498354455462017, 14.414864622815779, 14.062849235005265, 13.981754334143458, 11.051348827055895, 0.08606543908428914, 0.08604597709412466, 0.08604139222987076, 0.08604139122530557, 0.08605535199245994, 0.08604139133786205, 0.0860413915631463, 0.08604534385774996, 0.08606021415580682, 0.08605670958302082, 0.08605430631567794, 0.08605236968722056, 0.08605033431948346, 0.08605032706659553, 50.824763349214166, 30.925010986022723, 28.14160880479202, 20.859851028835365, 18.003352043575756, 176.42216637812652, 112.23078825691148, 9.51688096737023, 22.498406415624693, 0.09130813694029659, 0.09130829554265697, 0.09130277530980671, 0.09130249112138573, 0.09132422374393692, 0.09130449949292721, 0.09130201034805704, 0.0913027245943059, 0.09130374029488224, 0.09130509248699964, 0.09130309967182247, 0.09130200652912988, 0.09130957667259548, 0.09130200672160764, 0.0913020067215697, 0.09130241900933242, 0.09130200667215499, 0.09130301981358756, 0.09130581312881501, 0.09130320250764307, 0.09130402316419937, 0.09130753880381391, 0.09135350913459805, 0.09132631575869177, 0.09131801710087822, 0.09131776483148535, 0.09131566248271392, 0.09131059140424694, 0.09130982605568316, 0.09130972109704755, 0.09130958337438277, 0.09130900861605488, 0.09130895370076317, 0.09130891307812566, 0.09130889688844016, 0.09130882009571606, 0.0913084297761528, 0.09130766234719445, 66.00044837968234, 40.04761798472804, 32.58861794808004, 32.14437464967449, 30.422858683530258, 30.390416883665633, 29.328476850665826, 24.225150892050365, 17.55207220195481, 17.530603612140148, 17.53060361214018, 17.25466362372033, 17.186198081799397, 24.55585172847922, 12.242282632996158, 0.1084099428320185, 0.10841336809603039, 0.10840994290289577, 0.10840994218514671, 0.10840994445486186, 0.10840994451483292, 0.10850536678211595, 0.10840994272552813, 0.10841064262997202, 0.10845318896099165, 0.10840994213739029, 0.10841118785080422, 0.10840994278059322, 0.10840994217941521, 0.10840994217932173, 0.1084954631004305, 0.10848759876056306, 0.10844390667331942, 0.10842529924596706, 0.10842405983433875, 0.10842060623452435, 0.1084194711985121, 0.10841850865379252, 0.10841774569265392, 0.10841666787042735, 0.10841643731334705, 0.10841601583058261, 0.10841586411560798, 69.0278969686922, 49.12069852163008, 41.544215795742325, 30.22146724113544, 40.846691598278866, 15.349293277998742, 32.55461862005073, 43.18826664555579, 0.11614723847716898, 0.1161424071782555, 0.11614240726244975, 0.1161457759384746, 0.1161460836626398, 0.11614240956552345, 0.11614241461247586, 0.11614240700604708, 0.11615034549830063, 0.11614240874088745, 0.11614640647513094, 0.11614240578908666, 0.11614240708796604, 0.11614334577914433, 0.11614334577911964, 0.11614527149713323, 0.1161424061194186, 0.11614240678105216, 0.11618890748568844, 0.11614240647154568, 0.11614240575721624, 0.11614240575713851, 0.11617710100941556, 0.11619248459470298, 0.11621317814172598, 0.11619830235315116, 0.1161917774975502, 0.11617194612991666, 0.11616793885210613, 0.11616452030297723, 0.1161622016459883, 0.11616051562274457, 0.11615707870843564, 0.11615667547517149, 0.11615512242807752, 0.11615316937929525, 0.11615220779565777, 0.11614928121573417, 0.11614923823484428, 0.11614872836112948, 0.11614868110036282, 0.11614815756824133, 52.54729081722525, 41.83761170368748, 32.60898592169936, 31.833527006139903, 28.974247914370366, 27.76940534961346, 24.1634769583052, 22.229626173537177, 22.22962617353632, 22.229626173534534, 16.83167243223167, 0.10468799831918334, 0.10467295396359125, 0.1046713467192482, 0.1046713458794968, 0.10468245625186995, 0.1046713486023239, 0.10467135272103902, 0.1046783310749241, 0.10467439391047878, 0.10467134792680013, 0.10467179162368084, 0.1046717958091138, 0.10467134587314834, 0.10467134587312137, 0.10467134602809507, 0.10467598711960228, 0.10467570379004901, 0.10467379741192134, 0.10467319806169828, 0.10470902997524693, 0.10470369219326332, 0.10470331112136787, 0.10470009280343114, 0.10469300572398084, 0.10468720102144671, 0.1046866005847412, 0.10468416046683453, 0.10468308946708109, 0.10468224704478803, 0.10468162293043276, 0.10467972360976384, 0.1046788461738569, 0.10467872240317629, 0.10467745673098407, 0.10467669421063638, 55.50178752089627, 41.50771903116012, 41.507719031159866, 40.190023796762794, 87.43836698171863, 0.12997217194220315, 0.1299721719699257, 0.12997217209743664, 0.12997217056667706, 0.12997217541415393, 0.1299721755233008, 0.1299721830518864, 0.1299721717168717, 0.12997217045498302, 0.12997217429926872, 0.12997217046789805, 0.12997216990371435, 0.1299721718390151, 0.12997217055531918, 0.1299721705552827, 0.12997217083681778, 0.12997217039488196, 0.12997217138006953, 0.12997217246271767, 0.12997217091925467, 0.1299721698507166, 0.1299721698507026, 0.12997217206046202, 0.12997217164690772, 0.12997217093838484, 0.13002842094649295, 0.13001616329216126, 0.1300148126613608, 0.13000392256635726, 0.12999801948595383, 0.1299975016028882, 0.12999721536817208, 0.1299971202996681, 0.12999532771394323, 0.1299940351010928, 0.12999403508834959, 0.12999403508452975, 0.12999345405545557, 0.1299934540437625, 0.12999345403924936, 0.1299934540347966, 0.12999345403323262, 0.12999345403140414, 0.1299902352476341, 0.12999022505612248, 0.12998884049219964, 0.12998312485970973, 0.12998310068501726, 0.1299757483304926, 0.12997545391404525, 51.81544301230566, 51.81544301230556, 50.2465921112606, 29.610451916775734, 26.563089337025378, 26.5630893370253, 7.874987771137968, 6.739221946200125, 0.15408231247505838, 0.15408231252171964, 0.15408231269714984, 0.15408231044114312, 0.1540823175955513, 0.15408231775984757, 0.1540891311579418, 0.15408231213853613, 0.1540823102739308, 0.1540823159458415, 0.15408231029827069, 0.15408230946516932, 0.15408231232223474, 0.15408231042542808, 0.15408231042525009, 0.15408231083939572, 0.15408231019157315, 0.15408231164138503, 0.15408231323470323, 0.15408231096678363, 0.15408230938933098, 0.15408230938927286, 0.1541846843106924, 0.154807416019392, 0.15480560302391294, 0.15479532373576543, 0.15427884778146428, 0.15427741975767656, 0.15427638640624758, 0.15427628852826714, 0.15427613797702183, 0.15427506839149333, 0.15426963733708562, 0.15423909706794675, 0.1542161116722678, 0.15414073384668464, 0.15412707380321272, 0.15412020929887, 0.15411199814312462, 0.15410362738601038, 0.15408232104180417, 0.15408232062586463, 0.15408231840521328], \"Total\": [526.0, 363.0, 316.0, 379.0, 125.0, 69.0, 66.0, 56.0, 52.0, 52.0, 51.0, 53.0, 297.0, 80.0, 50.0, 72.0, 51.0, 71.0, 42.0, 42.0, 57.0, 51.0, 253.0, 252.0, 252.0, 252.0, 252.0, 252.0, 252.0, 252.0, 297.44004083892446, 253.59539548461817, 252.77536579409912, 252.7753661962658, 252.77536625287001, 252.77536628967212, 252.77536667821917, 252.77536721515168, 252.6815619594083, 246.0253200035095, 246.02532386852215, 246.0253245502132, 73.23272869654662, 73.23272869654767, 71.31625453718223, 43.26336708627925, 43.26336708627934, 39.42509726999699, 37.92001454495705, 36.06051952091777, 34.76735402510844, 24.79224149062274, 23.886245975114402, 23.886245975114722, 16.32664880291208, 24.207278265414516, 379.44132935116755, 363.10697498310265, 18.51488690813038, 32.84835265434231, 526.1698148970056, 80.60557812318281, 72.81292454464544, 71.04346760687764, 63.79175625601532, 63.158245877810806, 56.42910984291569, 53.133129563674466, 47.28197990742057, 42.378787991072656, 40.407980807050734, 35.28167271846271, 34.29029532073916, 32.219490229251605, 31.544118961822477, 28.252948874737754, 25.058403174590794, 24.946400753043548, 23.060757345823944, 21.672459571538756, 21.54623556414007, 20.741888438569692, 20.41081717613799, 18.224377171781814, 17.69247628372085, 17.365885609558553, 30.947902585298532, 27.852735612483517, 24.056083593829413, 18.51488690813038, 15.8816869876958, 316.4925943215125, 48.00102795360167, 41.35128376715474, 36.81054628844529, 35.335487656522545, 32.193264315580514, 28.120155518302113, 23.533994899842135, 23.45694959800718, 22.87370876715899, 22.521774562045255, 21.672358740803148, 20.77872907288652, 20.338094580201567, 19.823505374628873, 18.80334093131841, 18.038914519005147, 15.526888859196715, 526.1698148970056, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 20.41081717613799, 297.44004083892446, 34.29029532073916, 32.802826385457756, 379.44132935116755, 33.10992702401445, 18.151738374165575, 29.94353089858921, 31.90767785795162, 125.66536153477198, 36.207417442276764, 34.10015304902145, 31.486823980263345, 30.110536815112162, 22.909438473587315, 20.874358146866356, 19.818952346429526, 19.68385580200448, 19.44534974990604, 19.09720774912698, 18.033242418415934, 17.93996551190543, 17.939965511905516, 17.518183568787382, 17.121194939906893, 16.378611801171306, 15.486253684004323, 15.402761863711946, 15.050762122708507, 14.96968360115543, 15.8816869876958, 15.526888859196715, 16.32664880291208, 17.365885609558553, 17.69247628372085, 17.800959089020765, 18.038914519005147, 18.151738374165575, 18.220246454532926, 32.193264315580514, 24.056083593829413, 22.521774562045255, 20.41081717613799, 34.29029532073916, 51.807434604027044, 51.807434604027044, 31.90767785795162, 29.124242018721375, 21.842501825107558, 18.98604858738022, 526.1698148970056, 379.44132935116755, 51.23009113967235, 363.10697498310265, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.800959089020765, 17.939965511905516, 17.93996551190543, 18.033242418415934, 18.038914519005147, 18.151738374165575, 18.220246454532926, 18.224377171781814, 18.496131583054066, 18.517644651483394, 297.44004083892446, 34.29029532073916, 23.533994899842135, 22.521774562045255, 20.41081717613799, 20.874358146866356, 71.04346760687764, 28.738716636287148, 316.4925943215125, 33.578263962513475, 32.84835265434231, 29.94353089858921, 20.77872907288652, 36.207417442276764, 57.95990800126083, 36.81054628844529, 66.96598260691762, 41.013151677184084, 33.55414401573678, 33.10992702401445, 31.388384807057026, 31.355943008076935, 30.29400300571569, 25.190678274115715, 18.517644651483394, 18.496131583054066, 18.496131583054147, 18.220246454532926, 18.151738374165575, 57.95990800126083, 32.84835265434231, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.800959089020765, 17.939965511905516, 17.93996551190543, 37.92001454495705, 22.521774562045255, 20.77872907288652, 28.738716636287148, 51.23009113967235, 379.44132935116755, 297.44004083892446, 20.41081717613799, 18.98604858738022, 526.1698148970056, 35.335487656522545, 32.802826385457756, 25.1327698077091, 69.98569899827504, 50.07849895790778, 42.50201350485755, 31.179267138950753, 51.23009113967235, 24.056083593829413, 57.95990800126083, 526.1698148970056, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.800959089020765, 17.939965511905516, 17.93996551190543, 18.033242418415934, 18.038914519005147, 18.151738374165575, 18.220246454532926, 18.224377171781814, 18.496131583054147, 18.496131583054066, 18.517644651483394, 18.98604858738022, 34.29029532073916, 297.44004083892446, 22.521774562045255, 23.533994899842135, 36.207417442276764, 379.44132935116755, 32.193264315580514, 53.516582660713226, 20.874358146866356, 51.807434604027044, 32.802826385457756, 125.66536153477198, 28.738716636287148, 316.4925943215125, 19.68385580200448, 48.00102795360167, 66.96598260691762, 63.158245877810806, 53.516582660713226, 42.80688273683138, 33.578263962513475, 32.802826385457756, 29.94353089858921, 28.738716636287148, 25.1327698077091, 23.1988953981761, 23.198895398175832, 23.19889539817578, 17.800959089020765, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.939965511905516, 17.93996551190543, 18.033242418415934, 18.038914519005147, 18.151738374165575, 18.220246454532926, 18.224377171781814, 34.29029532073916, 20.77872907288652, 20.338094580201567, 22.521774562045255, 316.4925943215125, 526.1698148970056, 20.41081717613799, 22.909438473587315, 23.533994899842135, 379.44132935116755, 31.90767785795162, 297.44004083892446, 30.110536815112162, 51.807434604027044, 33.10992702401445, 51.23009113967235, 56.44576067243418, 42.45168828271693, 42.451688282716795, 41.13399314992676, 363.10697498310265, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.800959089020765, 17.93996551190543, 17.939965511905516, 18.033242418415934, 18.038914519005147, 18.151738374165575, 18.220246454532926, 18.224377171781814, 18.496131583054066, 18.496131583054147, 18.51488690813038, 18.517644651483394, 18.80334093131841, 31.544118961822477, 21.54623556414007, 57.95990800126083, 379.44132935116755, 30.947902585298532, 32.84835265434231, 252.6815619594083, 253.59539548461817, 526.1698148970056, 246.0253245502132, 246.0253200035095, 246.02532386852215, 252.77536667821917, 252.7753661962658, 252.77536721515168, 252.77536625287001, 252.77536579409912, 252.77536628967212, 297.44004083892446, 19.44534974990604, 24.207278265414516, 27.852735612483517, 31.90767785795162, 32.193264315580514, 51.807434604027044, 52.73530017605438, 52.73530017605445, 51.166449407568955, 30.53030979574611, 27.48294487726694, 27.48294487726714, 363.10697498310265, 526.1698148970056, 14.96968360115543, 15.050762122708507, 15.402761863711946, 15.486253684004323, 15.526888859196715, 15.8816869876958, 16.32664880291208, 16.378611801171306, 17.121194939906893, 17.365885609558553, 17.518183568787382, 17.69247628372085, 17.800959089020765, 17.93996551190543, 17.939965511905516, 18.033242418415934, 18.038914519005147, 18.151738374165575, 18.220246454532926, 18.224377171781814, 18.496131583054066, 18.496131583054147, 18.51488690813038, 246.0253245502132, 246.02532386852215, 246.0253200035095, 252.77536721515168, 252.77536667821917, 252.77536628967212, 252.77536625287001, 252.7753661962658, 252.77536579409912, 252.6815619594083, 253.59539548461817, 31.544118961822477, 32.84835265434231, 379.44132935116755, 297.44004083892446, 27.852735612483517, 24.207278265414516, 20.41081717613799, 34.29029532073916, 22.521774562045255], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\", \"Topic10\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -2.7037, -2.8638, -2.867, -2.867, -2.867, -2.867, -2.867, -2.867, -2.8674, -2.8942, -2.8942, -2.8942, -4.1155, -4.1155, -4.1423, -4.6512, -4.6512, -4.7464, -4.7863, -4.838, -4.8755, -5.2254, -5.2642, -5.2642, -5.6646, -5.4289, -2.8109, -2.8957, -5.9398, -5.4132, -2.8383, -2.5382, -2.6412, -2.6661, -2.7754, -2.7855, -2.9, -2.9613, -3.0803, -3.1922, -3.241, -3.3803, -3.4096, -3.4738, -3.4956, -3.6095, -3.7341, -3.7388, -3.8207, -3.8856, -3.8917, -3.9316, -3.9485, -4.0679, -4.0992, -4.1189, -3.7674, -4.3547, -4.8555, -5.1275, -5.5444, -0.9296, -2.8333, -2.9858, -3.1051, -3.1472, -3.2431, -3.3829, -3.5681, -3.5715, -3.5978, -3.614, -3.6542, -3.6984, -3.7209, -3.7479, -3.8035, -3.8474, -4.0067, -2.9909, -9.0929, -9.0929, -9.093, -9.093, -9.093, -9.0927, -9.093, -9.093, -9.093, -9.093, -9.093, -9.0924, -9.0928, -9.0928, -9.0929, -9.0929, -9.0929, -9.0929, -9.0929, -9.0929, -1.477, -2.7411, -2.8028, -2.885, -2.9312, -3.2152, -3.3127, -3.3672, -3.3744, -3.3872, -3.4063, -3.4668, -3.4723, -3.4723, -3.4975, -3.5218, -3.5689, -3.6287, -3.6344, -3.6592, -3.6649, -3.9001, -8.7553, -8.7556, -8.7556, -8.7556, -8.7555, -8.7556, -8.7556, -8.7556, -8.7554, -8.7554, -8.7555, -8.7555, -8.7555, -8.7555, -2.249, -2.7459, -2.8402, -3.1396, -3.2869, -1.0045, -1.4569, -3.9244, -3.064, -8.5709, -8.5709, -8.571, -8.571, -8.5708, -8.571, -8.571, -8.571, -8.571, -8.571, -8.571, -8.571, -8.5709, -8.571, -8.571, -8.571, -8.571, -8.571, -8.571, -8.571, -8.571, -8.5709, -8.5704, -8.5707, -8.5708, -8.5708, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -8.5709, -1.8577, -2.3573, -2.5634, -2.5771, -2.6321, -2.6332, -2.6688, -2.8599, -3.1822, -3.1834, -3.1834, -3.1993, -3.2032, -2.8464, -3.5424, -8.2692, -8.2691, -8.2692, -8.2692, -8.2692, -8.2692, -8.2683, -8.2692, -8.2692, -8.2688, -8.2692, -8.2692, -8.2692, -8.2692, -8.2692, -8.2684, -8.2685, -8.2689, -8.269, -8.269, -8.2691, -8.2691, -8.2691, -8.2691, -8.2691, -8.2691, -8.2691, -8.2691, -1.5875, -1.9277, -2.0952, -2.4135, -2.1122, -3.0909, -2.3391, -2.0564, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9745, -7.9749, -7.9749, -7.9749, -7.9746, -7.9745, -7.9743, -7.9745, -7.9745, -7.9747, -7.9747, -7.9748, -7.9748, -7.9748, -7.9748, -7.9748, -7.9748, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -7.9749, -1.8589, -2.0868, -2.336, -2.3601, -2.4542, -2.4967, -2.6358, -2.7192, -2.7192, -2.7192, -2.9973, -8.0774, -8.0775, -8.0775, -8.0775, -8.0774, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -8.0772, -8.0772, -8.0772, -8.0773, -8.0773, -8.0774, -8.0774, -8.0774, -8.0774, -8.0774, -8.0774, -8.0775, -8.0775, -8.0775, -8.0775, -8.0775, -1.6333, -1.9238, -1.9238, -1.9561, -1.1788, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6902, -7.6897, -7.6898, -7.6898, -7.6899, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.69, -7.6901, -7.6901, -7.6901, -7.6901, -1.6588, -1.6588, -1.6895, -2.2184, -2.327, -2.327, -3.5428, -3.6985, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4767, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4768, -7.4761, -7.4721, -7.4721, -7.4721, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4755, -7.4757, -7.4759, -7.4764, -7.4765, -7.4765, -7.4766, -7.4766, -7.4768, -7.4768, -7.4768], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.6968, 0.6962, 0.6962, 0.6962, 0.6962, 0.6962, 0.6962, 0.6962, 0.6962, 0.6961, 0.6961, 0.6961, 0.6866, 0.6866, 0.6862, 0.6772, 0.6772, 0.6749, 0.6739, 0.6726, 0.6715, 0.6598, 0.6583, 0.6583, 0.6383, 0.4801, 0.3461, 0.3054, 0.2373, 0.1906, -0.0082, 2.168, 2.1667, 2.1663, 2.1647, 2.1646, 2.1627, 2.1616, 2.1593, 2.1568, 2.1557, 2.1521, 2.1513, 2.1494, 2.1487, 2.145, 2.1404, 2.1402, 2.1369, 2.134, 2.1338, 2.1319, 2.1311, 2.1251, 2.1234, 2.1223, 1.8961, 1.4141, 1.0598, 1.0496, 0.7861, 2.4088, 2.3912, 2.3878, 2.3848, 2.3837, 2.3809, 2.3763, 2.3692, 2.3691, 2.3679, 2.3672, 2.3654, 2.3634, 2.3623, 2.361, 2.3582, 2.3558, 2.3464, -0.1608, -2.7032, -2.7087, -2.7318, -2.7372, -2.7624, -2.7898, -2.7933, -2.8376, -2.8518, -2.8605, -2.8704, -3.0128, -5.6923, -3.532, -3.4877, -5.9359, -3.497, -2.896, -3.3965, -3.4601, 2.7851, 2.7654, 2.7636, 2.7611, 2.7597, 2.7489, 2.7445, 2.7419, 2.7415, 2.7409, 2.7399, 2.7367, 2.7364, 2.7364, 2.735, 2.7336, 2.7308, 2.7271, 2.7267, 2.7251, 2.7247, 2.4304, -2.4022, -2.4527, -2.5144, -2.533, -2.539, -2.5524, -2.5587, -2.5624, -3.1314, -2.8401, -2.7742, -2.6758, -3.1947, -3.6073, 2.8991, 2.887, 2.884, 2.8723, 2.8651, 1.8255, 1.7001, 1.235, 0.137, -2.1813, -2.1867, -2.2098, -2.2152, -2.2176, -2.2404, -2.2681, -2.2713, -2.3156, -2.3298, -2.3385, -2.3484, -2.3545, -2.3623, -2.3623, -2.3675, -2.3678, -2.374, -2.3778, -2.378, -2.3928, -2.394, -5.1699, -3.0099, -2.6336, -2.5896, -2.4912, -2.5137, -3.7385, -2.8335, -5.2325, -2.9891, -2.9671, -2.8745, -2.5091, -3.0645, -3.535, -3.081, 3.0339, 3.0246, 3.0192, 3.0188, 3.0171, 3.0171, 3.016, 3.0093, 2.9948, 2.9948, 2.9948, 2.9939, 2.9937, 2.1896, 2.0614, -1.8795, -1.8849, -1.908, -1.9134, -1.916, -1.9386, -1.9654, -1.9694, -2.0138, -2.0276, -2.0367, -2.0466, -2.0527, -2.0605, -2.0605, -2.8081, -2.2872, -2.2071, -2.5316, -3.1097, -5.1121, -4.8686, -2.1894, -2.1171, -5.439, -2.7383, -2.6639, -2.3976, 3.2599, 3.2544, 3.2509, 3.2425, 3.0472, 2.8244, 2.6969, 0.7737, -1.5852, -1.5907, -1.6138, -1.6192, -1.6218, -1.6444, -1.672, -1.6752, -1.7195, -1.7337, -1.7424, -1.7524, -1.7585, -1.7663, -1.7663, -1.7714, -1.7718, -1.778, -1.7814, -1.782, -1.7968, -1.7968, -1.7977, -1.8225, -2.4135, -4.574, -1.9933, -2.0374, -2.4683, -4.8177, -2.3508, -2.8591, -1.9176, -2.8266, -2.3696, -3.7128, -2.2374, -4.6365, -1.859, -2.7504, -3.0834, -3.0248, 3.2568, 3.2522, 3.2458, 3.2451, 3.2422, 3.2408, 3.2358, 3.2324, 3.2324, 3.2324, 3.2191, -1.6877, -1.6932, -1.7164, -1.7218, -1.7243, -1.747, -1.7746, -1.7777, -1.8221, -1.8363, -1.8451, -1.855, -1.8689, -1.8689, -1.874, -1.8743, -1.8805, -1.8843, -1.8846, -2.5163, -2.0154, -1.994, -2.096, -4.7389, -5.2473, -1.9977, -2.1132, -2.1402, -4.9204, -2.4446, -4.677, -2.3866, -2.9293, -2.4816, -2.9181, 3.4291, 3.4235, 3.4235, 3.4228, 2.0222, -1.3005, -1.3059, -1.329, -1.3344, -1.337, -1.3596, -1.3872, -1.3904, -1.4348, -1.4489, -1.4577, -1.4676, -1.4737, -1.4815, -1.4815, -1.4867, -1.487, -1.4932, -1.497, -1.4972, -1.512, -1.512, -1.513, -1.5132, -1.5285, -2.0454, -1.6643, -2.6539, -4.5329, -2.0265, -2.0861, -4.1264, -4.13, -4.8599, -4.0997, -4.0997, -4.0997, -4.1268, -4.1268, -4.1268, -4.1268, -4.1268, -4.1268, -4.2895, -1.5619, -1.781, -1.9213, -2.0572, -2.0662, -2.542, 3.4716, 3.4716, 3.4711, 3.4586, 3.4552, 3.4552, -0.3418, -0.8685, -1.0871, -1.0925, -1.1156, -1.121, -1.1236, -1.1462, -1.1738, -1.177, -1.2214, -1.2356, -1.2443, -1.2542, -1.2603, -1.2681, -1.2681, -1.2733, -1.2736, -1.2798, -1.2836, -1.2838, -1.2986, -1.2986, -1.299, -3.8818, -3.8818, -3.8819, -3.9123, -3.9123, -3.9123, -3.9123, -3.9123, -3.9123, -3.912, -3.9158, -1.8316, -1.8726, -4.3195, -4.076, -1.7078, -1.5676, -1.3971, -1.9159, -1.4955]}, \"token.table\": {\"Topic\": [3, 3, 8, 3, 2, 2, 3, 2, 7, 4, 1, 5, 1, 1, 5, 3, 2, 2, 2, 2, 2, 8, 1, 1, 1, 2, 4, 8, 8, 2, 1, 2, 1, 2, 7, 7, 2, 2, 2, 3, 3, 3, 4, 2, 6, 6, 6, 7, 1, 6, 6, 3, 8, 2, 2, 5, 1, 2, 4, 2, 4, 6, 4, 4, 4, 4, 8, 1, 3, 5, 7, 10, 3, 1, 7, 3, 8, 1, 5, 9, 10, 1, 1, 8, 9, 4, 4, 3, 3, 3, 8, 6, 3, 2, 5, 4, 4, 4, 4, 2, 1, 1, 1, 2, 10, 10, 10, 2, 2, 6, 6, 1, 2, 4, 4, 2, 1, 2, 4, 4, 5, 1, 1, 1, 6, 6, 6, 6, 1, 2, 6, 7, 4, 1, 1, 1, 3, 8, 2, 1, 1, 1, 9, 9, 9, 10, 10, 10, 1, 1, 1, 2, 4, 4, 3, 5, 7, 5, 8, 6, 3], \"Freq\": [0.9984435834191681, 0.979145697576117, 0.9684896580238083, 0.934207475782704, 0.9924871437277287, 0.9746742444299764, 0.9768324400633788, 0.33255621052348133, 0.6235428947315275, 0.9603028911146896, 0.7010306453829145, 0.29517079805596397, 0.9951585508297307, 0.9779288920130572, 0.9614283275856652, 0.9629343485058454, 0.9786737658221971, 0.9621505424022989, 0.955652456658849, 0.9636731305601615, 0.960860409101805, 0.9549285726811678, 0.9969325895675661, 0.996932587758198, 0.9969325860806436, 0.25186241254464753, 0.6926216344977807, 0.9483210136690343, 0.9483210136690364, 0.9875884236069976, 0.9757380223610859, 0.9642323580725588, 0.9187433490530247, 0.9577625450745395, 0.9859157083177903, 0.9621778429334039, 0.9308789469836927, 0.9328165149216946, 0.9816612088934261, 0.9572766917191623, 0.9673218424181533, 0.9689762084116262, 0.9425461688671666, 0.9623714141663057, 0.9752969075588573, 0.9567564270757968, 0.9572851760306637, 0.9881884771223797, 0.6088585388270955, 0.36531512329625726, 0.9365494174483704, 0.9622054839173549, 0.9827786224100494, 0.9620626333068074, 0.9540016257958659, 0.9613984110556869, 0.5026436252001487, 0.46674050911442383, 0.9652580363886408, 0.9853122652648134, 0.9666527599157915, 0.9330279940187446, 0.9256711877906426, 0.9089279003256698, 0.9947052908880712, 0.9704202455264458, 0.990347241265604, 0.49223652263423284, 0.0760210845767155, 0.3344927721375482, 0.08172266591996916, 0.013303689800925212, 0.9779805960472878, 0.9705905645562707, 0.9784638321764738, 0.9618029250939217, 0.9811506308041175, 0.6747322879473775, 0.06058820544833594, 0.239598812454783, 0.022032074708485793, 0.997302684239708, 0.9958324430540323, 0.9550047227784048, 0.9921028494058036, 0.9586783230458161, 0.9040275515091512, 0.9773096364593111, 0.9584581354777527, 0.9424070379672467, 0.9755256947671538, 0.9720458696974765, 0.9625227765300305, 0.9651558731980724, 0.9715529954266033, 0.9352235072569881, 0.9476049432045092, 0.9476049432045047, 0.9158285318739458, 0.9746482134888944, 0.9976521833786439, 0.9958324614576464, 0.9958324458133013, 0.9689717002669204, 0.9860567746158705, 0.9860567746158718, 0.977202846375414, 0.9728865011589887, 0.96746513865939, 0.9834850796528474, 0.9557675612940467, 0.22618657211766185, 0.7431844512437461, 0.967737592044238, 0.9345142121305121, 0.9827505417893897, 0.7848879081604861, 0.16523955961273393, 0.9301854541224113, 0.9581132918811391, 0.9844146962651519, 0.9969325876130526, 0.9969325879814421, 0.9969325839630104, 0.9855750252693547, 0.9527333777535011, 0.9731764676940007, 0.9731764676939963, 0.6481271022363351, 0.32406355111816754, 0.43133263771668107, 0.569359081786019, 0.9427034587323706, 0.9707982255805512, 0.9707982255805531, 0.9638530436529448, 0.9378883604656354, 0.9483210136690234, 0.9213466194429646, 0.9831669703083896, 0.9831669703083755, 0.981543414671392, 0.9893599453640382, 0.9893599453640413, 0.9724317270683267, 0.982630055204353, 0.9824274698572634, 0.9824274698572563, 0.9680447816337062, 0.9628972264608664, 0.9628972264608793, 0.9888354361573954, 0.9527794870262138, 0.9631180001229737, 0.9660660378280074, 0.1951977788354166, 0.8003108932252081, 0.9480645705270324, 0.9742954201596322, 0.9664775152415942, 0.9601653867962054], \"Term\": [\" \", \"  \", \" 10\", \" 20\", \" 2020\", \" 2020 \", \" amazon\", \" buy\", \" buy\", \" covid19\", \" cvs\", \" cvs\", \" cvs \", \" cvs  share\", \" cvs health\", \" free\", \" ishares\", \" ishares trust\", \" ishares trust \", \" llc\", \" llc buy\", \" new\", \" nyse\", \" nyse \", \" nyse  cvs\", \" p\", \" p\", \" reg\", \" reg \", \" sell\", \" share\", \" spdr\", \" stock\", \" vanguard\", \" walgreens\", \" walgreens \", \" week\", \"13 \", \"2020 \", \"ad \", \"ad preview\", \"ad preview \", \"alert \", \"amazon \", \"amazon launch\", \"amazon launch online\", \"amazon launch online pharmacy\", \"amazon pharmacy\", \"asset management\", \"asset management\", \"best deal\", \"black friday\", \"body wash\", \"bond etf\", \"bond etf \", \"buy nembutal\", \"capital management\", \"capital management\", \"care facilities\", \"corp \", \"covid vaccine\", \"covid vaccines\", \"covid19 test\", \"covid19 vaccination\", \"covid19 vaccine\", \"covid19 vaccine \", \"covid19 vaccines\", \"cvs \", \"cvs \", \"cvs \", \"cvs \", \"cvs \", \"cvs  \", \"cvs  share\", \"cvs  walgreens\", \"cvs ad\", \"cvs deal\", \"cvs health\", \"cvs health\", \"cvs health\", \"cvs health\", \"cvs health \", \"cvs health  nyse\", \"cvs hire\", \"cvs pharmacy\", \"cvs photo\", \"cvs photo \", \"cvs walgreens\", \"cvs weekly\", \"cvs weekly ad\", \"deal \", \"deal cvs\", \"deal week\", \"etf \", \"gift card\", \"gift set\", \"google alert\", \"google alert \", \"gov \", \"group \", \"health \", \"health  nyse\", \"health  nyse \", \"hold \", \"hold cvs\", \"hold cvs health\", \"hold cvs health \", \"ishares trust\", \"ishares trust \", \"launch online\", \"launch online pharmacy\", \"llc buy\", \"llc buy\", \"longterm care\", \"longterm care facilities\", \"management \", \"management llc\", \"management llc\", \"n wild\", \"news \", \"nurse home\", \"nyse \", \"nyse  cvs\", \"nyse  cvs \", \"online pharmacy\", \"online pharmacy \", \"open online\", \"open online pharmacy\", \"partner llc\", \"partner llc\", \"pharmacy \", \"pharmacy \", \"photo \", \"position cvs\", \"position cvs health\", \"position cvs health \", \"preview \", \"reg \", \"service \", \"share cvs\", \"share cvs health\", \"share cvs health \", \"stake cvs\", \"stake cvs health\", \"stake cvs health \", \"stock hold\", \"stock hold cvs\", \"stock hold cvs health\", \"stock position\", \"stock position cvs\", \"stock position cvs health\", \"trust \", \"vaccine \", \"vaccine distribution\", \"vaccine rollout\", \"walgreens \", \"walgreens \", \"walgreens  cvs\", \"walmart \", \"week \", \"weekly ad\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 4, 3, 8, 6, 10, 9, 7, 2, 5]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el5137757277961288828409403\", ldavis_el5137757277961288828409403_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el5137757277961288828409403\", ldavis_el5137757277961288828409403_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el5137757277961288828409403\", ldavis_el5137757277961288828409403_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x         y  topics  cluster       Freq\n",
       "topic                                                \n",
       "0      0.251613 -0.141032       1        1  49.655832\n",
       "3     -0.197715 -0.061234       2        1  11.302340\n",
       "2      0.057937  0.214819       3        1   8.964413\n",
       "7     -0.216842 -0.055534       4        1   6.123613\n",
       "5      0.282501  0.021069       5        1   5.402590\n",
       "9     -0.151467  0.191568       6        1   4.743586\n",
       "8      0.119742  0.220499       7        1   3.786577\n",
       "6     -0.195712 -0.029094       8        1   3.781280\n",
       "1      0.031965 -0.261032       9        1   3.187309\n",
       "4      0.017979 -0.100028      10        1   3.052457, topic_info=                   Term        Freq       Total Category  logprob  loglift\n",
       "62                 cvs   526.000000  526.000000  Default  30.0000  30.0000\n",
       "68           cvs health  363.000000  363.000000  Default  29.0000  29.0000\n",
       "0                        316.000000  316.000000  Default  28.0000  28.0000\n",
       "9                   cvs  379.000000  379.000000  Default  27.0000  27.0000\n",
       "59      covid19 vaccine  125.000000  125.000000  Default  26.0000  26.0000\n",
       "..                  ...         ...         ...      ...      ...      ...\n",
       "52   capital management    0.154112   27.852736  Topic10  -7.4766  -1.7078\n",
       "103      management llc    0.154104   24.207278  Topic10  -7.4766  -1.5676\n",
       "33                 week    0.154082   20.410817  Topic10  -7.4768  -1.3971\n",
       "40              amazon     0.154082   34.290295  Topic10  -7.4768  -1.9159\n",
       "6                amazon    0.154082   22.521775  Topic10  -7.4768  -1.4955\n",
       "\n",
       "[458 rows x 6 columns], token_table=      Topic      Freq            Term\n",
       "term                                 \n",
       "0         3  0.998444                \n",
       "1         3  0.979146                \n",
       "2         8  0.968490              10\n",
       "3         3  0.934207              20\n",
       "4         2  0.992487            2020\n",
       "...     ...       ...             ...\n",
       "139       7  0.800311      walgreens \n",
       "140       5  0.948065  walgreens  cvs\n",
       "141       8  0.974295        walmart \n",
       "142       6  0.966478           week \n",
       "143       3  0.960165       weekly ad\n",
       "\n",
       "[161 rows x 3 columns], R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[1, 4, 3, 8, 6, 10, 9, 7, 2, 5])"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pyLDAvis.sklearn.prepare(lda_tf, dtm_tf, tf_vectorizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = pd.read_csv('cvs_articles.csv')\n",
    "\n",
    "#Remove the columns\n",
    "text = text.drop(columns=['title'], axis=1)\n",
    "#, 'crawled', 'entities', 'external_images', 'external_links', 'highlightText', 'highlightThreadTile', \n",
    "#                          'highlightTitle', 'language', 'ord_in_thread', 'parent_url', 'published', 'rating', 'thread',\n",
    "#                         'title', 'updated', 'url', 'uuid'], axis=1)\n",
    "\n",
    "import gensim\n",
    "from gensim.utils import simple_preprocess\n",
    "def sent_to_words(sentences):\n",
    "    for sentence in sentences:\n",
    "        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations\n",
    "data = text.values.tolist()\n",
    "data_words = list(sent_to_words(data))\n",
    "\n",
    "from nltk.corpus import stopwords\n",
    "stop_words = stopwords.words('english')\n",
    "stop_words.extend(['from', 'subject', 're', 'edu', 'use'])\n",
    "\n",
    "def remove_stopwords(texts):\n",
    "    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]\n",
    "\n",
    "def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):\n",
    "    \"\"\"https://spacy.io/api/annotation\"\"\"\n",
    "    texts_out = []\n",
    "    for sent in texts:\n",
    "        doc = nlp(\" \".join(sent)) \n",
    "        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])\n",
    "\n",
    "import spacy\n",
    "data_words_nostops = remove_stopwords(data_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Coherence Score:  0.39615725611903085\n"
     ]
    }
   ],
   "source": [
    "id2word = corpora.Dictionary(data_words)\n",
    "\n",
    "texts = data_words_nostops\n",
    "\n",
    "corpus = common_corpus\n",
    "\n",
    "from gensim.models import CoherenceModel\n",
    "cm = CoherenceModel(model=model, texts= data_words_nostops, corpus=common_corpus, coherence='c_v')\n",
    "coherence = cm.get_coherence()  \n",
    "print('\\nCoherence Score: ', coherence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "topic_taxonomy = {\n",
    "     \"Organization\":\n",
    "     {\n",
    "        \"Amazon Pharmacy\":  \"Amazon Pharmacy AMZ\",\n",
    "        \"CVS\":  \"CVS\",\n",
    "        \"Walgreens\": \"Walgreens\",\n",
    "        \"Government\": \"U.S. Food and Drug Administration FDA Division of Drug Information CDER The Office of Drug Evaluation\" \n",
    "     },\n",
    "     \"Health\":\n",
    "     {\n",
    "         \"Medicines\": \"Levothyroxine\tLevothroid\tLevoxyl\tSynthroid\tUnithroid\tLisinopril\tPrinivil\tZestril\tAtorvastatin\tLipitor\tAmlodipine\tNorvasc\tMetoprolol\tLopressor \tToprol XL\tOmeprazole\tPrilosec\tSimvastatin\tZocor\tLosartan\tCozaar\tAlbuterol\tAccuneb\tProair\tProventil\tVentolin\tGabapentin \tNeurontin\tHydrochlorothiazide \tEsidrix\tHydrodiuril\tMicrozide\tOretic\tZide\tHydrocodone\tAcetaminophen\tLortab\tNorco\tVicodin\tSertraline \tZoloft\tFurosemide \tLasix\tFluticasone\tFlonase\tFlovent\tCutivate\tTylenol\tAmoxicillin\tAmoxil\tPolymox\tTrimox\tAlprazolam\tXanax\tAtenolol\tTenormin\tCitalopram\tCelexa\tInsulin glargine\tLantus\tToujeo\tMontelukast\tSingulair\tTrazodone\tDesyrel\tPantoprazole\tProtonix\tEscitalopram\tLexapro\tPravastatin\tPravachol\tBupropion\tBudeprion\tBuproban\tWellbutrin\tZyban\tFluoxetine\tProzac\tRapiflux\tSarafem\tSelfemra\tCarvedilol\tCoreg\tPrednisone\tDeltasone\tTamsulosin\tFlomax\tPotassium\tK-Dur\tKlor-Con\tKlotrix\tMicro-K\tSlow-Kclopidogrel\tPlavix\tIbuprofen\tAdvil\tMotrin\tMeloxicam\tMobic\tRosuvastatin\tCrestor\tAspirin\tTramadol\tUltram\tZolpidem\tAmbien\tIntermezzo\tWarfarin\tCoumadin\tClonazepam Klonopin\tPropranolol \tInderal\tInnoPran\tPronol\tGlipizide\tGlucotrol\tDextroamphetamine\tamphetamine salts \tAdderall\tCyclobenzaprine\tFlexeril\tMethylphenidate\tConcerta\tMetadate\tRitalin\tDuloxetine\tCymbalta\tAzithromycin\tZithromax\tRanitidine\tZantac\tMetformin Hydrochloride\tLosartan Potassium\tGabapentin\tAcetaminophen\tHydrocodone Bitartrate\tHydrochlorothiazide\tSertraline Hydrochloride\tFurosemide\tPantoprazole Sodium\tEscitalopram Oxalate\tFluoxetine Hydrochloride\tDextroamphetamine\tDextroamphetamine Saccharate\tAmphetamine\tAmphetamine Aspartate\tTramadol Hydrochloride\tPravastatin Sodium\tTrazodone Hydrochloride\tTamsulosin Hydrochloride\tClopidogrel Bisulfate\tClonazepam\tOxycodone\tAllopurinol\tVenlafaxine\tHydrochlorothiazide\tLisinopril\tPropranolol Hydrochloride\tHydrochlorothiazide\tLosartan Potassium\tCetirizine\tEstradiol\tEthinyl Estradiol\tNorethindrone\tLorazepam\tQuetiapine Fumarate\tZolpidem Tartrate\tErgocalciferol\tBudesonide\tFormoterol\tSpironolactone\tOndansetron\tInsulin Aspart\tApixaban\tNaproxen\tLamotrigine\tFluticasone Propionate\tSalmeterol Xinafoate\tPregabalin\tGlimepiride\tDiclofenac\tFenofibrate\tParoxetine\tClonidine\tLoratadine\tDiltiazem Hydrochloride\tHydroxyzine\tAmitriptyline\tDoxycycline\tEthinyl Estradiol\tNorgestimate\tLisdexamfetamine Dimesylate\tSitagliptin Phosphate\tLatanoprost\tCephalexin\tTizanidine\tFinasteride\tLovastatin\tTopiramate\tInsulin Lispro\tSulfamethoxazole\tTrimethoprim\tBuspirone Hydrochloride\tOseltamivir Phosphate\tFerrous Sulfate\tAmoxicillin\tClavulanate Potassium\tValsartan\tLevetiracetam\tHydralazine Hydrochloride\tMirtazapine\tRivaroxaban\tAripiprazole\tOxybutynin\tEsomeprazole\tAlendronate Sodium\tFolic Acid\tTriamcinolone\tTiotropium\tThyroid\tCiprofloxacin\tIsosorbide Mononitrate\tSumatriptan\tInsulin Detemir\tBenzonatate\tFamotidine\tDiazepam\tRopinirole Hydrochloride\tHydrochlorothiazide\tTriamterene\tBenazepril Hydrochloride\tMetronidazole\tMethocarbamol\tNifedipine\tBaclofen\tMethotrexate\tTestosterone\tEzetimibe\tCelecoxib\tGuanfacine\tDonepezil Hydrochloride\tHydroxychloroquine\tClindamycin\tDivalproex Sodium\tMorphine\tEthinyl Estradiol\tLevonorgestrel\tPrednisolone\tEnalapril Maleate\tPioglitazone\tCyanocobalamin\tNorethindrone\tMeclizine Hydrochloride\tValacyclovir\tAlbuterol Sulfate\tIpratropium Bromide\tDocusate\tLiraglutide\tHydrocortisone\tVerapamil Hydrochloride\tCefdinir\tNortriptyline Hydrochloride\tTimolol\tDulaglutide\tPromethazine Hydrochloride\tAcyclovir\tFluconazole\tMethylprednisolone\tMetformin Hydrochloride\tSitagliptin Phosphate\tRamipril\tDexmethylphenidate Hydrochloride\tBrimonidine Tartrate\tOxcarbazepine\tRisperidone\tLevofloxacin\tChlorthalidone\tAtomoxetine Hydrochloride\tPolyethylene Glycol 3350\tCalcium\tCholecalciferol\tMupirocin\tEthinyl Estradiol\tEtonogestrel\tDrospirenone\tEthinyl Estradiol\tPhentermine\tCarbidopa\tLevodopa\tOmega-3-acid Ethyl Esters\tDesogestrel\tEthinyl Estradiol\tGuaifenesin\tRizatriptan Benzoate\tIrbesartan\tProgesterone\tDoxazosin Mesylate\tLinagliptin\tAdalimumab\tNitrofurantoin\tBudesonide\tAmlodipine Besylate\tBenazepril Hydrochloride\tHydrochlorothiazide\tValsartan\tDigoxin\tAcetaminophen\tButalbital\tInsulin Degludec\tKetoconazole\tNitroglycerin\tTemazepam\tAmiodarone Hydrochloride\tMemantine Hydrochloride\tCanagliflozin\tKetorolac Tromethamine\tLiothyronine Sodium\tLithium\tDicyclomine Hydrochloride\tPramipexole Dihydrochloride\tNebivolol Hydrochloride\tTerazosin\tMagnesium\tColchicine\tSucralfate\tMedroxyprogesterone Acetate\tGlyburide\tCarbamazepine\tGemfibrozil\tNystatin\tSildenafil\tPrazosin Hydrochloride\tBeclomethasone\tLinaclotide\tDesvenlafaxine\tInsulin Human\tInsulin Isophane Human\tClobetasol Propionate\tEmpagliflozin\tLansoprazole\tErythromycin\tGuaifenesin\tCodeine Phosphate\tPseudoephedrine Hydrochloride\tBumetanide\tDexlansoprazole\tMometasone\tEstrogens, Conjugated\tHydromorphone Hydrochloride\tLetrozole\tOlanzapine\tLevocetirizine Dihydrochloride\tCyclosporine\tDapagliflozin\tLabetalol\tAnastrozole\tMesalamine\tSodium\tMirabegron\tLidocaine\tMycophenolate Mofetil\tOfloxacin\tIndomethacin\tPenicillin V\tMetoclopramide Hydrochloride\tOlmesartan Medoxomil\tAzelastine Hydrochloride\tEmtricitabine\tEpinephrine\tIpratropium\tTamoxifen Citrate\tLurasidone Hydrochloride\tBuprenorphine\tCalcitriol\tRanolazine\tDorzolamide Hydrochloride\tTimolol Maleate\tFormoterol Fumarate\tMometasone Furoate\tBetamethasone\tCalcium\tTadalafil\tDextroamphetamine Sulfate\tMethimazole\tUmeclidinium Bromide\tVilanterol Trifenatate\tUmeclidinium Bromide\tDiphenhydramine Hydrochloride\tTicagrelor\tFexofenadine Hydrochloride\tSotalol Hydrochloride\tSodium Fluoride\tInsulin Isophane\tSolifenacin Succinate\tFlecainide Acetate\tBenztropine Mesylate\tEszopiclone\tPolymyxin B Sulfate\tTrimethoprim Sulfate\tPhenytoin\tBromfenac Sodium\tPrednisolone Acetate\tGatifloxacin\tTorsemide\tSennosides\tTolterodine Tartrate\tBimatoprost\tEtanercept\tTravoprost\tMinocycline Hydrochloride\tBisoprolol Fumarate\tHydrochlorothiazide\tNabumetone\tIsotretinoin\tDoxepin Hydrochloride\tPrimidone\tDexamethasone\tBisoprolol Fumarate\tExenatide\tChlorhexidine\tEthinyl Estradiol\tNorgestrel\tDutasteride\tModafinil\tOlopatadine\tFentanyl\tTelmisartan\tPolyethylene Glycol 3350\tTretinoin\tDexamethasone\tNeomycin Sulfate\tPolymyxin B Sulfate\tPseudoephedrine\tInsulin Human\tSacubitril\tValsartan\tPancrelipase Lipase\tPancrelipase Protease\tPancrelipase Amylase\tBrompheniramine Maleate\tDextromethorphan Hydrobromide\tPseudoephedrine Hydrochloride\"\n",
    "     },\n",
    "     \"Shipping\":\n",
    "     {\n",
    "        \"Shipping\": \"Accessorial service\tAccrual\tAcquiescence\tAd Valorem\tAd Valorem Duty\tAd Valorem Freight\tAdvice of Shipment\tAdvising bank\tAffreight\tAffreightment Contract of\tAgent (Agt.)\tAir Freight Forwarder\tAir waybill\tAll commodity rate\tAll inclusive rate (AI)\tAllowance\tAlso Notify Party\tApparent Authority\tApparent Good Order\tArbitrary\tArbitration\tArrival notice\tAwkward cargo\tB/L Master\tBank guarantee\tBareboat Charter Party\tBasic freight\tBdl.\tBerth term\tBill of lading (B/L)\tBill of lading Ton\tBlack powder content\tBlanket waybill\tBlocked train\tBlocking or bracing\tBls.\tBobtail\tBona fide\tBond\tBond port\tBonded Logistics Park (Center)\tBonded freight\tBonded indemnity\tBonded warehouse\tBooking\tBooking number\tBooking status\tBottom air delivery\tBox\tBoxcar\tBreak-bulk cargo\tBreakbulk (BB)\tBritish Thermal Unit (BTU)\tBroken stowage\tBroker\tBrokerage\tBrokerage license\tBulk carriers\tBulk freight\tBulk-freight container\tBull rings\tBunker surcharge (BAF BSC)\tBunkers\tBx.\tC-TPAT/CTPAT\tC.A.F.\tC.B.M. (C.M.)\tC.F. (Cu. Ft.)\tC.F.S.\tC.I.\tC.K.D.\tC.M.\tC.O.D.\tC.O.F.C.\tC.O.G.S.A.\tCFCs Chlorofluorocarbons\tCFR\tCFS/CFS\tCFS/CY\tCIF\tCIP\tCPT\tCSC\tCSI\tCY\tCY/CFS\tCY/CY\tCapacity/Weight (Container)\tCaptains protest\tCar pooling\tCargo manifest\tCargo nature\tCarload\tCarload rate\tCarnet\tCarrier\tCarriers lien\tCartage\tCellular vessel\tCertificate of origin\tCharter party (C/P)\tChartered ship\tCharterer\tChassis\tChilling\tChilling injury\tChock\tClean bill of lading\tClearance limits\tCleared without examination\tClip-on\tClosing date\tCollapsible container\tCollecting bank\tCombined transport\tCombined transport document (CTD)\tCombined transport operator (CTO)\tCommercial invoice\tCommodity\tCommodity rate\tCommon carrier\tCommon tariff\tCompressor\tConcealed damage\tConcealed loss\tCondenser\tConference\tConference rate\tConfirmed letter of credit\tConfirming bank\tConnecting carrier\tConsignee\tConsignor\tConsolidated cargo\tConsolidation\tConsolidator\tConsortium\tContainer\tContainer freight station (CFS C.F.S.)\tContainer gross weight\tContainer load plan (CLP)\tContainer number\tContainer part load\tContainer seal number\tContainer service charge\tContainer size\tContainer status\tContainer type\tContainerizable cargo\tContainerization\tContainerload\tContainership\tContract carrier\tControlled atmosphere (CA)\tCopy B/L\tCorner castings\tCorner posts (door posts)\tCorrection memo\tCorrector\tCost matrix\tCost insurance and freight (C.I.F.)\tCredit agreement\tCu.\tCubic foot\tCustom house\tCustomer’s own transport\tCustomhouse broker\tCustoms bonded warehouse\tCustoms invoice\tCut-off time\tCwt.\tD & H\tD.W.\tDAF\tDDC\tDDP\tDDU\tDEQ\tDES\tDFG\tDOT\tDST\tDangerous Cargo\tDangerous Goods\tDead Space\tDeadweight Tonnage (D/W)\tDedicated Unit Train\tDelivery Order\tDemurrage (Dem.)\tDeployment\tDepot Container\tDestination\tDetention\tDetention Charge\tDevanning\tDifferential Rate\tDistribution\tDiversion\tDivert\tDock\tDock Receipt\tDockage\tDocumentary Credit\tDoor-to-Door\tDouble-Deck Load\tDray\tDrayage\tDry Cargo\tDry Dock\tDry-Bulk Container\tDunnage (Dge.)\tDuty Free Zone\tDwell Time\tECU\tETA\tETD\tEXW\tEn route\tEntry Declaration\tEthylene\tEvaporation\tEvaporator\tEx Work\tExpiry Date\tExport\tExport Declaration\tExpress B/L\tF.A.K.\tF.A.S.\tF.C.L.\tF.E.U.\tF.I.O.\tF.O.B.\tFAS\tFCA\tFCL/FCL\tFCL/LCL\tFDA\tFEFC\tFEU\tFF\tFMC\tFOB\tFeeder Service\tFeeder Vessel\tFinal Destination (FND)\tFlash Point\tForwarder\tFree Trade Zone\tFreight\tFreight Ton\tFresh Air Exchange (FAE)\tFumigation\tG.R.I.\tGATT\tGateway\tGeneral Average\tGeneral Order\tGenerator Set\tGenset (Generator Set)\tGooseneck\tGross Tonnage\tGross Weight\tGroupage\tHague Rules\tHague-Visby Rules\tHamburg Rules\tHarmonized Commodity Description and Coding System\tHatch\tHaulage\tHaulier\tHeavy Lift\tHeavy-Lift Charge\tHigh Cube\tHouse B/L\tHouse-to-House (H/H)\tHouse-to-Pier (H/P)\tHub\tHull\tHull Underwriter\tI.C.C.\tI.M.C.O.\tI.P.I.\tIATA Cargo Agent\tIFP\tIMDG Code\tISPS\tImport\tImport License\tImport Permit\tIn Transit\tInbound\tInbound Editing\tIncoterms\tInland Clearance Depot\tInsulated Container\tInsulated Tank Container\tInsurance\tInsurance Certificate\tInsurance With Average-Clause\tInsurance All-Risk\tInsurance General-Average\tInsurance Particular-Average\tInterchange\tInterchange Points\tIntercoastal\tIntermodal\tIntermodal Transport\tInternet Applications - Shipment Detail\tInterstate\tInterstate Traffic\tIntrastate\tIntrastate Traffic\tIssuing Bank\tKnot\tL.C.L.\tLCL - NVO\tLCL/FCL\tLCL/LCL\tLetter of Credit\tLetter of Indemnity\tLien\tLift-On/Lift-Off (LO-LO)\tLighter\tLighterage\tLine-haul\tLiner\tLiner Terms\tLiter\tLloyds Registry\tLo/Lo\tLoad Factor\tLoadwire\tLocking Bar\tLogistics\tLong Ton\tLongshoreman\tLoose\tLow-Bed\tM.L.B.\tM/V\tMQC\tMT\tMalpractice\tManifest\tManifest Traveling\tMaritime\tMarks & Nos.\tMaster Bill of Ladings\tMaster Lease\tMaster Lease Leasing Cost\tMates Receipt\tMaximum Payload\tMaximum Rate\tMeasurement Ton\tMemo B/L\tMicrobridge\tMileage\tMini Landbridge (MLB)\tMini-Bridge\tMinimum Charge\tModified Atmosphere (MA)\tMultimodal Transport\tN.O.I.B.N.\tN.O.S.\tN.V.O.C.C.\tNVOCC\tNegotiable B/L\tNegotiating Bank\tNet Tonnage\tNet Weight\tNeutral Body\tNon-negotiable B/L\tNon-vessel Owning / Operating Common Carrier (N.V.O.C.C.)\tO.C.P. rate\tOBL\tOcean Bill of Lading (Ocean B/L)\tOcean Freight\tOcean Route\tOn Board\tOn Board B/L\tOn Deck\tOne-Way lease\tOpen-Top Container\tOrigin\tOriginal Bill of Lading (O.B.L.)\tOutbound\tOverage\tOverheight Cargo\tOverland Common Point (O.C.P.)\tOverwidth\tP.& I.\tP.O.D.\tP.O.L.\tP.O.R.\tP/A\tPLRMU\tPSA\tPTI (Pre-trip Inspection)\tPWSC\tPallet\tPanama Canal Act\tPartial Shipments\tParticipating Carrier (Tariff)\tPartlow\tPartlow chart\tPayable Elsewhere\tPayload\tPer Diem\tPerils of the Sea\tPerishable Cargo\tPier\tPier-to-House (P/H)\tPier-to-Pier (P/P)\tPiggyback\tPilferage\tPilot\tPlace of Delivery\tPlace of Receipt\tPool (Container)\tPort\tPort Service Charge\tPort of Call\tPort of Discharge\tPort of Entry\tPort of Loading (POL)\tPort of arrival\tPower Pack\tPower of Attorney\tPratique Certificate\tPre-cooling\tPrepaid (Ppd.)\tPro Rata\tProtest\tPull-down\tQuarantine\tQuarantine buoy\tQuarantine declaration\tQuarantine dues\tQuarantine flag\tQuarantine harbor\tQuarantine signal\tQuarantine station\tQuay rent\tQuota\tRail Onboard B/L\tRailhead\tRamp\tReceipt for shipment B/L\tReconsignment (R/C)\tReefer\tRefrigerant\tRegistrar Accreditation Board (RAB)\tRelative Humidity\tRelay\tRelease note\tRespiration\tReturn air\tRevenue ton (R/T)\tRoll-On/Roll-Off (Ro/Ro)\tRoute (Rte.)\tRyan\tS.D.D.\tS.D.P.\tSCM\tSED\tSI\tSSN\tSTC\tSalvage loss\tSea waybill\tSeal (Container)\tSeal record\tService contract\tShip chandler\tShip owner\tShipped bill of lading\tShipped on board\tShipper\tShipper owned container\tShippers Export Declaration\tShippers Load & Count\tShipping order\tShipping permit\tShipside Delivery\tShort Term Lease\tShort cycling\tShut-out\tSlot\tSpreader\tStability\tStack Car\tStack Train\tStandard Industrial Classification (SIC)\tStandard International Trade Classification (SITC)\tStandard Rate\tStevedore\tStorage\tStore-Door Delivery (STOR/DOR)\tStore-Door PickUp\tStowage\tStraddle Carrier\tStraight Bill of Lading\tStripping\tStuffing\tSupply Chain Management\tSupply air\tSurcharge\tT-floor\tT.E.U.\tT.I.R.\tT.O.F.C.\tTDR\tTEU\tTHC\tTOS\tTRC\tTSN - Time-Space Network\tTVR\tTail\tTank Container\tTare Weight\tTariff (Trf.)\tTender\tTerminal\tThrough Rate\tThrough Service (Thru Service)\tTime Charter\tTonnage\tTontines\tTop air delievery\tTowage\tTramp\tTranship\tTransit Cargo\tTransit Port\tTransshipment Port\tTruck Onboard B/L\tTurnaround\tTwist Locks\tTwo-Way Pallet\tU.S.M.\tUCP\tUCP500\tUN\tUNCTAD\tUNCTAD MMO\tUSDA\tUnit Load\tUnit Train\tUnitization\tVCTSN \tVirtual Capacity Time-Space Network\tVanning\tVentilated Container\tVerified Gross Mass \tVGM\tVessels Manifest\tVol.\tVoyage Direction\tVoyage Number\tWarehouse\tWaybill \tWB\tWeight Cargo\tWharfage \tWhfge\tcm\"\n",
    "     },\n",
    "     \"Delivery\":\n",
    "     {\n",
    "        \"Delivery\":  \"Home Address Zip Code Town Freight Plane Apartment Package Packing Prime Truck Pick up\",\n",
    "     },    \n",
    "     \"Ecommerce\":\n",
    "     {\n",
    "        \"Ecommerce\":  \"SC\tSeller Central\tVC\tVendor Central\t3P\tThird-party seller \tAdvantage \tFBA\tFulfilled by Amazon\tFBM\tFulfilled by Merchant\tSFP\tSeller Fulfilled Prime \tPAN EU\tFC\tFulfilment Centre\tEFN\tEuropean Fulfilment Network\tMCI\tMulti-Country Inventory \tEAN\tEuropean Article Number \tGTIN\tGlobal Trade Identification Number \tISBN\tInternational Standard Book Number \tASIN\tAmazon Standard Identification Number \tSKU\tStock Keeping Unit \tadvertising\tAMG\tAmazon Media Group \tAMS\tAmazon Marketing Services \tDSP\tDemand Side Platform \tAAP \tAmazon Advertising Platform\tHSAs\tHeadline Search Ads \tPDAs\tProduct Display Ads \tSP\tSponsored Products \tLSA\tLock Screen Ads \tA+ \tEBC\tEnhanced Brand Content \tStorefront \tVine Voices \tACoS\tAdvertising Cost of Sale \treporting\tCOGS\tCost of Goods Sold \tRetail Revenue \tP-COGS \tContra-COGS \tSales Discounts \tPPM\tPure Product Margin \tNetPPM – SD\tNet Pure Profit Margin minus Sales Discounts \tRetail Fast Track BuyBox \tRepOOS\tReplenishable Out of Stock \tLBB\tLost Buy Box \tVLT\tVendor Lead Time \tProbRec\tProblem Receive \tBrand Registry \tBuy Box \tLightning Deals \tVerified Review \tBrowse Nodes \tAffiliate\tBlog \tCMS \tContent Management System\tConversion Rate \tCTA \tCall To Action\tCRO\tConversion Rate Optimisation\tDropshipping \tDomain Name \tEbay \tEcommerce \tEvolutionary Algorithms \tFulfilment \tGoogle Analytics \tGoogle Webmaster Tools \tInventory \tLong Tail \tLanding Page \tLogistics \tMargin \tMulti-Channel Ecommerce \tOutsource \tOlark \tPPC \tPayment Gateway \tPaypal \tPay Per Click \tSEO \tSERP \tSocial Signals \tSocial Media \tSplit Testing \tTraffic \tUsability\tWholesale \tWordPress \tWP Engine\"\n",
    "     }\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gensim, operator\n",
    "from scipy import spatial\n",
    "import numpy as np\n",
    "from gensim.models import KeyedVectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vocab_check(vectors, words):\n",
    "\n",
    "    output = list()\n",
    "    for word in words:\n",
    "        if word in vectors.vocab:\n",
    "            output.append(word.strip())\n",
    "        \n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_similarity(input1, input2, vectors):\n",
    "    s1words = set(vocab_check(vectors, input1.split()))\n",
    "    s2words = set(vocab_check(vectors, input2.split()))\n",
    "\n",
    "    output = vectors.n_similarity(s1words, s2words)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "def classify_topics(input, vectors):\n",
    "    feed_score = dict()\n",
    "    for key, value in topic_taxonomy.items():\n",
    "        max_value_score = dict()\n",
    "        for label, keywords in value.items():\n",
    "            max_value_score[label] = 0\n",
    "            topic = (key + ' ' + keywords).strip()\n",
    "            max_value_score[label] += float(calc_similarity(input, topic, vectors))\n",
    "\n",
    "            sorted_max_score = sorted(max_value_score.items(), key=operator.itemgetter(1), reverse=True)[0]\n",
    "            feed_score[sorted_max_score[0]] = sorted_max_score[1]\n",
    "    return sorted(feed_score.items(), key=operator.itemgetter(1), reverse=True)[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading Word2Vec model...\n",
      "Finished loading Word2Vec model...\n"
     ]
    }
   ],
   "source": [
    "model_path = '/Users/javierlasa/Downloads/wordvec/'\n",
    "def load_wordvec_model(modelName, modelFile, flagBin):\n",
    "    print('Loading ' + modelName + ' model...')\n",
    "    model = KeyedVectors.load_word2vec_format(model_path + modelFile, binary=flagBin)\n",
    "    print('Finished loading ' + modelName + ' model...')\n",
    "    return model\n",
    "\n",
    "model_word2vec = load_wordvec_model('Word2Vec', 'GoogleNews-vectors-negative300.bin', True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "([('Walgreens', 0.3735729455947876), ('Shipping', 0.32539650797843933), ('Ecommerce', 0.3119170069694519)],)\n",
      "([('Ecommerce', 0.34261244535446167), ('Shipping', 0.33746498823165894), ('Medicines', 0.3019953668117523)],)\n",
      "([('Shipping', 0.3171371817588806), ('Ecommerce', 0.2812742590904236), ('CVS', 0.23283356428146362)],)\n",
      "([('Amazon Pharmacy', 0.3972618579864502), ('Shipping', 0.3551642894744873), ('Ecommerce', 0.3461659550666809)],)\n",
      "([('Walgreens', 0.35508227348327637), ('Shipping', 0.3339124917984009), ('Ecommerce', 0.3167673945426941)],)\n",
      "([('Amazon Pharmacy', 0.4432898163795471), ('Ecommerce', 0.31570857763290405), ('Shipping', 0.30580177903175354)],)\n",
      "([('Walgreens', 0.3536291718482971), ('Shipping', 0.3294084966182709), ('Ecommerce', 0.3287859559059143)],)\n",
      "([('Walgreens', 0.4085548222064972), ('CVS', 0.3547872304916382), ('Shipping', 0.3253345489501953)],)\n",
      "([('Walgreens', 0.35676565766334534), ('Shipping', 0.3469219207763672), ('CVS', 0.30309152603149414)],)\n",
      "([('Shipping', 0.28568804264068604), ('Ecommerce', 0.28302499651908875), ('Government', 0.2752073109149933)],)\n",
      "([('Shipping', 0.2787896394729614), ('Ecommerce', 0.24896633625030518), ('Delivery', 0.18219441175460815)],)\n",
      "([('Walgreens', 0.3532087802886963), ('Amazon Pharmacy', 0.31280380487442017), ('Shipping', 0.30850744247436523)],)\n",
      "([('Shipping', 0.30933478474617004), ('Government', 0.2622150778770447), ('Ecommerce', 0.2578164339065552)],)\n",
      "([('Shipping', 0.29949381947517395), ('Government', 0.27759599685668945), ('Walgreens', 0.2768234312534332)],)\n",
      "([('Shipping', 0.29447418451309204), ('Ecommerce', 0.270046591758728), ('Government', 0.21029797196388245)],)\n",
      "([('Shipping', 0.31711429357528687), ('Government', 0.3117479979991913), ('Ecommerce', 0.2719354033470154)],)\n",
      "([('Shipping', 0.3078504800796509), ('Walgreens', 0.2955789566040039), ('CVS', 0.2768745422363281)],)\n",
      "([('Ecommerce', 0.3578207194805145), ('Shipping', 0.35040175914764404), ('Amazon Pharmacy', 0.3438054621219635)],)\n",
      "([('Shipping', 0.3023812770843506), ('Ecommerce', 0.27585381269454956), ('Delivery', 0.21381494402885437)],)\n",
      "([('Shipping', 0.36946338415145874), ('Ecommerce', 0.3625296354293823), ('Amazon Pharmacy', 0.3065357804298401)],)\n",
      "([('Ecommerce', 0.4159192442893982), ('Amazon Pharmacy', 0.3985063433647156), ('Shipping', 0.3857657313346863)],)\n",
      "([('Ecommerce', 0.471839964389801), ('Shipping', 0.44443264603614807), ('Amazon Pharmacy', 0.4350915253162384)],)\n",
      "([('Ecommerce', 0.37390679121017456), ('Shipping', 0.36242353916168213), ('Amazon Pharmacy', 0.27835550904273987)],)\n",
      "([('Shipping', 0.47117817401885986), ('Ecommerce', 0.40543133020401), ('Delivery', 0.3215187191963196)],)\n",
      "([('Shipping', 0.47072434425354004), ('CVS', 0.45232975482940674), ('Ecommerce', 0.4406052231788635)],)\n",
      "([('Ecommerce', 0.41523122787475586), ('Shipping', 0.41136544942855835), ('Delivery', 0.2813594937324524)],)\n",
      "([('Ecommerce', 0.3950835168361664), ('Shipping', 0.3690892457962036), ('Amazon Pharmacy', 0.33976221084594727)],)\n",
      "([('Ecommerce', 0.36654528975486755), ('Shipping', 0.35739201307296753), ('Medicines', 0.33367717266082764)],)\n",
      "([('Shipping', 0.41872918605804443), ('Government', 0.3908977210521698), ('Ecommerce', 0.38448697328567505)],)\n",
      "([('Shipping', 0.48395684361457825), ('Ecommerce', 0.4419921636581421), ('Medicines', 0.404347687959671)],)\n",
      "([('Shipping', 0.3275463879108429), ('Medicines', 0.32108163833618164), ('Ecommerce', 0.3006729483604431)],)\n",
      "([('Shipping', 0.2534344494342804), ('Ecommerce', 0.24388007819652557), ('Delivery', 0.1780860722064972)],)\n",
      "([('Shipping', 0.31814873218536377), ('Ecommerce', 0.28140586614608765), ('Delivery', 0.21466831862926483)],)\n",
      "([('Shipping', 0.2519211173057556), ('Ecommerce', 0.2140820175409317), ('Delivery', 0.16411659121513367)],)\n",
      "([('Shipping', 0.35977602005004883), ('Ecommerce', 0.3181424140930176), ('Delivery', 0.2933318018913269)],)\n",
      "([('Shipping', 0.2606246769428253), ('Ecommerce', 0.2393959015607834), ('Delivery', 0.2120663970708847)],)\n",
      "([('Shipping', 0.41283273696899414), ('Ecommerce', 0.3800521492958069), ('Medicines', 0.38001054525375366)],)\n",
      "([('Shipping', 0.3000258505344391), ('Ecommerce', 0.25944626331329346), ('Medicines', 0.24874047935009003)],)\n",
      "([('CVS', 0.27968406677246094), ('Shipping', 0.26421093940734863), ('Ecommerce', 0.24993017315864563)],)\n",
      "([('Shipping', 0.2818777859210968), ('Ecommerce', 0.23015747964382172), ('Delivery', 0.22149436175823212)],)\n",
      "([('Shipping', 0.3611503839492798), ('Medicines', 0.2951609194278717), ('Ecommerce', 0.28967761993408203)],)\n",
      "([('Amazon Pharmacy', 0.5422918796539307), ('Ecommerce', 0.483203262090683), ('Shipping', 0.4358532428741455)],)\n",
      "([('Ecommerce', 0.36663636565208435), ('Shipping', 0.35975584387779236), ('Medicines', 0.34573400020599365)],)\n",
      "([('Ecommerce', 0.4204978048801422), ('Amazon Pharmacy', 0.41654717922210693), ('Shipping', 0.41572362184524536)],)\n",
      "([('Shipping', 0.41290682554244995), ('Ecommerce', 0.3895537257194519), ('Amazon Pharmacy', 0.34762659668922424)],)\n",
      "([('Shipping', 0.34670525789260864), ('Ecommerce', 0.30018150806427), ('Delivery', 0.24006974697113037)],)\n",
      "([('Shipping', 0.3579667806625366), ('Medicines', 0.30461397767066956), ('Ecommerce', 0.3038010895252228)],)\n",
      "([('Shipping', 0.332450807094574), ('Ecommerce', 0.2899094820022583), ('Medicines', 0.2416187822818756)],)\n",
      "([('Shipping', 0.305285781621933), ('Ecommerce', 0.2572917342185974), ('Delivery', 0.23884738981723785)],)\n",
      "([('Shipping', 0.30348676443099976), ('Ecommerce', 0.258491575717926), ('Medicines', 0.24586883187294006)],)\n",
      "([('Shipping', 0.26788678765296936), ('Ecommerce', 0.24099384248256683), ('Delivery', 0.20306286215782166)],)\n",
      "([('Walgreens', 0.4590424597263336), ('CVS', 0.45695415139198303), ('Amazon Pharmacy', 0.41059431433677673)],)\n",
      "([('Shipping', 0.4038439393043518), ('Ecommerce', 0.3657786250114441), ('Delivery', 0.3272973597049713)],)\n",
      "([('Shipping', 0.42170020937919617), ('Ecommerce', 0.3572676181793213), ('CVS', 0.3297281265258789)],)\n",
      "([('Shipping', 0.39646774530410767), ('Ecommerce', 0.38800910115242004), ('Delivery', 0.3155694603919983)],)\n",
      "([('Shipping', 0.38460099697113037), ('Ecommerce', 0.336556613445282), ('Government', 0.2716449499130249)],)\n",
      "([('Shipping', 0.4139918088912964), ('Ecommerce', 0.37591540813446045), ('Amazon Pharmacy', 0.3192518949508667)],)\n",
      "([('Shipping', 0.3290467858314514), ('Ecommerce', 0.28674203157424927), ('Medicines', 0.25892573595046997)],)\n",
      "([('Ecommerce', 0.36933422088623047), ('Shipping', 0.35205012559890747), ('Walgreens', 0.30239975452423096)],)\n",
      "([('Walgreens', 0.5020809173583984), ('CVS', 0.3609355688095093), ('Amazon Pharmacy', 0.35536128282546997)],)\n",
      "([('Ecommerce', 0.38606858253479004), ('Shipping', 0.3794808089733124), ('Walgreens', 0.3713945746421814)],)\n",
      "([('Ecommerce', 0.3752679228782654), ('Shipping', 0.3534577488899231), ('Walgreens', 0.3297387361526489)],)\n",
      "([('Shipping', 0.33222752809524536), ('Ecommerce', 0.2967816889286041), ('Medicines', 0.2645694613456726)],)\n",
      "([('Shipping', 0.35679060220718384), ('Delivery', 0.28296589851379395), ('Ecommerce', 0.2808176279067993)],)\n",
      "([('Shipping', 0.3173425793647766), ('Government', 0.2678372859954834), ('Medicines', 0.2569398880004883)],)\n"
     ]
    }
   ],
   "source": [
    "output1 = classify_topics('Walgreens has rolled out a new kind of store that shrinks down its square footage and focuses on the pharmacy', model_word2vec),\n",
    "print(output1)\n",
    "\n",
    "output2 = classify_topics('Expect to see fewer front-of-store items, a slimmed down selection of over-the-counter medications and an emphasis on relationships between pharmacists and customers', model_word2vec),\n",
    "print(output2)\n",
    "\n",
    "output3 = classify_topics('It has opened more than 30 small-format pharmacies as part of a pilot, and it may open additional ones depending on how the stores perform', model_word2vec),\n",
    "print(output3)\n",
    "\n",
    "output4 = classify_topics('Along with feeling the heat from CVS Health and other drugstores, Walmart and Amazon are both expanding their health care focus', model_word2vec),\n",
    "print(output4)\n",
    "\n",
    "output5 = classify_topics('Walmart has opened four clinics that offer a broad array of services at a low price, including primary care and dental care, in addition to the pharmacies it has at many of its big-box stores', model_word2vec),\n",
    "print(output5)\n",
    "\n",
    "output6 = classify_topics('Amazon bought PillPack two years ago, laying the foundation for the company to expand into pharmacy', model_word2vec),\n",
    "print(output6)\n",
    "\n",
    "output7 = classify_topics('Walgreens is balancing its investment with cost-cutting efforts that have included layoffs and hundreds of store closures', model_word2vec),\n",
    "print(output7)\n",
    "\n",
    "output8 = classify_topics('Walgreens has turned some of its more than 9,200 U.S. stores into “neighborhood health destinations” — a term it uses to describe locations with health care services along with a pharmacy', model_word2vec),\n",
    "print(output8)\n",
    "\n",
    "output9 = classify_topics('She said the small-format pharmacy was inspired in part by Walgreens stores near health care systems that are smaller in size and cater to customers picking up medication after getting discharged from the hospital', model_word2vec),\n",
    "print(output9)\n",
    "\n",
    "output10 = classify_topics('Instead, they’ll notice a sharper focus on health and wellness products like vitamins, over-the-counter medications, thermometers and Band-Aids, Shah said', model_word2vec),\n",
    "print(output10)\n",
    "\n",
    "output11 = classify_topics('She said it’s changed the mix of products, depending on what customers want', model_word2vec),\n",
    "print(output11)\n",
    "\n",
    "output12 = classify_topics('Pharmacists play a central role in the new kind of store — and Walgreens hopes that personalized care will ultimately lead to better health outcomes, Shah said', model_word2vec),\n",
    "print(output12)\n",
    "\n",
    "output13 = classify_topics('She said the company sees the smaller stores as a place where more people can have one-on-one conversations with pharmacists, particularly those taking multiple medications or with complex and chronic conditions', model_word2vec),\n",
    "print(output13)\n",
    "\n",
    "output14 = classify_topics('Shah said the company is testing the small-format pharmacies in diverse locations, including urban, suburban and rural areas', model_word2vec),\n",
    "print(output14)\n",
    "\n",
    "output15 = classify_topics('Even as people order prescriptions online or get them delivered to their door, Shah said brick-and-mortar locations still play an important role', model_word2vec),\n",
    "print(output15)\n",
    "\n",
    "output16 = classify_topics('The company considers a variety of factors when deciding where to open the stores, such as whether there’s a need for more pharmacies and greater health care access, Shah said', model_word2vec),\n",
    "print(output16)\n",
    "\n",
    "output17 = classify_topics('Those include pharmacy deserts, where customers don’t have a nearby place to pick up prescriptions', model_word2vec),\n",
    "print(output17)\n",
    "\n",
    "output18 = classify_topics('When Seattle-headquartered Amazon announced its foray into e-pharmacy in the US recently, traders’ groups, pharma associations as well as big businesses in India took notice', model_word2vec),\n",
    "print(output18)\n",
    "\n",
    "output19 = classify_topics('Players with interest in this space are keenly looking out for Amazon’s next move and whether India would figure prominently in its e-pharmacy plans.', model_word2vec),\n",
    "print(output19)\n",
    "\n",
    "output20 = classify_topics('So far, the American e-commerce major has taken only baby steps in the pharmacy segment in India and Amazon executives have pointed out there’s no timeline for a commercial launch in the country yet', model_word2vec),\n",
    "print(output20)\n",
    "\n",
    "output21 = classify_topics('Amazon has launched an online delivery service offering big discounts for prescription medicine in the US, as pharmacies become the latest sector to be disrupted by the retail giant', model_word2vec),\n",
    "print(output21)\n",
    "\n",
    "output22 = classify_topics('Amazon Pharmacy, which will offer discounts of up to 80 per cent on generic drugs for Prime subscribers paying without insurance, either on its site or at more than 50,000 bricks-and-mortar pharmacies nationwide, will become a direct challenger to retailers such as Walgreens and CVS Health', model_word2vec),\n",
    "print(output22)\n",
    "\n",
    "output23 = classify_topics('The world’s largest online retailer is also offering discounts of up to 40 per cent on branded medicines, it said in a statement on Tuesday', model_word2vec),\n",
    "print(output23)\n",
    "\n",
    "output24 = classify_topics('The recurring nature of pharmacy, and relatively small package size, should also integrate well into Amazon’s existing logistics orders to increase gross profit dollars per shipment', model_word2vec),\n",
    "print(output24)\n",
    "\n",
    "output25 = classify_topics('Shares in competitors were shaken by the announcement. Walgreens Boots Alliance fell more than 9 per cent by afternoon trading on Tuesday, while CVS Health, the largest pharmacy operator in the US, dropped 9 per cent and Rite Aid shed more than 16 per cent', model_word2vec),\n",
    "print(output25)\n",
    "\n",
    "output26 = classify_topics('Shares in GoodRx, a California-based company that offers discount partnerships with 75,000 US pharmacies, tumbled 20 per cent', model_word2vec),\n",
    "print(output26)\n",
    "\n",
    "output27 = classify_topics('Setting up the store during the pandemic could help Amazon as online sales of other products such as groceries have rapidly grown while people have been stuck at home', model_word2vec),\n",
    "print(output27)\n",
    "\n",
    "output28 = classify_topics('Although prescription medicines have lagged behind other products in selling online, consumers could be tempted by the convenience of ordering from Amazon, and the discounts available', model_word2vec),\n",
    "print(output28)\n",
    "\n",
    "output29 = classify_topics('Analysts warn regulatory compliance — particularly how the drugs are stored and shipped — presents a big hurdle for Amazon to overcome', model_word2vec),\n",
    "print(output29)\n",
    "\n",
    "output30 = classify_topics('The store will also not deliver Schedule 2 medication, which includes many opioids', model_word2vec),\n",
    "print(output30)\n",
    "\n",
    "output31 = classify_topics('Customers seeking prescriptions tend to be loyal to local pharmacists, in part because of the sensitive nature of medication', model_word2vec),\n",
    "print(output31)\n",
    "\n",
    "output32 = classify_topics('They also tend to be older, making them less likely to shop online', model_word2vec),\n",
    "print(output32)\n",
    "\n",
    "output33 = classify_topics('There are intricacies in this sub-segment that may be tougher to break, from a relationship perspective, than in any other segment of retail', model_word2vec),\n",
    "print(output33)\n",
    "\n",
    "output34 = classify_topics('I would never discount Amazon. It can afford to spend an awful lot of money and absorb a big margin hit', model_word2vec),\n",
    "print(output34)\n",
    "\n",
    "output35 = classify_topics('Avoiding stores and getting your necessities delivered to your door is not just convenient, it is very necessary in the ongoing COVID-19 pandemic', model_word2vec),\n",
    "print(output35)\n",
    "\n",
    "output36 = classify_topics('Luckily, you can get basically anything you want without stepping into a store -- including your prescriptions', model_word2vec),\n",
    "print(output36)\n",
    "\n",
    "output37 = classify_topics('Prescription delivery services can be a game-changer if you are unable to go the standard pharmacy route for your prescription refill', model_word2vec),\n",
    "print(output37)\n",
    "\n",
    "output38 = classify_topics('Of course, finding a way to get your prescription medication delivered is very important if you are home sick and dont want to spread germs, but there are so many other reasons a patient may want to get their medication delivered direct to their door', model_word2vec),\n",
    "print(output38)\n",
    "\n",
    "output39 = classify_topics('Seniors might have trouble making it to the pharmacy', model_word2vec),\n",
    "print(output39)\n",
    "\n",
    "output40 = classify_topics('Women may not have time to pick up their birth control each month', model_word2vec),\n",
    "print(output40)\n",
    "\n",
    "output41 = classify_topics('It can be easy to become disorganized and fall behind on refills for maintenance medications', model_word2vec),\n",
    "print(output41)\n",
    "\n",
    "output42 = classify_topics('Amazon Pharmacy is a new online pharmacy that offers prescription refills and free delivery for Amazon Prime members', model_word2vec),\n",
    "print(output42)\n",
    "\n",
    "output43 = classify_topics('Amazon takes your health insurance to help pay for your medications and is also offering a prescription savings benefit if you arent using health insurance', model_word2vec),\n",
    "print(output43)\n",
    "\n",
    "output44 = classify_topics('Amazon Pharmacy lets customers compare prescription costs for their medications with an insurance co-pay, without insurance and the Prime Discount, so they can find the least-expensive option', model_word2vec),\n",
    "print(output44)\n",
    "\n",
    "output45 = classify_topics('PillPack is a medication delivery service owned and operated by Amazon that offers free delivery, and takes most types of health insurance', model_word2vec),\n",
    "print(output45)\n",
    "\n",
    "output46 = classify_topics('The service does not cost anything more than what you pay for medication, which is a great deal considering the extra benefits you get compared to a standard pharmacy service', model_word2vec),\n",
    "print(output46)\n",
    "\n",
    "output47 = classify_topics('Once you get your prescriptions set up to be filled through PillPack, you simply pay the copay for your medication, and your medications will be shipped to you every month', model_word2vec),\n",
    "print(output47)\n",
    "\n",
    "output48 = classify_topics('Besides offering free delivery, those extra benefits include organizing and separating your medications for each day.', model_word2vec),\n",
    "print(output48)\n",
    "\n",
    "output49 = classify_topics('Every day pills are placed into a convenient single-serve pack, and the time you are supposed to take them is even printed on the front', model_word2vec),\n",
    "print(output49)\n",
    "\n",
    "output50 = classify_topics('This is a huge perk if you take a lot of medications and spend time sorting them out, and also if you have difficulty remembering what time you are supposed to take your pills', model_word2vec),\n",
    "print(output50)\n",
    "\n",
    "output51 = classify_topics('If you are a caretaker for someone else, this can also be a huge time saver', model_word2vec),\n",
    "print(output51)\n",
    "\n",
    "output52 = classify_topics('CVS Pharmacy offers one- to two-day delivery and same day (on-demand) delivery in most cities', model_word2vec),\n",
    "print(output52)\n",
    "\n",
    "output53 = classify_topics('Same day delivery is usually fulfilled within hours, which is great for when you need your meds ASAP', model_word2vec),\n",
    "print(output53)\n",
    "\n",
    "output54 = classify_topics('CVS does charge a delivery fee for prescriptions, but some health insurance plans may cover the fee, including Medicare Part D', model_word2vec),\n",
    "print(output54)\n",
    "\n",
    "output55 = classify_topics('If you join CVS membership program, CarePass for $5 a month, you get free delivery for your prescriptions, plus free one- to two-day delivery for other items', model_word2vec),\n",
    "print(output55)\n",
    "\n",
    "output56 = classify_topics('It is important to remember that ordering items from CVS.com is not the same service as prescription delivery, so those will take several days or longer to ship', model_word2vec),\n",
    "print(output56)\n",
    "\n",
    "output57 = classify_topics('Walmart Pharmacy does offer free standard shipping for prescriptions, but you will have to wait around 5-7 days for your medications', model_word2vec),\n",
    "print(output57)\n",
    "\n",
    "output58 = classify_topics('If you need your medications faster, you can pay an additional $8 for second-day delivery, or $15 for overnight delivery', model_word2vec),\n",
    "print(output58)\n",
    "\n",
    "output59 = classify_topics('Walmart has an app to help make the prescription management and refill process easier and more efficient', model_word2vec),\n",
    "print(output59)\n",
    "\n",
    "output60 = classify_topics('AllianceRx is Walgreens combined specialty and home delivery pharmacy', model_word2vec),\n",
    "print(output60)\n",
    "\n",
    "output61 = classify_topics('For non-specialty medications, you can get free next-day delivery with Walgreens Express', model_word2vec),\n",
    "print(output61)\n",
    "\n",
    "output62 = classify_topics('Walgreens Express is your best bet for individual or one-time prescriptions you need now', model_word2vec),\n",
    "print(output62)\n",
    "\n",
    "output63 = classify_topics('With AllianceRx, you can get up to 90 days of your prescriptions filled, plus automatic refills', model_word2vec),\n",
    "print(output63)\n",
    "\n",
    "output64 = classify_topics('Because it can cover up to three months of medication, the delivery takes about 10 days since it is delivered by standard mail for free', model_word2vec),\n",
    "print(output64)\n",
    "\n",
    "output65 = classify_topics('AllianceRx is what you would request if you have chronic health conditions or specialty medications you know you will need filled for the foreseeable future', model_word2vec),\n",
    "print(output65)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
